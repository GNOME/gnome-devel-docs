<?xml version="1.0" encoding="UTF-8"?>
<!-- :xml.root=hig-book.xml: -->

<chapter id="desktop-integration">
  <title>Desktop Integration</title>
  
  <para>There are two elements to basic integration with the user environment of the GNOME Desktop.
    <orderedlist>
      <listitem><para>Place an entry for your application in the <guimenu>Applications</guimenu> menu. This is the primary mechanism by which users discover and run applications.</para></listitem>
      <listitem><para>If your application can open and save files, place entries for those file types in the application database and the document type (MIME) database. This allows the file manager and other applications to automatically launch your application when they encounter files your application can handle.</para></listitem>
    </orderedlist>
	Do not add launchers or other icons to the desktop when your application is installed.  The desktop is the user&apos;s space, and is reserved for icons that they explicitly request or add themselves.
  </para>
  
  <sect1 id="desktop-application-menu">
    <title>Placing Entries in the Applications Menu</title>
    
	<figure><title>The Applications menu</title>
	  <mediaobject>
	    <imageobject><imagedata fileref="images/applications-menu.png" format="PNG"/></imageobject>
	    <imageobject><imagedata fileref="images/applications-menu.eps" format="EPS"/></imageobject>
	    <textobject><phrase>Screenshot of the open Applications menu on the GNOME menu panel</phrase></textobject>
	  </mediaobject>
	</figure>
	
       <para>The <guimenu>Applications</guimenu> menu, which appears on the panel at the top of the screen by default, is the primary mechanism by which users discover and run applications.  You place entries in this menu by installing an appropriate <filename>.desktop</filename> file.</para>

    <para>The menu is arranged into a set of categories, such as Accessories and Games. Applications are placed in particular categories by the set of keywords they include in their <filename>.desktop</filename> file. </para>

	<itemizedlist><title>Guidelines</title>
		<listitem><para>Assign your application to only one category on the <guimenu>Applications</guimenu> menu</para></listitem>

		<listitem><para>For application suites that wrap a number of smaller sub-applications into a single window, such as Evolution or OpenOffice.org, add a menu item for each sub-application. For example, the mail, calendar, and tasklist in Evolution should each have their own menu item.</para></listitem>

	</itemizedlist>

	<para>Technical details can be found in the freedesktop.org <ulink url="http://freedesktop.org/Standards/menu-spec">menu</ulink> and <ulink url="http://www.freedesktop.org/Standards/desktop-entry-spec">desktop entry</ulink> specifications.</para>


    <sect2 id="menu-item-names">
      <title>Menu Item Names</title>


      <sect3 id="menu-item-functional-description">
	<title>Include a functional description in the menu name</title>

	<para>In the menu item name, include a description of functionality in addition to the proper name of the application. This is especially useful novice users, and to users of systems where numerous applications are installed by default. Users are more likely to find your application if the name that appears in the menu includes a description of its functionality.</para>

	<para>For example, <ulink url="http://web.mit.edu/is/usability/aui/">user testing of MIT&apos;s Athena system</ulink> revealed that users had difficulty finding the file manager because they were unfamiliar with the name &quot;Nautilus&quot;. Because users did not associate the word &quot;Nautilus&quot; with the concept &quot;file manager&quot; the menu item did not help them. This is an example of not using the user&apos;s language. See <xref linkend="principles-match"/> for more on this topic.</para>


	    <example>
		<title>Including functional description in menu names</title>
		<informaltable frame="none">
			
			<tgroup colsep="0" rowsep="0" cols="2" align="left">
			  <thead>
				<row>
		      			<entry>Original menu item</entry>
				      <entry>Revised menu item</entry>
	   			</row>
			  </thead>
			<tbody>
	     			<row>
					<entry>Epiphany</entry>
					<entry>Epiphany Web Browser</entry>
				</row>
	  		</tbody>
         	</tgroup>
		</informaltable>
	</example>

      </sect3>

      <sect3>
	<title>Only put useful information in the menu name</title>
	<para>Do not include words like &quot;GNOME&quot;, &quot;X Window System&quot;, &quot;GTK+&quot; or other platform details in <guimenu>Application</guimenu> menu names. The user probably already knows what platform they are using, and if they don&apos;t, then application names are not the right place to inform them.</para>
	<example>
		<title>Removing non-essential information from menu names</title>
		<informaltable frame="none">
			
			<tgroup colsep="0" rowsep="0" cols="2" align="left">
			  <thead>
				<row>
		      			<entry>Original menu item</entry>
				      <entry>Revised menu item</entry>
	   			</row>
			  </thead>
			<tbody>
	     			<row>
					<entry>GNOME Image Viewer</entry>
					<entry>Image Viewer</entry>
				</row>
				<row>
					<entry>GTK Blog Editor</entry>
					<entry>Blog Editor</entry>
				</row>
	  		</tbody>
         	</tgroup>
		</informaltable>
	</example>

	<para>Do not include technical details when the user does not need to know them, or can infer them from context.  Avoid technical jargon unless the application is to be used only by a technical audience.</para>
	<para>For example, when both a client and a server for something are listed in the menus, remove the word &quot;Client&quot; from the menu name for the client.</para>
	
	<example>
		<title>Removing technical jargon from menu names</title>
		<informaltable frame="none">
			
			<tgroup colsep="0" rowsep="0" cols="2" align="left">
			  <thead>
				<row>
		      			<entry>Original menu item</entry>
				      <entry>Revised menu item</entry>
	   			</row>
			  </thead>
			<tbody>
	     			<row>
					<entry>Gnome Batalla Naval Client</entry>
					<entry>Batalla Naval</entry>
				</row>
				<row>
					<entry>Gnome Batalla Naval Server</entry>
					<entry>Batalla Naval Multiplayer Server</entry>
				</row>
				<row>
					<entry>Gnome VideoLAN Client</entry>
					<entry>VideoLAN Movie Player</entry>
				</row>
	  		</tbody>
         	</tgroup>
		</informaltable>
	</example>

	<tip><title>Providing the right information</title>
        <para>Try to imagine what words users will be looking for when they select your application from the <guimenu>Applications</guimenu> menu. That is the information that should be in the menu name. For example, a user wanting to play a movie will probably not be looking for the word &quot;Client&quot;. On the other hand, a user wanting to transmit movies from their computer may well look for the word &quot;Server&quot;. Avoid thinking of the applications menu as an ontology!</para></tip>
      </sect3>

      <sect3>
	<title>Menu name formats</title>
	<orderedlist>
	  
         <listitem>
	    <para>If your application&apos;s proper name is already descriptive of its functionality, and not just suggestive, use the format: <replaceable>Application Name</replaceable></para>
	<example>
		<title>Using application&apos;s name as menu name</title>
		<informaltable frame="none">
			
			<tgroup colsep="0" rowsep="0" cols="2" align="left">
			  <thead>
				<row>
		      			<entry>Application name</entry>
				      <entry>Menu name</entry>
	   			</row>
			  </thead>
			<tbody>
	     			<row>
					<entry>Dictionary</entry>
					<entry>Dictionary</entry>
				</row>
				<row>
					<entry>Search Tool</entry>
					<entry>Search Tool</entry>
				</row>
	  		</tbody>
         	</tgroup>
		</informaltable>
        	</example>
          </listitem>

	  <listitem>
	    <para>If there is a succinct functional description of your application, use the format: <replaceable>ApplicationName FunctionalDescription</replaceable></para>

	<example>
		<title>Using functional description in menu names</title>
		<informaltable frame="none">
			
			<tgroup colsep="0" rowsep="0" cols="2" align="left">
			  <thead>
				<row>
		      			<entry>Application name</entry>
				      <entry>Menu item name</entry>
	   			</row>
			  </thead>
			<tbody>
	     			<row>
					<entry>The GIMP</entry>
					<entry>GIMP Image Editor</entry>
				</row>
				<row>
					<entry>Evolution email sub-application</entry>
					<entry>Evolution Email</entry>
				</row>
				<row>
					<entry>AbiWord</entry>
					<entry>AbiWord Word Processor</entry>
				</row>
				<row>
					<entry>Galeon</entry>
					<entry>Galeon Web Browser</entry>
				</row>
				<row>
					<entry>Gramps</entry>
					<entry>Gramps Genealogy</entry>
				</row>
				<row>
					<entry>AisleRiot</entry>
					<entry>AisleRiot Solitaire</entry>
				</row>

	  		</tbody>
         	</tgroup>
		</informaltable>
	</example>


	  </listitem>

	  <listitem>
	    <para>A few applications, particularly games, do not have appropriate functional descriptions (but note that many games do). In this case, use <replaceable>Application Name</replaceable> as the menu name.</para>

	<example>
		<title>Using application&apos;s name as menu name where no functional description exists</title>
		<informaltable frame="none">
			
			<tgroup colsep="0" rowsep="0" cols="2" align="left">
			  <thead>
				<row>
		      			<entry>Application name</entry>
				      <entry>Menu item name</entry>
	   			</row>
			  </thead>
			<tbody>
	     			<row>
					<entry>Bomber Maze</entry>
					<entry>Bomber Maze</entry>
				</row>
	  		</tbody>
         	</tgroup>
		</informaltable>
	</example>

	  </listitem>

	</orderedlist>
      </sect3>
<!--
	<sect3>
	<title>Generic Name and Name</title>

        <para>There are two name types required for a menu item, a generic name and a proper name.  The menu item requires these two names to distinguish the applications when there are more than one of the same application type present and to simplify the item name when there is only one present.  If only one application of a generic name exists in the menu the application assumes the generic name, otherwise the proper name is displayed.</para>

	<example>
		<title>X-Chat .desktop file</title>
		 <programlisting>
	Name=X-Chat IRC
	GenericName=IRC
		 </programlisting>
	</example>

	<para>
	The generic name or GenericName, is a name describing only the applications functionality without the applications proper name.  This is the name to be displayed when there are no other applications of the same generic name present and should simply describe the pure functionality of the application without its actual name.
	</para>

	<para>
	A proper name or Name, is the displayed name of the application when there are more than one applications present with the same generic name.  This distinguishes the multiple generic names with the applications proper name.
	</para>

	<example>
		<title>GenericName and Name</title>
		<informaltable frame="none">
			
			<tgroup colsep="0" rowsep="0" cols="2" align="left">
			  <thead>
				<row>
		      			<entry>GenericName</entry>
					<entry>Name</entry>
	   			</row>
			  </thead>
			  <tbody>
	     			<row>
					<entry>Web Browser</entry>
					<entry>Epiphany Web Browser</entry>
				</row>
	     			<row>
					<entry>Web Browser</entry>
					<entry>Mozilla Web Browser</entry>
				</row>
	     			<row>
					<entry>Word Processor</entry>
					<entry>AbiWord Word Processor</entry>
				</row>
	     			<row>
					<entry>Word Processor</entry>
					<entry>OpenOffice.org Word Processor</entry>
				</row>
	  		</tbody>
	         	</tgroup>
		</informaltable>
	</example>
	</sect3>
-->
    </sect2>
    <sect2 id="menu-item-tooltips">

      <title>Menu Item Tooltips</title>

      <para>Tooltips help provide users with enough information to run the right application. Many users use tooltips to explore a new environment.</para>
	<para>Provide a tooltip for each <guimenu>Application</guimenu> menu item you add, following these guidelines:</para>

	<itemizedlist><title>Guidelines</title>
		<listitem><para>Phrase the tooltip as an imperative verb, for example &quot;design&quot;, &quot;write&quot; or &quot;check&quot;.</para></listitem>
		<listitem><para>Describe the most important tasks users can accomplish with your application.</para></listitem>
		<listitem><para>While tooltips should not be verbose, they should be longer and more descriptive than the item&apos;s name.</para></listitem>
	</itemizedlist>

	<example>
		<title>Example tooltips for GNOME applications</title>
		<informaltable frame="none">
			
			<tgroup colsep="0" rowsep="0" cols="2" align="left">
			  <thead>
				<row>
		      			<entry>Application</entry>
				      <entry>Menu item tooltip</entry>
	   			</row>
			  </thead>
			<tbody>
	     			<row>
					<entry>Character Map</entry>
					<entry>Insert special characters into documents</entry>
				</row>

				<row>
					<entry>Memprof</entry>
					<entry>Check your applications for memory leaks</entry>
				</row>
				<row>
					<entry>Same Gnome</entry>
					<entry>Arrange long chains of similarly-colored balls to eliminate them</entry>
				</row>
				<row>
					<entry>Gnome Batalla Naval Client</entry>
					<entry>Find and sink enemy ships in this networked version of Battleship</entry>
				</row>
	  		</tbody>
	         	</tgroup>
		</informaltable>
	</example>

    </sect2>
   </sect1>
    <sect1 id="gconf-keys">

      <title>GConf Keys</title>

      <para>GConf keys are required to have long and short descriptions for each key.  Many keys have no interface through the application, so for someone administering the key values from another application each description field will be the only interface available to them.</para>

	<itemizedlist><title>Guidelines</title>
		<listitem><para>Short Descriptions should be short, less than 8 words, describing the purpose of the key</para></listitem>
		<listitem><para>Long Description should be complete in describing the possible values of the key and the effects that those values have on the application</para></listitem>
	</itemizedlist>

	<example>
		<title>Example descriptions for GConf Keys from gnome-terminal</title>
		<informaltable frame="none">
			
			<tgroup colsep="0" rowsep="0" cols="3" align="left">
			  <thead>
				<row>
					<entry>Key</entry>
		      			<entry>Short Description</entry>
				      <entry>Long Description</entry>
	   			</row>
			  </thead>
			<tbody>
	     			<row>
					<entry>background_type</entry>
					<entry>Background type</entry>
					<entry>Type of terminal background. May be &quot;solid&quot; for a solid color, &quot;image&quot; for an image, or &quot;transparent&quot; for pseudo-transparency. </entry>
				</row>	
	     			<row>
					<entry>delete_binding</entry>
					<entry>Effect of the Delete key</entry>
					<entry>Sets what code the delete key generates. Possible values are &quot;ascii-del&quot; for the ASCII DEL character, &quot;control-h&quot; for Control-H (AKA the ASCII BS character), &quot;escape-sequence&quot; for the escape sequence typically bound to backspace or delete. &quot;escape-sequence&quot; is normally considered the correct setting for the Delete key. </entry>
				</row>	
			</tbody>
	         	</tgroup>
		</informaltable>
	</example>
   </sect1>
  
  <sect1 id="desktop-mimedatabase">
    <title>Mapping Document Types to Applications</title>
    
    <para>The document type (MIME) database allows users to specify their preferred applications for opening different types of document. This is the mechanism by which Nautilus, Evolution and other applications decide which application to run when they encounter a document they cannot open themselves.</para>

    <para>It is important for users to be able to double click on documents they see on the desktop, such as files and email messages, and have them launch in their favorite application.  Therefore, your GNOME application should associate itself at install-time with all the document types it can handle. Technical details on doing this can be found in the <ulink url="http://developer.gnome.org/doc/API/gnome-vfs"><citetitle>GnomeVFS API reference</citetitle></ulink>.</para>

    <!-- FIXME: need to cover things like the preferred list and when an application should add itself to the preferred list -->

  </sect1>

  <sect1 id="desktop-notification-area">
	<title>Using the Status Notification Area</title>
	
	<para>The status notification area on the panel is used to notify the user of non-critical events, such as the arrival of new email, and to monitor the status of background activities, such as a laptop battery charging.  Recent versions of the GNOME desktop (2.12 or newer) can also pop up a small transient &quot;balloon&quot; attached to a notification icon, to give additional information and interaction choices related to an event.</para>

		<warning><para>The utility of the notification area decreases rapidly when more than four icons are displayed at the same time. Icons that appear only temporarily, in response to specific events, are therefore preferable.</para></warning>
	
	<para>Following the guidelines in this section will help to clarify the difference in the user&apos;s mind between information presented in the notification area, and controls and information presented on other parts of the panel.</para>

	<sect2 id="desktop-notification-appropriate-use">
		<title>Appropriate Uses for the Notification Area</title>
	
		<para>There are three acceptable uses for the notification area:</para>
	
		<itemizedlist>
		
			<listitem><para>Displaying a transient icon in response to an event (e.g. arrival of new mail in a monitored folder).  Clicking the icon opens the most appropriate window to deal with the event (e.g. Inbox). The icon is removed when the state prior to the event is restored (e.g. no more unread mail in monitored folders).</para></listitem>
		
			<listitem><para>Displaying an icon for the duration of a background activity (e.g. while a document is being printed).  The icon is removed when the activity successfully completes, or replaced with a suitable error icon if the activity fails (optional tooltip or balloon to explain problem).  Clicking the error icon (or balloon) opens the most appropriate window for the user to rectify the problem.</para></listitem>
		
			<listitem><para>Displaying an ever-present icon to monitor a continuous background activity, such as a laptop battery being charged.  Continous notification icon presence should always be controllable by a user preference. Only core GNOME applications may have this preference turned on by default; other applications should turn it off by default. <remark>Standard way of presenting this option would be nice.</remark></para></listitem>
		
		</itemizedlist>
	
		<para>In particular, you should probably use an applet instead of using a notification icon if:</para>
		
		<itemizedlist>
			<listitem><para>your notification icon would need to be shown all the time, or would benefit from being shown all the time</para></listitem>
		</itemizedlist>
		
		<para><emphasis>and:</emphasis></para>	
		
		<itemizedlist>
			<listitem><para>clicking your notification icon would do anything other than opening a window or dialog box <emphasis>directly</emphasis> associated with the icon or the event that caused it to appear <remark>(example?)</remark>, or</para></listitem>
			<listitem><para>multiple instances of the icon would either be required, or could be considered useful (for example, a clock-- a user might want to display a separate clock for each of multiple timezones)</para></listitem>
		</itemizedlist>
		
		<para>Because the notification area is itself a panel applet, remember that the user may not have it on their desktop at all.  Above all, therefore, only use notification icons to provide redundant, non-critical information.</para>
	</sect2>

	<sect2 id="desktop-notification-appearance">
	<title>Icon Appearance</title>
	
		<itemizedlist><title>Guidelines</title>
		
			<remark>Need some examples here</remark>
			
			<listitem><para>Use table perspective for icons representing physical devices, for example a printer icon shown during printing, with the light source above and to the left of the represented object. See <xref linkend="icon_style_perspective"/> for more about table perspective.</para></listitem>
			
			<listitem><para>Use a flat, unshaded image for status monitors that take the form of a chart or graph, such as a CPU usage monitor.  Clearly delimit the borders of the chart area.</para></listitem>
			
			<listitem><para>Use shelf perspective, with overhead lighting, for all other icons. For example, an envelope shown when new mail arrives. See <xref linkend="icon_style_perspective"/> for more about shelf perspective.</para></listitem>
			
		</itemizedlist>

	</sect2>

	<sect2 id="desktop-notification-animation">
	<title>Icon Animation</title>
	
	<para>As with any part of the desktop, animation must be used sparingly to be effective, and redundantly to be accessible.</para>
	
	<itemizedlist><title>Guidelines</title>
		
		<listitem><para>To avoid distracting the user, do not update notification icons that are monitoring a background activity any more than once per second by default.  For any such icons that are perpetually shown, make the exact update frequency a user preference.</para></listitem>
		
		<listitem><para>Do not animate notification icons that are not monitoring the status of a background activity.</para></listitem>
		
		<!-- Methinks all situations where blinking might have been useful should be replaced by potentially-a11y-and-resource-friendlier libnotify balloons... have moved those potential guidelines down to that section, and reworded accordingly. CFB-->
		 		
		<listitem><para>Do not rely on animation, or any other change of appearance within a notification icon, as a means of alerting the user to a particular event.  <!-- commenting out until it exists...  -Seth The notification area respects the global desktop "no animation" preference for accessibility reasons. <remark>Note: This doesn&apos;t exist yet but it&apos;s on the list...</remark> --></para></listitem>
		</itemizedlist>

	</sect2>
	
	<sect2 id="desktop-notification-interaction">
	<title>Interaction</title>
		<para>All notification icons should respond to user interaction in a consistent way, similar to that for panel applets.</para>
		
		<itemizedlist><title>Guidelines</title>
  			<listitem><para>Perform the icon's default action when the user clicks the icon, or presses the <keysym>Space</keysym> key when it is focused.  In general, an icon's default action should be to open a relevant window or dialog box, or to raise and focus that window or dialog box if it is already open but not focused.  Examples of such windows and dialogs include:
			<itemizedlist>
     				<listitem><para>the printer queue window, for a &quot;printing in progress&quot; icon</para></listitem>
     				<listitem><para>the default mail application's Inbox window, for an incoming email icon</para></listitem>
     				<listitem><para>the message window, for an incoming instant message icon</para></listitem>
			</itemizedlist></para>
			<para>If the icon's associated window or dialog box is already raised and focused, close it when the user clicks the icon, or presses the <keysym>Space</keysym> key when the icon is focused.  All windows associated with notification icons should be dismissable in this way, except for explicit apply dialog boxes. Those should always be dismissed by clicking their action or cancel buttons.</para></listitem> 
  		
			<listitem><para>Present a context menu, containing at least the icon&apos;s default action, when the user right clicks the icon or presses <keycombo><keycap>Shift</keycap><keycap>F10</keycap></keycombo> when the icon is focused.</para></listitem>

		<listitem><para>If the icon&apos;s properties, or the properties of its associated application or document may be altered, include a <guimenuitem>Properties</guimenuitem> menu item in its context menu, and show its property panel in response to <keycombo><keycap>Alt</keycap><keycap>Enter</keycap></keycombo> when the icon is focused.</para></listitem>

		<!--<listitem><para>Follow normal tooltip conventions for notification icons.</para></listitem>  Kind of meaningless... -->
		</itemizedlist>
	</sect2>
	
	<sect2 id="desktop-notification-balloon">
	<title>Notification Balloons</title>
		<para><remark>FIXME: guidelines for appearance and interaction with libnotify-type balloons. All the guidelines shown here now are very early thoughts.</remark></para>
		
		<itemizedlist><title>Random Thoughts</title>
		
			<listitem><para><remark>If an icon has displayed a balloon that is no longer visible, subsequently mousing over the icon should perhaps cause the last message to appear as a tooltip?</remark></para></listitem>
			
			<listitem><para><remark>Need to think about notifications in the context of accessibility.  The notification spec allows for notifications to be shown in different ways, perhaps we need to do something different for users relying on screenreaders or desktop magnification?</remark></para></listitem>
			
			<listitem><para><remark>An icon may show a balloon to indicate an error in deference to showing an alert. For example, a printing-in-progress icon may show a balloon when there is a paper jam, but not when the printer is on fire - that should show an alert.</remark></para></listitem>
		
			<listitem><para><remark>A balloon may be show when the icon is first displayed, if the icon's appearance is not the direct result of a user action. For example, the icon for an incoming email or instant message may be accompanied by a balloon.  However, the appearance of a printing-in-progress icon would not be accompanied by a balloon, because its appearance was caused by the user choosing to print a document.</remark></para></listitem>

			<listitem><para><remark>An icon may show a balloon if it has previously shown a balloon, and the condition recurs. For example, an incoming email icon which has remained visible, and was originally accompanied by a transient balloon, may show another balloon when another message arrives.</remark></para></listitem>
		
		</itemizedlist>
	</sect2>
 </sect1>

</chapter>

