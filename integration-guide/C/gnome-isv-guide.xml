<?xml version="1.0"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
]>

<book id="index">
  <bookinfo>
    <title>Integrating existing software with GNOME</title>
    <subtitle>Guide for Independent Software Vendors</subtitle>

    <authorgroup>
      <author>
	<firstname>Federico</firstname>
	<surname>Mena-Quintero</surname>
	<affiliation>
	  <address>
	    <email>federico@gnu.org</email>
	  </address>
	</affiliation>
      </author>
    </authorgroup>

    <copyright>
      <year>2005</year>
      <holder>Federico Mena-Quintero</holder>
    </copyright>

    <revhistory>
      <revision>
	<revnumber>0.0</revnumber>
	<date>June 2005</date>
	<revdescription>
	  <para>
	    Initial version of this document.
	  </para>
	</revdescription>
      </revision>
    </revhistory>
  </bookinfo>

  <!-- FIXME!!! This document doesn't have a license yet.  I
  (Federico) would like to use the GFDL, but some people don't like
  that.  Is there a good license for documentation that we can use? -->

  <preface id="preface">
    <title>Preface</title>

    <para>
      GNOME is a project to build a complete desktop and development
      platform based entirely on free software.  Many companies,
      governments, schools, institutions, and individuals have
      deployed the GNOME desktop on their systems.  If you are a
      developer of third-party software ("Independent Software Vendor"
      or <acronym>ISV</acronym>), you may want to ensure that your
      existing software runs properly under GNOME.  This guide
      explains how to integrate existing software with GNOME, without
      actually rewriting that software to explicitly use the GNOME
      platform libraries and development tools.
    </para>

    <para>
      This guide will be useful in the following situations:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  You are a software developer or distributor who has an
	  application that is not explicitly designed to work with
	  GNOME, but you want to ensure that it runs comfortably
	  within a GNOME desktop.
	</para>
      </listitem>

      <listitem>
	<para>
	  You are a system administrator for an institution that has
	  deployed GNOME desktops to its users.  You also have legacy
	  or in-house applications, and you want your users of GNOME
	  to be able to access those applications comfortably.
	</para>
      </listitem>
    </itemizedlist>

    <para>
      In general, this guide is about integrating existing software
      into a GNOME desktop.  On the other hand, if you are considering
      writing new software, we encourage you to develop it completely
      with GNOME as your target platform; please refer to the <ulink
      url="http://developer.gnome.org">GNOME Developer's Site</ulink>
      for more information.
    </para>

    <para>
      One of the main concerns of GNOME is the user experience.  Users
      should have a comfortable computing environment:  this means
      having a complete desktop and a set of applications which
      operate together in a consistent way.  With relatively little
      work, applications which are not written explicitly with GNOME
      in mind can be made to run comfortably within a GNOME desktop.
    </para>

    <section id="structure">
      <title>Structure of this guide</title>

      <para>
	This guide is structured as a list of tasks that you need to
	perform to integrate existing software with GNOME.  The guide
	presents these tasks roughly in order of importance.  For
	example, the task of adding your application to the GNOME
	desktop's menus appears before the task for adding
	drag-and-drop support.  Also, this guide has an <link
	linkend="apx-integration-checklist">appendix with an
	integration checklist</link> to aid you in evaluating your
	integration work.
      </para>
    </section>

    <section id="standards">
      <title>Standards</title>

      <para>
	Many of the integration tasks in this guide rely on standards
	which are relevant to more than GNOME.  Other desktop projects
	like the <ulink url="http://www.kde.org">K Desktop
	Environment</ulink> also use these standards:  if you
	integrate your applications with GNOME, you should have to do
	little or no extra work to make them run in those other
	environments as well.
      </para>
    </section>
  </preface>

  <chapter id="basic-integration">
    <title>Basic Integration</title>

    <para>
      This chapter teaches you about the very basic steps you should
      take to integrate a program into the GNOME desktop.
    </para>
  </chapter>

  <chapter id="panel-menus">
    <title>Putting your application in the desktop menus</title>

    <para>
      To run applications from GNOME, users click on icons on their
      desktops or they select the applications which they want to run
      from a menu.  Therefore, the first step in integrating an
      existing program with GNOME is to
      <firstterm>register</firstterm> it with the set of applications
      that users can run.
    </para>

    <para>
      Unlike in Windows or MacOS, in GNOME the users menus are
      automatically constructed from the list of registered
      applications. Each published application specifies a set of
      categories to which it belongs, and the systems menu
      configuration sorts and arranges them. This mechanism follows
      the freedesktop.org desktop entry and menu standards.
    </para>

    <note>
      Though common in other desktops, creating your own
      application-specific submenu is not recommended. Instead,
      provide one menu item for each application you ship. Extra items
      such as help files, READMEs or links to your web site should be
      embedded into the application itself.
    </note>

    <para>
      To add a menu entry for your application, create
      a <firstterm>.desktop file</firstterm>. It should have a unique
      filename, and there are no length limits so avoid abbreviations
      and feel free to include brand names. However, don't put spaces
      or international characters in the file name. For instance,
      "foocorp-painter-pro.desktop" would be a good filename to
      choose but "fcpp.desktop" would be a bad name, as would
      "FooCorp Painter Pro.desktop". The file should be UTF-8
      encoded, and should resemble the following template:
    </para>

    <programlisting><![CDATA[
      [Desktop Entry]
      Encoding=UTF-8
      Name=FooCorp Painter Pro
      Exec=foocorp-painter-pro
      Icon=foocorp-painter-pro
      Type=Application
      Categories=Application;
    ]]></programlisting>

    <!-- MH: should we have a section on file names and naming? One of
         the more stupid parts of how UNIX works is the filing system
         heirarchy standard: it means every app must have a unique
         name and there is no widely accepted registry.
      -->

    <para>
      These .desktop files contain metadata about your application,
      and play a central role in integrating the program with the
      GNOME and other standards compliant desktops. The template
      presented here is the most basic possible. The file can be
      linguistically translated so your applications name can appear
      in the users native language.
    </para>
    
    <para>
      This file can be put into
      the <literal>/usr/share/applications</literal> directory, or for
      the users personal menu
      into <literal>~/.local/share/applications</literal>. Which is
      used should depend on whether your application is installed
      systemwide or into a users home directory. GNOME monitors these
      directories for changes, simply copying the file to the right
      location is enough to register it with the desktop.
    </para>

    <para>
      Note that the <literal>~/.local/share/applications</literal>
      location is not monitored by versions of GNOME prior to version
      2.10 or on Fedora Core Linux, prior to version 2.8. These
      versions of GNOME follow the now deprecated vfolder standard,
      and so .desktop files must be installed
      to <literal>~/.gnome2/vfolders/applications</literal>. This
      location is not supported by GNOME 2.8 on Fedora Core nor on
      upstream GNOME 2.10 so for maximum compatibility with deployed
      desktops, put the file in both locations.

      <!-- MH: Actually I think some distros merge the old vfolders
           directory in so placing items in both locations will cause
           duplicate menu entries. Autopackage seems to have a program
           called "vfolder-magic" which modifies the vfolder
           definition in the users home directory. The comment at the
           top says:

           *  Program that adds or removes a desktop entry in
           *  ~/.gnome2/vfolders/applications.vfolder-info. This seems to be
           *  necessary with gnome 2.8, at least.

        -->

      <!-- MH: Though this is a GNOME ISV guide, as so much of the
           basic integration work is also compatible with KDE it would
           be wise in my opinion to mention KDE and observe any quirks
           that are necessary to integrate correctly with that
           too. There's no real reason not to, ISVs want the maximum
           userbase possible (indeed, is this not what separates ISVs
           from your average open source project?).

           In this case, when installing menu entries for KDE you must
           run kbuildsycocoa to force a refresh of the menus.
        -->
    </para>
  </chapter>

  <chapter id="deeper-integration">
    <title>Deeper Integration with the Desktop</title>

    <para>
      FIXME: this chapter bla bla bla...
    </para>

    <section id="thumbnailer">
      <title>Installing a Thumbnailer Program</title>

      <para>
	The GNOME file manager, Nautilus, can display little
	thumbnails tailored for each file instead of generic icons in
	its file lists.  For example, a word processor document can be
	made to appear as a little version of the first page in the
	document.  This is useful because users can see a small
	representation of the visible data in their files, which may
	aid in recalling what file they are looking for.  You can make
	your application create these thumbnails with a few simple
	steps.
      </para>

      <!-- FIXME: screenshot of Nautilus showing thumbnails -->

      <para>
	A <firstterm>thumbnailer</firstterm> is a program with no user
	interface that takes a file and a pixel size as inputs, and it
	writes a thumbnail for that file.  GNOME determines which
	thumbnailer program to use based on the MIME type of the file
	for which a thumbnail is to be generated.  The mapping between
	MIME types and thumbnailer programs is stored as a series of
	GConf keys.
      </para>

      <para>
	For each MIME type which you want to handle, you have to
	create a pair of GConf keys:
      </para>

      <variablelist>
	<varlistentry>
	  <term><literal>/desktop/gnome/thumbnailers/<replaceable>application@x-foo</replaceable>/enable</literal></term>
	  <listitem>
	    <para>
	      Type: boolean.  Determines whether this thumbnailer will
	      be run.  You can enable or disable each individual
	      thumbnailer.  When you install a new thumbnailer, you
	      should of course make this key's value be
	      <symbol>true</symbol>.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>/desktop/gnome/thumbnailers/<replaceable>application@x-foo</replaceable>/command</literal></term>
	  <listitem>
	    <para>
	      Type: string.  The command which GNOME will use when it
	      needs to generate a thumbnail for a file of type
	      <replaceable>application@x-foo</replaceable>.  For
	      example, the value could be
	      "<literal>application-x-foo-thumbnailer %i %o
	      %s</literal>".  See below for an explanation of the
	      percent signs.
	    </para>
	  </listitem>
	</varlistentry>
      </variablelist>

      <para>
	That is, each MIME type requires two GConf keys
	(<literal>enable</literal> and <literal>command</literal>)
	under the same path.  The path name can be derived from the
	MIME type name by substituting a "<literal>/</literal>" with
	"<literal>@</literal>".  For example, a thumbnailer for
	<literal>image/x-my-format</literal> would need two keys:
	<literal>/desktop/gnome/thumbnailers/image@x-my-format/enable</literal>
	and
	<literal>/desktop/gnome/thumbnailers/image@x-my-format/command</literal>.
      </para>

      <para>
	Within the <literal>command</literal> key, GNOME will
	look for percent sequences and substitute them with actual values:
      </para>

      <informaltable frame="none">
	<tgroup cols="2">
	  <tbody valign="top">
	    <row>
	      <entry><literal>%i</literal></entry>
	      <entry>
		Input file name.  This is the file that your
		thumbnailer needs to read.
	      </entry>
	    </row>
	    <row>
	      <entry><literal>%u</literal></entry>
	      <entry>
		Input URI.  If your thumbnailer can handle URIs
		instead of plain file names, use <literal>%u</literal>
		instead of <literal>%i</literal>.
	      </entry>
	    </row>
	    <row>
	      <entry><literal>%o</literal></entry>
	      <entry>
		Output file name.  This is where your thumbnailer
		should write the thumbnail image in PNG format.
	      </entry>
	    </row>
	    <row>
	      <entry><literal>%s</literal></entry>
	      <entry>
		Size of the thumbnail as a single integer.  For
		example, if this gets substituted with
		<literal>128</literal>, it means that your thumbnailer
		should output an image no bigger than 128&times;128
		pixels.
	      </entry>
	    </row>
	  </tbody>
	</tgroup>
      </informaltable>

      <para>
	Either of <literal>%i</literal> and <literal>%u</literal> must
	appear in your command, and <literal>%o</literal> is also
	mandatory.  The <literal>%s</literal> substitution is
	optional, but we recommend that your thumbnailer pay attention
	to it.
      </para>

      <section>
	<title>Additional information</title>

	<para>
	  As an additional configuration parameter, you can turn on
	  the boolean key
	  <literal>/desktop/gnome/thumbnailers/disable_all</literal>
	  to disable the generation of all thumbnails.
	</para>
      </section>

      <!-- FIXME: we mentioned the GConf keys, but not how to set them
      globally.  Do we need to describe how to install
      schemas/defaults? -->
    </section>
  </chapter>

  <appendix id="apx-integration-checklist">
    <title>Integration Checklist</title>

    <para>
      This appendix provides a checklist of the various tasks
      presented through this guide.  You can use the checklist to
      ensure that your software is integrated into GNOME in at least
      the most basic ways, and also as a resource to plan for further
      integration work.
    </para>

    <orderedlist>
      <listitem>
	<para>
	  Does your application appear in the <link
	  linkend="panel-menus">GNOME panel's menus</link>?
	</para>
      </listitem>
      <listitem>
	<para>
	  Does your application have an icon for the panel menus or
	  the desktop? If so, does it have multiple pre-rendered sizes
	  and a scalable SVG version?
	</para>
      </listitem>
      <listitem>
	<para>
	  If your application can load or save files, does it register
	  the MIME types that it can handle?
	</para>
      </listitem>
      <listitem>
	<para>
	  Does your application provide MIME icons for the file
	  manager?
	</para>
      </listitem>
      <listitem>
	<para>
	  If your application creates "printable" documents, does it
	  install a thumbnailer for use by the file manager?
	</para>
      </listitem>
    </orderedlist>
  </appendix>

</book>
