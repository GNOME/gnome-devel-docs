<page xmlns="http://projectmallard.org/1.0/"
      type="topic"
      id="pattern-handling-errors">

  <info>
    
    <link type="guide" xref="patterns"/>
    <desc>XXX</desc>
    
    <revision pkgversion="3.0" version="0.1" date="2010-12-04" status="stub"/>
    <credit type="author">
      <name>Matthew Paul Thomas</name>
    </credit>
    <credit type="author">
      <name>GNOME Documentation Project</name>
      <email>gnome-doc-list@gnome.org</email>
    </credit>
    
  </info>

<title>Errors</title>

<quote>
 <p>Don’t ever make the same mistake twice, unless it pays.</p>
 <cite>Mae West</cite>
</quote>

<p>Errors show how crude your software is. Smart software accepts human errors, prevents them, allows undo, or - as a last resort - explains them in a way that lets us understand and fix them ourselves. The better your software is at doing these things, the more efficient and satisfied we will be when using it.</p>

<section>
 <title>Accepting errors</title>

 <p>The best way to handle input errors is, whenever possible, to <em>accept unambiguous input</em>. For example:</p>
 <list>
  <item>
  <p>In a field for a phone number, credit card number, or similar, don’t complain about characters like spaces, dashes, or brackets. Instead, just accept these characters, and ignore them internally when using the data.</p>
  <p>Further reading: Steve Friedl, <link href="http://unixwiz.net/ndos-shame.html">"No dashes or spaces" hall of shame</link>.</p>
  </item>
  <item>
  <p>In a field for naming something new, where some characters are prohibited, consider automatically replacing them with equivalent allowed characters. For example, if spaces are not allowed when registering a new login name, the field might replace spaces with dashes as they are typed.</p>
  </item>
  <item>
  <p>If compulsory data is missing from a customer record or similar item, consider accepting the record provisionally, but reminding us to complete it later.</p>
  </item>
 </list>
</section>

<section>
 <title>Preventing errors</title>
 
 <p>The next best way to handle errors is to <em>prevent errors from happening</em>.</p>
 
 <p>If people often trigger a particular command accidentally, make it more difficult to trigger. A confirmation alert is the least polite way of doing this. One example of a better method is changing a keyboard equivalent to require two keys instead of one (or three keys instead of two). Another example is physically separating dangerous commands from more common ones — in a menu using separators or submenus, and elsewhere using spacing or an expandable section. [right: something]</p>

 <p>Use the appropriate control for the task, and give it a reasonable default value. For example, if a setting has only a few useful values, consider radio buttons or an option menu instead of a text field. And if asking for a date or time, use a datepicker or timepicker rather than a text field. [wrong: text field used for date, with format caption] [right: datepicker]</p>

 <p>If a button, menu item, or other control can’t be used successfully right now, don’t show an error when it is invoked. Instead, make the control insensitive. Usually, it’s obvious why a control is insensitive. If it isn’t:</p>
 <list>
  <item>
  <p>If there is available space, include a caption giving the reason. [right: “Not connected to the Internet.” next to insensitive “Sign In”]</p>
  </item>
  <item>
  <p>As a last resort, add a temporary tooltip for the control (or extend the existing tooltip for a toolbar button) explaining that it is "Not available because" or "Not available until" something. For example: "Sorts cells alphabetically. Not available until you select some cells."</p>
  </item>
  <item>
   <p>Further reading: Lukas Mathis, <link href="http://ignorethecode.net/blog/2008/07/01/disabling-inactive-menu-items/">"Disabling inactive menu items"</link>.</p>
   <note>
    <p>On other platforms, insensitive menu items sometimes change their wording when insensitive - for example, <gui>Can't Undo Partitioning</gui> or <gui>Nothing to Redo</gui>. Don’t do this in Gnome software; it may disorient people who were looking for the original item wording.</p>
   </note>
  </item>
 </list>

<p>If a field has a minimum or maximum length or value, don't let me submit a value with a length outside that range.</p>

<p>Consider including an error caption or similar element next to the field, describing whether the value is too short or too long. (For example, microblogging clients often feature a count showing the number of possible characters left, and this number becomes negative when there are too many characters.)</p>

<p>Don't ignore excess characters as they are typed, because the characters I will want to remove aren't necessarily the last ones I typed. Instead, highlight excess characters with the theme's error color, so that I can see how many I need to remove before submission.</p>

 <p>Before saving or copying files, check that the device is writable and has enough free space.</p>

 <p>Before doing anything requiring an Internet connection, check that there is one.</p>

 <p>If a dialog opened automatically to perform a particular task, close the dialog automatically if the task has since been performed a different way, or otherwise rendered irrelevant.</p>

 <p>Occasionally, your desire to prevent errors may conflict with our efficiency. Don’t go overboard.</p>

 <p>Further reading: Janko Jovanovic, <link href="http://www.jankoatwarpspeed.com/post/2010/05/10/Poka-Yoke-in-UI-design.aspx">"Poka-Yoke in UI design"</link></p>

 <p>Heuristic tagging: Use the <code>ux-error-prevention</code> tag in bug reports about preventable errors.</p>
</section>

<section>
 <title>Allowing undo</title>
</section>

<section>
 <title>Presenting errors</title>

 <p>If you cannot correct or prevent an error, you will need to explain it. Make clear, near to the error in space in time, what went wrong, why it went wrong, and what we should do next.</p>

 <section>
  <title>Near in space and time</title>
  
  <p>Describe an error as close as possible to the place where it occurred, and as soon as possible after it occurred, without being distracting.</p>
  
  <p>If one item in a list has a non-urgent error condition, show an error icon at the trailing end of that item, where activating the icon displays more information and troubleshooting options.</p>
  
  <p>Similarly, if one field in a form is incorrect once it loses focus, highlight that field with the error background color, and describe the error next to the field. (Occasionally, it may be helpful to do the opposite, using a success icon to confirm valid values for difficult fields.) Further reading: Luke Wroblewski, <link href="http://www.alistapart.com/articles/inline-validation-in-web-forms/">"Inline validation in Web forms"</link></p>
  
  <p>If you cannot know which of a dialog’s fields are incorrect - for example, in a login dialog where the login name and/or the password are incorrect - consider keeping the dialog open, but changing its primary text to describe the error.</p>
  
  <p>As a last resort, use a separate error alert.</p>
 </section>
 
 <section>
  <title>What went wrong</title>
  
  <p>If the error is in the software or hardware itself, be apologetic, because you have let us down. Even if the error is in the hardware, say sorry - though it's not your fault - because many of us do not distinguish between software and hardware.</p>
  
 </section>

 <section>
  <title>Why it went wrong</title>
 </section>

 <section>
  <title>What we should do next</title>
  <terms>
   <item>
    <title>Bad example</title>
    <p><gui>Print error: Out of paper. (( OK ))</gui></p>
   </item>
   <item>
    <title>Good example</title>
    <p><gui>The printer "Printasonic 4850" is out of paper. Only 4 of 7 pages in "Gaming roster" have printed. ( Stop ) (( Resume ))</gui></p>
   </item>
  </terms>
 <p>Further reading: David Travis, <link href="">"Communicating errors"</link></p>
 </section>
 
</section>

</page>
