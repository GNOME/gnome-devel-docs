<page xmlns="http://projectmallard.org/1.0/"
      type="topic"
      id="dialogs">

  <info>
    <link type="guide" xref="patterns" group="dialogs"/>   
    <revision pkgversion="3.0" version="0.1" date="2010-12-04"/>
    <credit type="author">
      <name>GNOME Documentation Project</name>
      <email>gnome-doc-list@gnome.org</email>
    </credit>
    
  </info>

<title>Dialogs</title>

<p>Dialogs are secondary windows that appear over a primary, parent window. They are used to present additional information or controls, including preferences, properties, or to present messages or questions.</p>

<p>Dialogs are a commonly recognized design pattern, and there are established conventions for the different types of dialogs that you might want to use.</p>

<p>While dialogs can be an effective way to disclose additional controls or information, they can also be a source of interruption for the user. For this reason, always question whether a dialog is necessary, and work to avoid the situations in which they are required.</p>

<p>GNOME 3 provides a number of stock dialogs that you can be used, such as for printing or color selection.</p>

<p>There are three basic types of dialog in GNOME 3.</p>

<section id="message-dialogs">
<title>Message Dialogs</title>

<media type="image" mime="image/png" src="figures/message-dialog.png"/>

<p>Message dialogs are the simplest type of dialog. They present a message or question, along with 1-3 buttons with which to respond. They are always modal, meaning that they prevent access to their parent window. They are an appropriate choice when it is essential that the user sees and responds to a message.</p>

<section id="message-dialog-examples">
<title>Examples</title>

<p>Confirmation dialogs use a message dialog to check - or confirm - that the user wants to carry out an action. They have two buttons: one to confirm that the action should be carried out and one to cancel the action.</p>

<note><p>Confirmation dialogs will often be accidentally or automatically acknowledged, and will not always prevent mistakes from happening. It is often better to provide undo functionality instead.</p></note>

<p>Error dialogs simply present an error message to the user. They often include a single button that allows the user to acknowledge and close the dialog.</p>

<note><p>Error dialogs should generally be a last resort. You should design your application so that errors do not occur, and to automatically recover if something does go wrong.</p></note>

</section>
</section>

<section id="action-dialogs">
<title>Action Dialogs</title>

<media type="image" mime="image/png" src="figures/action-dialog.png"/>

<p>Action dialogs present options and information about a specific action before it is carried out. They have a heading (which typically describes the action) and two buttons which allow the action to be carried out or cancelled.</p>

<p>The user may be required to choose options or content items before an action can be carried out. In these cases, the affirmative action button should be insensitive before the required steps have been performed in the dialog itself.</p>

<section id="action-dialog-examples">
<title>Examples</title>

<p>Many of the stock GNOME 3 dialogs are action dialogs. The print dialog is a good example: it is displayed in response to the user using the print action, and presents information and options for that print action. The two header bar buttons allow the print action to either be cancelled or carried out.</p>

</section>
</section>

<section id="presentation-dialogs">
<title>Presentation Dialogs</title>

<media type="image" mime="image/png" src="figures/presentation-dialog.png"/>

<p>Presentation dialogs present information or controls. Like action dialogs, they have a header bar and a subject. However, instead of prefixing an action, their content relates to an application or content item.</p>

<section id="presentation-dialog-examples">
<title>Examples</title>

<p>Preferences and Properties are both examples of presentation dialogs, and both present information and settings in relation to a specific entity (either an application or a content item). Properties dialogs are a good example of how dialogs can be used to disclose additional information which is not always needed in the main application window.</p>

<note><p>Resist the temptation to provide a preference window for your application. Always question whether additional settings are really necessary. Most people will not bother to investigate the preferences that you provide, and configuration options will contribute to the complexity of your application. Make an effort to ensure that your application design works for everybody without the need to change its settings.</p></note>

</section>

<section id="instant-and-explicit-apply">
<title>Instant and Explicit Apply</title>

<p>Presentation dialogs are either instant or explicit apply. In instant apply dialogs, changes to settings or values are immediately updated. In contrast, explicit apply dialogs include a button for applying changes.</p>

<p>Instant apply should be used wherever possible. Instant apply presentation dialogs have a close button in their header bar.</p>

<p>Explicit apply is only necessary if changes in the dialog have to be applied simultaneously in order to have the desired behaviour. Explicit apply dialogs include a Cancel and a Done button (Cancel resets all values in the dialog to the state before it was opened and Done applies all changes and closes the window).</p>

</section>
</section>

<section id="general-guidelines">
<title>General Guidelines</title>

<list>
<item><p>Dialog windows should never pop up unexpectedly, and should only ever be displayed in immediate response to a deliberate user action.</p></item>
<item><p>Dialogs should always have a parent window.</p></item>
<item><p>Follow the layout guidelines when designing the content of windows.</p></item>
<item><p>You can use view switchers in dialogs to break up controls and information.</p></item>
<item><p>Avoid stacking dialog windows on top of one another. Only one dialog window should be displayed at a time.</p></item>
<item><p>When an affirmative button is included, label it with its actual action. Print is a better label thanOK or Done, for example.</p></item>
<item><p>When opening a dialog, provide initial keyboard focus to the component that you expect users to operate first.</p></item>
</list>

</section>

</page>
