<page xmlns="http://projectmallard.org/1.0/"
      type="topic"
      id="pattern-configuration">

  <info>
    
    <link type="guide" xref="patterns"/>
    <desc>XXX</desc>
    
    <revision pkgversion="3.0" version="0.1" date="2010-12-04" status="stub"/>
    <credit type="author">
      <name>Allan Day</name>
    </credit>
    <credit type="author">
      <name>GNOME Documentation Project</name>
      <email>gnome-doc-list@gnome.org</email>
    </credit>
    
  </info>

<title>Configuration</title>

<p>Configuration allows users to modify the behaviour and appearance of their software.</p>

<!-- Tags: settings, preferences, customisation, menus, assistants -->

<section>
 <title>When to Use</title>

 <quote>
  <p>Using preferences as a band-aid is the root of much UI evil.</p>
  <cite>Havoc Pennington</cite>
 </quote>
 
 <p>As far as possible, applications should be designed in order to not require manual configuration. Generally, a well-designed interface does not require configuration and will operate effectively with no modification of preferences for both different use cases and users. That said, configuration options can be presented for a number of different reasons:</p>

 <list>
  <item>
  <p>Essential settings, e.g. email account details.</p>
  <p>Some applications require user configuration in order to operate. This may require configuration options to be presented when an application is first run.</p>
  </item>
  <item>
  <p>Personalisation, e.g. wallpaper.</p>
  <p>This kind of configuration allows users to develop a personal relationship with their systems and can also be used to make a UI interface fun to use. This kind of configuration should be used extremely sparingly, if at all.</p>
  </item>
  <item>
  <p>To cater for different user groups and varieties of usage.</p>
  <p>This reason for adding configuration options should be treated with caution - ideally, software should work for virtually all kinds of users without the need for configuration. Nevertheless, this kind of configuration may sometimes be unavoidable.</p>
  </item>
 </list>
</section>

<section>
 <title>Description</title>
 <p>Configuration options can be provided via a number of kinds of interface components:</p>
 <terms>
  <item>
   <title>Menu items</title>
   <p>Menus can contain check boxes and radio buttons for configuration options.</p>
  </item>
  <item>
   <title>Toolbars</title>
   <p>Configuration options can be provided via toggle buttons and combo boxes in toolbars.</p>
  </item>
  <item>
   <title>Preferences windows</title>
   <p>...</p>
  </item>
  <item>
   <title>Configuration tools</title>
   <p>e.g. toolbar editors</p>
  </item>
  <item>
   <title>Assistants</title>
   <p>See Assistants.</p>
  </item>
 </terms>
</section>

<section>
 <title>Guidelines</title>
 <list>
  <item>
  <p>Configuration should be done automatically wherever possible.</p>
  </item>
  <item>
  <p>Configuration options should be kept to a minimum: the more options that are added, the more likely it will be for a user to ignore them.</p>
  </item>
  <item>
  <p>It is vital to provide a good set of default options which work for the vast majority of use cases.</p>
  </item>
  <item>
  <p>Preferences should be saved between sessions.</p>
  </item>
 </list>

 <section>
  <title>Preferences Windows</title>
  <p>It is not always necessary to provide a preference window, and they should be avoided if possible. Only use one when the number of necessary configuration options cannot be contained within other interface elements.</p>
  <p>Preferences windows should be accessed through the <gui>Preferences</gui> entry in the <gui>Edit</gui> menu, should one be provided.</p>
  <p>Only configuration options which are infrequently changed should be contained within a preferences window.</p>
  <p>Options should be grouped into sections and/or tabs in order to make the interface easy to understand. These groups should be organized by topic rather than level of ability or frequency of use. <gui>Advanced</gui>, <gui>Options</gui> and <gui>General</gui> are common group and tab labels which are uninformative and should be avoided.</p>
  <p>Where possible, the most commonly used options should be displayed towards the top of the window and in the first tab.</p>
  <p>Avoid nested tabs like the plague.</p>
 </section>
 
 <section>
  <title>Instant Apply</title>
  <p>Update values or settings immediately to reflect the changes made in the window. This is known as <em>instant apply</em>. Do not make the user press an <gui>OK</gui> or <gui>Apply</gui> button to make the changes happen unless either:</p>
  <list>
   <item>
   <p>the change will take more than about one second to apply, in which case applying the change immediately could make the system feel slow or unresponsive, or</p>
   </item>
   <item>
   <p>the changes in the window have to be applied simultaneously to prevent the system entering a potentially unstable state. For example, the hostname and proxy fields in a network properties window.</p>
   </item>
  </list>
  
  <p>If either of these conditions affect only a few of the controls in your window, arrange those controls together into one or more groups, each with its own <gui>Apply</gui> button. Leave the rest of the controls as instant apply.</p>

  <list>
   <item>
   <p>Do not attempt to validate or apply changes caused by editing a text field control until the user has moved focus to a different control in the window, or the window is closed. Validating after each keypress is usually annoying and unnecessary.</p>
   <p>Exception: if the field accepts only a fixed number of characters, such as a hexadecimal color code, validate and apply the change as soon as that number of characters have been entered.</p>
   </item>
   <item>
   <p>When the user moves focus to a different control, do not indicate an invalid entry by displaying an alert or undoing the change the user made. Both of these methods are particularly disruptive for focus-follows-mouse users, for whom focus may leave the control more often than it does for a click-to-focus user.</p>
   </item>
  </list>
 </section>
 
 <section>
  <title>Explicit Apply</title>

  <p>If most of the controls in your window are not suitable for instant apply, consider making the whole window <em>explicit apply</em>. An explicit apply window has these three buttons in its button box, plus an optional <gui>Help</gui> button:</p>
  
  <terms>
   <item>
   <title>Apply</title>
   <p>Applies all the settings in the window, but does not close the window in case the user wishes to change their mind.</p>
   </item>
   <item>
   <title>Cancel</title>
   <p>Resets all settings in the window to those that were in force when the window was opened.</p>
   <p>Note: this must undo the effects of all applications of the <gui>Apply</gui> since the window was opened, not just the most recent one.</p>
   </item>
   <item>
   <title>OK</title>
   <p>Applies all settings in the window and closes the window.</p>
   </item>
  </terms>
 </section>
 
</section>

<section>
 <title>Current Usage</title>
 <p>Evince provides an excellent example of minimal configuration options.</p>
</section>

</page>
