<?xml version="1.0" encoding="UTF-8"?>
<chapter id="windows">
  <title>Windows</title>
  <sect1 id="window-properties">
    <title>Parts of Windows and System Interaction</title>
    <sect2 id="window-props-titles">
      <title>Titles</title>

       <figure>
	<title>Example of a window title</title>
	<mediaobject><imageobject>
	    <imagedata fileref="images/window-title.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase>Screenshot showing a window title bar with title "blah.abw Properties"</phrase>
	  </textobject>
	</mediaobject>
      </figure>

      <para>Give every window a title (with the exception of <link linkend="alert-windows">alerts</link> and <link linkend="toolbox-windows">toolboxes</link>). A good window title contains information that is relevant to the user, and distinguishes a particular window from other open windows. Omit information that does not assist in this selection, for example the application's version number or vendor name.</para>
      <para>See the description of each particular window type for title formats.</para>
    </sect2>
    <sect2 id="window-props-borders">
      <title>Borders and Window Commands</title>
      <para>Most windows have borders, except certain shaped windows and some torn-off windows. Do not attempt to draw your own window borders, but instead provide hints to the window manager for the desired border type.</para>

      <para>Different window commands are appropriate to different types of window. See the description of each particular window type for a list of appropriate window commands. These are the possible window commands:</para>
      <itemizedlist>
	<listitem><formalpara><title>Close</title><para>closes the window. <emphasis>Always</emphasis> draw this as a button on the window border</para></formalpara></listitem>
	<listitem><formalpara><title>Maximize</title><para>causes the window to use all unused screen space</para></formalpara></listitem>
	<listitem><formalpara><title>Minimize</title><para>causes the window to be temporarily hidden</para></formalpara></listitem>
	<listitem><formalpara><title>Roll-up/Unroll</title><para>shows only the title bar of the window, as if it has been "rolled up"</para></formalpara></listitem>
      </itemizedlist>

    </sect2>
    <sect2 id="window-props-modality">
      <title>Modality</title>
      <!-- Change this to a discussion of non-modal, application modal, and system modal windows. -->

	<para>A non-modal window does not restrict the user's interaction with other open windows on the desktop in any way.  Using non-modal windows gives the user maximum flexibility to perform tasks within your application in any order and by whichever means they choose.</para>

      <para>A modal window, while it is open, prevents the user from interacting with other windows in the same application (application modal), or in all applications, including the desktop itself (system modal).  These are used when allowing the user to interact with other windows before the information or task in the modal window has been read or completed could cause data loss or some other serious problem.</para>

	<itemizedlist><title>Guidelines</title>

		<listitem><para>Use an application modal window only if allowing interaction with other parts of the application while the window is open could cause data loss or some other serious problem.  Provide a clear way of leaving the modal window, such as a <guibutton>Cancel</guibutton> button in a dialog, or a close button in the window title bar.</para></listitem>

		<listitem><para>Do not use system modal windows.</para></listitem>

	</itemizedlist>

    </sect2>

    <sect2 id="window-props-focus">
      <title>Focus</title>
      <para>Focus is the means by which the user designates which window should receive data from the keyboard, mouse or other input device. If using a screen reader or similar assistive technology, focus may also designate the window that the user wants to receive information about. The focused window is considered the window the user is currently "working with".</para>

	<para>Ensure your application functions properly with the three different mechanisms by which windows can receive focus in GNOME:</para>

	<itemizedlist>
		<listitem><para>Click-to-focus, where the user must click in a window to give it focus</para></listitem>

		<listitem><para>Point-to-focus, where a window is focused by moving the mouse pointer into it</para></listitem>
		<listitem><para>Keyboard focus, where a window is focused by using a keyboard shortcut such as <keycombo><keycap>Alt</keycap><keycap>Tab</keycap></keycombo></para></listitem>

	</itemizedlist>

	<note><title>Special restrictions for point to focus</title><para>Note that point-to-focus places a number of restrictions on GNOME applications that are not present in environments such as MacOS or Windows. For example, utility windows shared between multiple document windows, such as the toolbox in the GIMP Image Editor, cannot be context-sensitive.  That is, they cannot directly initiate an action such as <guibutton>Save</guibutton> on a particular document window.  In the act of moving the mouse from the currently focused document to the utility window, the user could inadvertantly pass the pointer over another document window, thus changing the focus.</para></note>

    </sect2>
  </sect1>
 <sect1 id="primary-windows">
  <title>Primary Windows</title>

	<figure>
	<title>A typical primary window (gedit)</title>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="images/primary-window.png" format="PNG"/>
	  </imageobject>
	  <textobject>
		<phrase>A typical primary window: the gedit document view</phrase>
	  </textobject>
	</mediaobject>
      </figure>

    <para>A primary window usually presents a view of the user's data, such as a text document in a word processor application, an image in a drawing program, or calculations in a calculator or spreadsheet application.  It may also be a view of something more abstract, like a game.   An application may have in any instance more than one primary window and more than one kind of primary window.</para>

    <para>A primary application window normally has a border, a menubar and a statusbar, and may also contain one or more toolbars.</para>

    <sect2 id="primary-window-titles">
      <title>Title</title>
        <para>For document-based applications, use <replaceable>Document Name</replaceable> as the window title.</para>

	<example>
		<title>Using document names as window titles</title>
		<informaltable frame='all'>
			
			<tgroup cols='2' align='left'>
			  <thead>
				<row>
		      			<entry>Application</entry>
				      <entry>Example window title</entry>
	   			</row>
			  </thead>
			<tbody>
	     			<row>
					<entry>AbiWord</entry>
					<entry>My Report.abw</entry>
				</row>
				<row>
					<entry>Evolution</entry>
					<entry>Inbox</entry>
				</row>
				<row>
					<entry>Music player</entry>
					<entry>U2 - Better Than the Real Thing</entry>
				</row>

	  		</tbody>
         	</tgroup>
		</informaltable>
        	</example>	 

      <para>While document names are most pertinent to users, we understand that application developers may want to increase recognition of their application. If you plan to include your application's name in the title of a primary window, use the following format: <replaceable>Document Name</replaceable> - <replaceable>Application Name</replaceable>. This will ensure that the document name appears in limited space situations such as the system window list. Please note that including the application name is <emphasis role="bold">not</emphasis> recommended, however.</para>

	<para> For other types of application, use <replaceable>Application Name</replaceable> as the window title.</para>

	<example>
		<title>Using application names as window titles</title>
		<informaltable frame='all'>
			
			<tgroup cols='2' align='left'>
			  <thead>
				<row>
		      			<entry>Application</entry>
				      <entry>Window title</entry>
	   			</row>
			  </thead>
			<tbody>
	     			<row>
					<entry>Dictionary</entry>
					<entry>Dictionary</entry>
				</row>
				<row>
					<entry>Calculator</entry>
					<entry>Calculator</entry>
				</row>
	  		</tbody>
         	</tgroup>
		</informaltable>
        	</example>	 

      <para><emphasis role="bold">Do not</emphasis> place version numbers, company names, or other information that is of no immediate use to the user in the window title. These consume space, making titles in limited spaces such as the system window list less useful, and add more text the user has to scan to find useful information. In a "beta" product, where version numbers are critical for bug information, placing version numbers can be useful, but remove them from stable releases.  Place version information in the about box instead.</para>
    </sect2>
    <sect2 id="primary-window-commands">
      <title>Window Commands</title>
      <para>Close, Maximize/Restore, Minimize, Roll-up/Unroll</para>
    </sect2>

    <sect2 id="document-interface-types">
      <title>Relation between Documents and Windows</title>
      <sect3 id="sdi">
	<title>Single Document Interface (SDI)</title>

	<figure>
	<title>A typical SDI application (Eye of GNOME)</title>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="images/sdi.png" format="PNG"/>
	  </imageobject>
	  <textobject>
		<phrase>A typical SDI application: Eye of GNOME being used to inspect an icon</phrase>
	  </textobject>
	</mediaobject>
      </figure>

	<para>A single document interface places each document in its own primary window. Toolboxes and other utility windows may be shared between multiple SDI documents, but closing them should have no effect on the document windows. Use SDI for your GNOME application unless there is a compelling reason not to.</para>
      </sect3>

      <sect3 id="csdi">
	<title>Controlled Single Document Interface (CSDI)</title>

	<figure>
	<title>A typical controlled SDI application (The GIMP)</title>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="images/csdi.png" format="PNG"/>
	  </imageobject>
	  <textobject>
		<phrase>Screenshot of The GIMP image editor with six images open for editing</phrase>
	  </textobject>
	</mediaobject>
      </figure>

	<para>CSDI is reserved for applications where the extra overhead of a toolbar or menu per primary window is considered unacceptable. This is rarely the case, as most documents require enough display space that the toolbar and menu add relatively little overhead. The primary exception to this is an application that must handle large numbers of small images well. Complex drawing applications, such as the GIMP, currently present this kind of interface. The main toolbox of the GIMP is the control window.</para>
      </sect3>

      <sect3 id="mdi">
	<title>Multiple Document Interface (MDI)</title>
	<figure>
	<title>A typical MDI application (gedit) showing three open documents on tabbed pages</title>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="images/mdi.png" format="PNG"/>
	  </imageobject>
	  <textobject>
		<phrase>A typical MDI application: gedit with three open documents in the same window</phrase>
	  </textobject>
	</mediaobject>
      </figure>

	<para>A paned or tabbed presentation of two documents<!--, or two views of the same document--> within a single window is a multiple document interface. MDI has several inherent usability problems, so its use is not encouraged in new GNOME applications.  Either open each document in a new primary window, with its own menubar, toolbars etc., or allow multiple instances of your application to be run simultaneously.  In either case, this leaves it for the window manager (acting on the user's preferences) rather than your application to decide if and how to group and present document windows from the same application.</para>
      </sect3>
    </sect2>
  </sect1>

  
  <sect1 id="utility-windows">
    <title>Utility Windows</title>
    <para>Utility windows, such as palettes and toolboxes, normally have borders. They do not contain a menu bar, a toolbar, or a statusbar.</para>

	<sect2 id="instant-apply">
	<title>Instant apply and explicit apply</title>
	<para>For windows that allow the user to change values or settings, such as property and preference windows, update those values or settings immediately to reflect the changes made in the window.  This is known as &quot;instant apply&quot;.  Do not make the user press an <guibutton>OK</guibutton> or <guibutton>Apply</guibutton> button to make the changes happen, unless either:</para>

	<itemizedlist>
		<listitem><para>the change will take more than about one second to apply, in which case applying the change immediately could make the system feel slow or unresponsive, or</para></listitem>
		<listitem><para>the changes in the window have to be applied simultaneously to prevent the system entering a potentially unstable state. For example, the hostname and proxy fields in a network properties window.</para></listitem>

	</itemizedlist>

	<para>If either these conditions apply to only a few of the controls in your window, arrange those controls together into one or more groups, each with its own <guibutton>Apply</guibutton> button.  Leave the rest of the controls as instant apply.</para>

	<remark>FIXME: screenshot of such a window here</remark>

	<note><title>Applying changes in text fields</title>
	<para>Do not attempt to validate or apply changes caused by editing a text field control until the user has moved focus to a different control in the window.  Validating after each keypress is usually annoying and unnecessary.</para></note>

	<para>If most of the controls in your window cannot be made instant apply, it may be easier to make the whole window &quot;explicit apply&quot;.   An explicit apply window has three buttons in its button box, plus an optional <guibutton>Help</guibutton> button:</para>

	<itemizedlist>
		<listitem><formalpara><title>Try</title>Applies all the settings in the window, but does not close the window in case the user wishes to change their mind.</formalpara></listitem>
		<listitem><formalpara><title>Cancel</title>Resets all settings in the window to those that were in force when the window was opened.  Note:  this must undo the effects of all applications of the <guibutton>Try</guibutton> since the window was opened, not just the most recent one.</formalpara></listitem>
		<listitem><formalpara><title>OK</title>Applies all settings in the window, and closes the window.</formalpara></listitem>
	</itemizedlist>

	<figure id="explicit-apply-figure">
	<title>Buttons in an explicit apply window</title>
	<mediaobject><imageobject>
	    <imagedata fileref="images/explicit-apply.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase>Screenshot showing correct positions for Help, Try, Cancel and OK buttons in a dialog</phrase>
	  </textobject>
	</mediaobject>
      </figure>

	<remark>FIXME: better example of such a window here</remark>

	</sect2>

	<sect2 id="default-buttons">
	<title>Default Buttons</title>
	<para>When designing a dialog or utility window, you can assign the <keycap>Return</keycap> key to activate a particular button in the window.  GNOME indicates this button to the user by drawing a different border around it.  For example, the <guibutton>OK</guibutton> button in <xref linkend="explicit-apply-figure"/>.</para>

	<para>Choose the default button to be the most likely action, such as a confirmation action or an action that applies changes in a utility window.  Do not make a button the default if its action is irreversible, destructive or otherwise inconvenient to the user.  If there is no appropriate button in your window, to designate as the default button, do not set one.</para>

	<para>In particular, it is currently <emphasis>not</emphasis> recommended to make the <guibutton>Close</guibutton> button the default in an <link linkend="instant-apply">instant apply</link> window, as this can lead to users closing the window accidentally before they have finished using it.</para>

	</sect2>

    <sect2 id="property-windows">
      <title>Property Windows</title>

      <figure>
	<title>Example of a property window</title>
	<mediaobject><imageobject>
	    <imagedata fileref="images/property-window.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase>Screenshot showing the "file properties" window from Nautilus</phrase>
	  </textobject>
	</mediaobject>
      </figure>

      <para>Property windows allow the user to view and change the characteristics of an object such as a document, file, drawing, or application launcher.</para>

      <formalpara>
	<title>Title Format:</title>
	<para><replaceable>Object Name</replaceable> Properties</para>
      </formalpara>
      <formalpara>
	<title>Window Commands:</title>
	<para>Close, Minimize, Roll-up/Unroll</para>
      </formalpara>
      <formalpara>
	<title>Buttons:</title>
	<para>Place a <guibutton>Close</guibutton> button in the lower right corner.</para>
      </formalpara>

    </sect2>

    <sect2 id="preference-windows">
      <title>Preferences Windows</title>

      <figure>
	<title>Example of a preferences window</title>
	<mediaobject><imageobject>
	    <imagedata fileref="images/preferences-window.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase>Screenshot showing the Gnibbles preferences window</phrase>
	  </textobject>
	</mediaobject>
      </figure>

      <para>Preferences windows allow the user to change the way an application looks or behaves.</para>
      <formalpara>
	<title>Title Format:</title>
	<para><replaceable>Application Name</replaceable> Preferences</para>
      </formalpara>
      <formalpara>
	<title>Window Commands:</title>
	<para>Close, Minimize, Roll-up/Unroll</para>
      </formalpara>
      <formalpara>
	<title>Buttons:</title>
	<para>Place a <guibutton>Close</guibutton> button in the lower right corner.</para>
      </formalpara>

    </sect2>

    <sect2 id="toolbox-windows">
      <title>Toolboxes</title>

	<figure id="toolbox-figure">
	  <title>A large toolbox broken into categories</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/toolbox.png" format="PNG"/>
	    </imageobject>
	    <textobject>
	      <phrase></phrase>
	    </textobject>
	  </mediaobject>
	</figure>

      <para>A toolbox provides convenient access to a set of actions and toggles through a set of small toolbar-like buttons. Toolboxes can be used to provide a specialized group of tools to augment a toolbar containing more universal items such as <guibutton>Save</guibutton> and <guibutton>open</guibutton>. A single toolbox can be shared between multiple documents to save screen space.</para>
      <formalpara>
	<title>Title Format:</title>
	<para>Toolboxes have no title</para>
	<remark><para>How then does a screenreader user differentiate between toolboxes? --Calum.</para></remark>
	<remark><para>ATK hints? How does Windows do this (or does it) ? There's not room for a title bar. Maybe we can have apps set the title bar but teach the WM to not draw it or something. In any case, for sighted users there's not even *room* for a titlebar in a toolbox. -Seth</para></remark>
      </formalpara>
      <formalpara>
	<title>Window Commands:</title>
	<para>Close, Roll-up/Unroll</para>
      </formalpara>
      <formalpara>
	<title>Buttons:</title>
	<para>Toolboxes have no buttons</para>
      </formalpara>
      <formalpara>
	<title>Resizing:</title>
	<para>Make toolboxes resizable, but only resize by discrete toolbox item widths. In other words, the user can resize the toolbox to be one item wide, two items wide, three items wide, etc. but not one and a half items wide.</para>
      </formalpara>

      <itemizedlist>
	<title>Guidelines</title>
	<listitem><para>Only place buttons in a toolbox that do not open another window.</para></listitem>
	<listitem><para>Prefer modal toggle buttons that affect the operation of the mouse on the document, such as a set of buttons for choosing between paintbrush, eraser, and fill modes in a drawing application.  Buttons that initiate actions upon clicking (such as a save button) are better placed in toolbars.</para></listitem>
	<listitem><para>Ensure that closing a toolbox does not close or otherwise alter any primary window with which it is associated, unless using <link linkend="csdi">CSDI</link>.</para></listitem>
	<listitem><para>Do not place toolboxes in the system window list, unless using <link linkend="csdi">CSDI</link>. Consequently, toolboxes should always remain above all primary windows with which they are associated.</para></listitem>
	<listitem><para>If all primary windows associated with a toolbox are closed or minimized, hide the toolbox as well. Show the toolbox again when one of the primary windows is opened or restored.</para></listitem>
	<listitem><para>Make a toolbox two items wide by default, unless it is broken into <link linkend="toolbox_windows_categories">categories</link>. Make categorized toolboxes four items wide by default.</para></listitem>
      </itemizedlist>

      <sect3 id="toolbox_windows_categories">
	<title>Toolbox Categories</title>
	<figure id="example-toolbox-figure">
	  <title>A large toolbox broken into categories</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/toolbox.png" format="PNG"/>
	    </imageobject>
	    <textobject>
	      <phrase></phrase>
	    </textobject>
	  </mediaobject>
	</figure>
	<para>Break toolboxes with more than sixteen items into categories of (ideally) between four and ten items.  Give each category a label and a collapsing arrow. Clicking the label or the arrow toggles the category between a collapsed and uncollapsed state.</para>
	<para>While categories may not be as visually appealing as a toolbox homogenously filled with beautiful icons, they make an unwieldy large toolbox more managable. Picking a small icon from more than fifteen other items is a difficult task. Additionally, categories allow users to hide sets of tool items that are not relevant to their current task.</para>

      </sect3>
    </sect2>

    <!-- FIXME - should eventually give general guidelines for other sorts of utility window
    <sect2 id="other-windows">
      <title>Other</title>
      <para>FIXME</para>
    </sect2>
    -->

  </sect1>


<sect1 id="alert-windows">
    <title>Alerts</title>

	<figure id="example-alert-figure">
	<title>An example of an alert</title>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="images/information-alert.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase>An example of an alert, showing the text "You have an appointment with George Wells in 15 minutes", and with an OK button to dismiss the window.</phrase>
	  </textobject>
	</mediaobject>
      </figure>

    <remark>FIXME: need to redo the spacing and icons in the alert shots. I think I have a glade file for these somewhere. -Seth</remark>

	<para>An alert provides information about the state of the application system, or asks for essential information about how to proceed with a particular task.  It is distinct from other types of window in that it is not directly requested by the user, and usually contains a message or a question rather than editable controls. Since alerts are an unwelcome intrusion into the user's work, avoid them except where necessary to avoid potential data loss or other serious problems.</para>


    <para>An alert has a border similar to that of a dialog, and is object modal. </para>
    <formalpara><title>Title Format</title>
	<para>Alert windows have no titles, as the title would usually unnecessarily duplicate the alert's primary text anyway. Users can read and respond to title-less alerts more quickly because there is less visual noise and confounding text.</para>
    </formalpara>
    <remark><para>Without a title, how does a screenreader user identify an alert window? -Calum</para></remark>
    <remark><para>The screen-reader finds out its an alert (do we need a WM mechanism for this?) and reads the primary text to identify the alert. The whole point for removing the title is that its redundant with the primary text, and puts more crap on the screen to be read. This problem applies double to users with screenreaders (i.e. reducing extra crap helps them even more). -Seth</para></remark>


    <formalpara><title>Resizing</title><para>Alert windows are not resizable. If you feel the user may need to resize your alert, your alert text is probably not concise enough.</para></formalpara>
    <para>Alerts do not appear in the system window list. Consequently, take care to ensure that alerts stay above their parent window.</para>


      <!--    
    <para role="library-problem">Buttons in GTK dialogues end up the same size (sized to the button with the longest text label). This is wrong, and looks bad.</para>
    <para role="library-problem">Automatic wrapping of labels happens at funny places and ends up looking wrong. Labels should wrap before the last whole word that does not fit in the allotted space.</para> 
      -->
    
   <!--
  <para>FIXME - reduced or no frame; one or two buttons: <guibutton>OK</guibutton> for informing alerts, and effectively <guibutton>Cancel</guibutton> and <guibutton>OK</guibutton> for confirmation. No other controls: especially not the "Do not show this again" checkbutton. Perhaps locally modal, rarely globally modal.</para>
    -->

    <sect2 id="alert-text">
      <title>Alert Text</title>
      <figure id="alert-text-figure">
	<title>Primary and Secondary Text Placement</title>
	
	<mediaobject><imageobject>
	    <imagedata fileref="images/alert-text.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase></phrase>
	  </textobject>
	</mediaobject>
      </figure>

      <formalpara><title>Primary Text</title><para>The primary text provides the user with a one sentence summary of the information or suggested action. This summary should concisely contain the essential details of the problem or suggestion. Every alert has primary text, displayed in a font slightly larger than the default, and in bold.</para></formalpara>

      <para role="technical-note">Denote primary text with the pango markup:
	<programlisting>&lt;span weight="bold" size="larger"&gt;<replaceable>Primary Text</replaceable>&lt;/span&gt;</programlisting>
      </para>
      <formalpara><title>Secondary Text</title><para>Secondary text provides a more in-depth description of the problem and suggested action, including possible side effects. Secondary text can also provide information that may be helpful in allowing the user to make an informed decision. In most situations the user should only need the primary text to make a quick decision, but they may read the secondary text if they are unsure of the proper course of action, or require extra details. Secondary text is optional, but if used, place it one text line height beneath the primary text using the default font size and weight.</para></formalpara>
    </sect2>

      <sect2 id="alert-button-order">
      <title>Alert Buttons</title>
      <figure id="alert-buttons-figure">
	<title>Button ordering and placement</title>
	
	<mediaobject><imageobject>
	    <imagedata fileref="images/alert-button-order.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase></phrase>
	  </textobject>
	</mediaobject>
      </figure>
      <para>Give all alerts an affirmative button that dismisses the alert and performs the action suggested in the primary text. Whenever an alert is displayed in response to a user action, provide a <guibutton>Cancel</guibutton> button.  If the alert warns of a technical problem or other situation that could result in data loss, provide a <guibutton>Help</guibutton> button that provides more information on the particular situation and explains the user's options. You may also provide buttons to perform alternate actions that provide another possible solution, fix potential problems, or launch related dialogs or programs.</para>
      <formalpara><title>Button Phrasing</title>
	<para>Write button labels as imperative verbs, for example <guibutton>Save</guibutton>, <guibutton>Print</guibutton>.  This allows users to select an action with less hesitation. An active phrase also fits best with the button's role in initiating actions, as contrasted with a more passive phrase. For example <guibutton>Find</guibutton> and <guibutton>Log In</guibutton> are better buttons than than <guibutton>Yes</guibutton> and <guibutton>OK</guibutton>.</para></formalpara>
      <itemizedlist>
	<listitem><formalpara><title>Affirmative Button</title><para>Place the affirmative button in the lower right corner of the alert. The affirmative button accepts the action proposed by the alert, or simply dismisses the alert if no action is suggested (such as in an information alert).</para></formalpara></listitem>
	<listitem><formalpara><title>Cancel Button</title><para>If the alert was produced in response to a user action, place a <guibutton>Cancel</guibutton> button immediately to the left of the affirmative button. This provides an escape route for users to stop an action in response to new information, or if they <quote>clicked</quote> accidentally. Clicking the <guibutton>Cancel</guibutton> button reverts the application to its state prior to the user action.</para></formalpara></listitem>
	<listitem><formalpara><title>Help Button</title><para>A <guibutton>Help</guibutton> button may be used to clarify alerts that present potentially destructive options. Place the <guibutton>Help</guibutton> button in the lower left corner of the alert. When clicked, launch a help window clarifying the situation, detailing the actions performed by the other buttons, and explaining any side-effects that each action may have.</para></formalpara></listitem>
	<listitem><formalpara><title>Alternate Buttons</title><para>Extra buttons may be used to provide alternates to the primary action proposed by the alert text. Place these buttons to the left of the <guibutton>Cancel</guibutton> button, or the affirmative button if <guibutton>Cancel</guibutton> is not present. An example of a common alternate action would be a <guibutton>Quit without Saving</guibutton> button in a save confirmation alert. This is an alternative to the primary suggested action <guibutton>Save</guibutton> and the <guibutton>Cancel</guibutton> button.</para></formalpara></listitem>
      </itemizedlist>
    </sect2>
    <sect2 id="alert-spacing">
      <title>Spacing and Positioning Inside Alerts</title>
      <figure id="alert-spacing-figure">
	<title>Spacing inside an alert</title>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="images/alert-spacing.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase></phrase>
	  </textobject>
	</mediaobject>
      </figure>
      <para>The spacing between all controls in an alert should be 12 pixels, <emphasis>except</emphasis> between buttons (should be 6 pixels), between the buttons and the text (should be one line break at the standard font size, or 24 pixels if you are using Glade), and between the primary and secondary text (should be one line break at the standard font size). The image and text should be top-aligned, and the text should be left aligned.</para>
      <tip><title>Achieving the spacing and positioning using Glade</title><para>Create a new GtkDialog window specifying the number of buttons you wish the alert to contain (and a help button if appropriate). The GtkDialog will contain a GtkVBox with an empty upper row, and a lower row containing a GtkButtonBox with buttons in it. In the empty upper row, place a new GtkHBox. In the left column of the GtkHBox place a GtkImage. In the right column of the GtkHBox place a GtkLabel. Inside the GtkLabel place <replaceable>Primary Text</replaceable> first (using the appropriate Pango markup, see <xref linkend="alert-text"/>), then put two linebreaks (return), then place <replaceable>Secondary Text</replaceable>. Now change the properties for each control according to these tables:</para>
	<table frame="topbot" pgwide="0">
	  <title>Properties for the GtkDialog</title>
	  <tgroup cols="2" colsep="0" rowsep="0" align="left">
	    <thead>
	      <row valign="top">
		<entry>Property</entry>
		<entry>Value</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>Title</entry>
		<entry>should be empty</entry>
	      </row>
	      <row>
		<entry>Border Width</entry>
		<entry>6</entry>
	      </row>
	      <row>
		<entry>Type</entry>
		<entry>Popup</entry>
	      </row>
	      <row>
		<entry>Resizable</entry>
		<entry>No</entry>
	      </row>
	      <row>
		<entry>Has Seperator</entry>
		<entry>No</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>
	<table frame="topbot" pgwide="0">
	  <title>Properties for the GtkVBox (included in the dialog by default)</title>
	  <tgroup cols="2" colsep="0" rowsep="0" align="left">
	    <thead>
	      <row valign="top">
		<entry>Property</entry>
		<entry>Value</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>Spacing</entry>
		<entry>12</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>
	<table frame="topbot" pgwide="0">
	  <title>Properties for the GtkHBox</title>
	  <tgroup cols="2" colsep="0" rowsep="0" align="left">
	    <thead>
	      <row valign="top">
		<entry>Property</entry>
		<entry>Value</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>Spacing</entry>
		<entry>12</entry>
	      </row>
	      <row>
		<entry>Border Width</entry>
		<entry>6</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>
	<table frame="topbot" pgwide="0">
	  <title>Properties for the GtkImage</title>
	  <tgroup cols="2" colsep="0" rowsep="0" align="left">
	    <thead>
	      <row valign="top">
		<entry>Property</entry>
		<entry>Value</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>Y Align</entry>
		<entry>0.00</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>
	<table frame="topbot" pgwide="0">
	  <title>Properties for the GtkLabel</title>
	    <tgroup cols="2" colsep="0" rowsep="0" align="left">
	    <thead>
	      <row valign="top">
		<entry>Property</entry>
		<entry>Value</entry>
	      </row>
	    </thead>
	    <tbody>
	      <row>
		<entry>Use Markup</entry>
		<entry>Yes</entry>
	      </row>
	      <row>
		<entry>Wrap Text</entry>
		<entry>Yes</entry>
	      </row>
	      <row>
		<entry>Y Align</entry>
		<entry>0.00</entry>
	      </row>
	    </tbody>
	  </tgroup>
	</table>
	</tip>
    </sect2>
    <sect2 id="alerts-information">
      <title>Information Alerts</title>
      <figure id="information-alert-figure">
	<title>An information alert</title>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="images/information-alert.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase></phrase>
	  </textobject>
	</mediaobject>
      </figure>
      <para>Use an information alert when the user must know the information presented before continuing, or has specifically requested the information. Present less important information by other means such as a status bar message.</para>
      <itemizedlist>
	<title>An information alert...</title>
	<listitem><para>uses the stock information icon.</para></listitem>
	<listitem><para>presents a selectable message and an <guibutton>OK</guibutton> button. The button is placed in the bottom right corner of the alert. Pressing <keysym>Enter</keysym> or <keysym>Escape</keysym> dismisses the alert.</para></listitem>
	<listitem><para>may present a convenience button to allow ready access to a relevant object. This button, when present, should is placed in the secondary area of the button box.</para> <!-- FIXME: Reword --> </listitem>
      </itemizedlist>
      <formalpara>
	<title>Window Commands:</title>
	<para><!-- Minimize, ??? -->Roll-up/Unroll</para>
      </formalpara>
    </sect2>
    <sect2 id="alerts-error">
      <title>Error Alerts</title>
      <figure id="error-alert-figure">
	<title>An error alert</title>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="images/error-alert.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase></phrase>
	  </textobject>
	</mediaobject>
      </figure>
      <para>Display an error alert when a user-requested operation cannot be sucessfully completed. Errors ocurring in operations not requested by the user should be presented by other means, unless the error could result in data loss or other serious problems. For example, an error encountered during an email check initiated by the user clicking a toolbar button should present an error alert. However, an error encountered in an automated periodic email check would more appropriately report failure with a status bar message.</para>
      <itemizedlist>
	<title>An error alert...</title>
	<listitem><para>uses the stock error icon</para></listitem>
	<listitem><para>presents a selectable message and an <guibutton>OK</guibutton> button. The button is placed in the bottom-right corner of the alert. Pressing <keysym>Enter</keysym> may dismiss the error alert.</para></listitem>
	<listitem><para>may present a convenience button to allow immediate handling of the error. Place this button in the secondary area of the button box.</para> <!-- FIXME: Reword --> </listitem>
      </itemizedlist>
      <formalpara>
	<title>Window Commands:</title>
	<para><!-- Minimize, ??? -->Roll-up/Unroll</para>
      </formalpara>

    </sect2>

    <sect2 id="alerts-confirmation">
      <title>Confirmation Alerts</title>
      <figure id="confirmation-alert-figure">
	<title>A confirmation alert</title>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="images/confirmation-alert.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase></phrase>
	  </textobject>
	</mediaobject>
      </figure>
	<para>Present a confirmation alert when the user's command may irreversibly destroy their data, create a security risk, or take more than half a minute for the user to recover from if it was selected in error.</para>
      <itemizedlist>
	<title>A confirmation alert...</title>
	<listitem><para>uses the stock warning icon.</para></listitem>
	<listitem><para>presents a button labelled with a verb or verb phrase describing the action to be confirmed, or labeled <guilabel>OK</guilabel> if such a phrase would be longer than three words. This button is placed in the bottom right corner of the alert.</para></listitem>
	<listitem><para>presents a <guibutton>Cancel</guibutton> button that will prevent execution of the user's command. This button is placed to the immediate left of the <guibutton>OK</guibutton> or equivalent button.</para></listitem>
	<listitem><para>may present an alternate action button or a convenience button. Place this button in the secondary area of the button box.</para> <!-- FIXME: Reword --></listitem>
      </itemizedlist>
      <formalpara>
	<title>Window Commands:</title>
	<para><!-- Minimize, ??? -->Roll-up/Unroll</para>
      </formalpara>
      
      <sect3 id="save-confirmation-alerts">
	<title>Save Confirmation Alerts</title>
	<figure id="save-alert-figure">
	  <title>A save confirmation alert</title>
	  
	  <mediaobject><imageobject>
	      <imagedata fileref="images/save_alert.png" format="PNG"/>
	    </imageobject>
	    <textobject>
	      <phrase>Save confirmation alert: "              [ Don't Save ] [ Cancel ] [[ Save ]] "</phrase>
	    </textobject>
	  </mediaobject>
	</figure>
	<para>Save confirmation alerts help ensure that users do not lose document changes when they close applications. This makes closing applications a less dangerous operation.</para>
	<formalpara><title>Primary Text</title><para>Save changes to document <replaceable>Document Name</replaceable> before closing?</para></formalpara>
	<para>You may replace <quote>document</quote> with a more appropriate description, for example <quote>image</quote> or <quote>diagram</quote> if the document in question is not primarily text.</para>
	<formalpara><title>Secondary Text</title><para>If you don't save, changes from the last <replaceable>Time Period</replaceable> will be discarded</para></formalpara>
	<para role="explanation">The secondary text provides the user with some context about the number of changes that might be unsaved.</para>
	<formalpara><title>Buttons</title><para><guibutton>Quit without Saving</guibutton>, <guibutton>Cancel</guibutton>, <guibutton>Save</guibutton></para></formalpara>
	
      </sect3>
    </sect2>

    <sect2 id="alerts-authentication">
      <title>Authentication Alerts</title>
      <figure id="authentication-alert-figure">
	<title>An authentication alert</title>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="images/authentication-alert.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase></phrase>
	  </textobject>
	</mediaobject>
      </figure>
      <para>Authentication alerts are used to prompt the user for information such as their user name or password necessary to gain access to protected resources. Authentication alerts are a special kind of alert because they are both routine and largely unavoidable. Every attempt should be made to retain information entered into an authentication alert as long as is possible within security constraints.</para>
      <para>An authentication alert:
	<itemizedlist>
	  <listitem>
	    <para>uses the stock authentication icon
	      <note><para><ulink url="http://bugzilla.gnome.org/show_bug.cgi?id=65765">http://bugzilla.gnome.org/show_bug.cgi?id=65765</ulink></para></note>
	    </para>
	  </listitem>
	  <listitem><para>presents labelled fields for the user to fill with the data needed for authentication. Suggested fields are <guilabel>Username</guilabel> and <guilabel>Password</guilabel> (in that order) where appropriate.</para></listitem>
	  <listitem><para>may find it secure to retain username data longer than the password, in which case the username field should be filled in and the password should have the default focus when the alert comes up.</para></listitem>
	  <listitem><para>will present a button labelled with a verb or verb phrase describing the action authenticated, or labeled <guilabel>OK</guilabel> if such a phrase would be longer than three words. Place this button in the bottom right corner of the alert.</para></listitem>
	  <listitem><para>will present a <guibutton>Cancel</guibutton> button that will prevent authentication. Place this button to the immediate left of the <guibutton>OK</guibutton> or equivalent button.</para></listitem>
	  <listitem><para>may present an alternative action button or convenience button. Place this button in the secondary area of the button box.</para><!-- FIXME: Reword --></listitem>
	</itemizedlist>
	<para>Pressing return should switch to the next field instead of activating the default button, unless the field is the last in which case the default button should be activated.</para>
	</para>
      <formalpara>
	<title>Window Commands:</title>
	<para><!-- Minimize, ??? -->Roll-up/Unroll</para>
      </formalpara>
    </sect2>

  </sect1>
  
  <sect1 id="dialog-boxes">
    <title>Dialog Boxes</title>
    
    <figure>
      <title>An example of a dialog box</title>
      <mediaobject>
	<imageobject>
	  <imagedata fileref="images/tabbed-dialog-box.png" format="PNG"/>
	</imageobject>
	<textobject>
	  <phrase>An example of a dialog box: the Glade project options dialog</phrase>
	</textobject>
      </mediaobject>
    </figure>
    
    <para>A dialog box provides an exchange of information, or dialog, between the user and the application.  Use a dialog box to obtain additional information from the user that is needed to carry out a particular command or task.</para>
    
    <formalpara>
      <title>Title Format:</title>
      <para><replaceable>Name of button or menu item that opened the dialog, without ellipsis</replaceable></para>
    </formalpara>
    <formalpara>
      <title>Window Commands:</title>
      <para>Minimize, Roll-up/Unroll</para>
    </formalpara>
    <formalpara>
      <title>Buttons:</title><para>Follow the guidelines for Alert buttons, see <xref linkend="alert-button-order"/>.</para>
    </formalpara>
    
    <para>Your dialog may specify a default button, that is activated when the user presses the <keycap>Return</keycap> key.  See <xref linkend="default-buttons"/> for guidance on choosing an appropriate default button.</para>
    
    <sect2 id="dialog-buttons">
      <title>Additional Buttons</title>
      
      <para>You can include other buttons in a dialog's main button area in addition to the affirmative button and <guibutton>Cancel</guibutton>, but any more than one or two such buttons will make the dialog appear complicated and difficult to use.  As with any other button, keep the labels as concise as possible to minimize this effect.</para>
      
      <itemizedlist><title>Guidelines</title>
	<listitem><para>Place buttons that apply to the dialog box as a whole in the main button area row at the bottom of the dialog box, to the left of the <guibutton>Cancel</guibutton> button.</para></listitem>
	<listitem><para>Place buttons that apply to one or a few controls next to their associated controls. For instance, place a <guibutton>Browse...</guibutton> button at the trailing edge of the text field it fills in.</para></listitem>
	
      </itemizedlist>
      
    </sect2>
    
    <sect2 id="dialog-layout">
      <title>Layout</title>
      <para>Arrange controls in your dialog in the direction that people read.  In western locales, this is generally left-to-right, top-to-bottom.  Position the main controls with which the user will interact as close to the upper left corner as possible.  Follow similar guidelines for arranging controls within groups in the dialog, and for specifying the order in which controls are traversed using the <keycap>Tab</keycap> key.</para>
      
      <para>When opening a dialog, provide initial keyboard focus to the component that you expect users to operate first. This focus is especially important for users who must use a keyboard to navigate your application.</para>
      
      <para>Provide and show sensible default values for as many of the controls in your dialog as possible when it is opened, so the user does not have to generate the information from scratch.  These defaults may come from system settings (for example, hostname or IP address), or from information that the user has previously entered in this or another application (for example, email address or network proxy).</para>
      
      <para>See <xref linkend="layout"/> for more detailed information on arranging controls in dialogs.</para>
      
      <para>See <xref linkend="controls-notebooks"/> for information on using tabbed notebook controls in dialogs.</para>
      
    </sect2>
    
    <sect2 id="common-dialogs">
      <title>Common Dialogs</title>
      <para>The gtk and GNOME libraries provide standard dialogs for many common tasks, including opening and saving files, choosing fonts and colors, and printing.  Always use these when the user is performing one of these tasks.  You may modify the dialogs to reflect the needs of your particular application (for example, adding preview <guibutton>Play</guibutton> and <guibutton>Stop</guibutton> buttons to the Open File dialog in an audio application), but do not change or remove features so much as to make them unrecognizable.</para>
    </sect2>
    
  </sect1>

  <sect1 id="assistant-windows">
    <title>Assistants</title>
    <remark>FIXME: need to finish this section</remark>
    <para>An assistant is a secondary window that guides the user through an operation by breaking it into sequential steps. Assistants are also useful for making complex operations less intimidating, as they restrict the information visible to the user at any given moment.</para>
    
	<para>Because assistants provide a relatively small number of controls on the screen at any given time, they have sufficient space for inline documentation. Therefore, do not include a <guibutton>Help</guibutton> button in an assistant window.  If you cannot make an operation sufficiently clear in an assistant without resorting to a <guibutton>Help</guibutton> button, you need to simplify it further.</para>
    <formalpara>
      <title>Window Commands:</title>
      <para>Close, Minimize/Unminimize, Roll-up/Unroll</para>
    </formalpara>
    <sect2 id="assistant-first-page">
      <title>Introductory Page</title>
      <para>The first page provides the user with the "big picture". Place the title of the assistant in the window's title bar and the assistant's title area, along with an optional picture. Beneath this, state the goal of the assistant, and, if it is not obvious, where the user can find the information the assistant will be asking for.</para>
      <formalpara><title>Title Format:</title><para><replaceable>Assistant Title</replaceable></para></formalpara>
      <formalpara><title>Buttons:</title><para><guibutton>Cancel</guibutton>, <guibutton>Next</guibutton></para></formalpara>
      <figure>
	<title>Example of the first page of an assistant</title>
	<mediaobject><imageobject>
	    <imagedata fileref="images/assistant-first-page.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase>Screenshot showing the first page of an assistant for creating a new email account</phrase>
	  </textobject>
	</mediaobject>
      </figure>
    </sect2>
    <sect2 id="assistant-middle-page">
      <title>Content Pages</title>
      <para>Content pages contain the actual settings of the assistant. Summarize the type of setting present on each content page in its title area. For example, <guilabel>Mail Server</guilabel>.</para>
      <formalpara><title>Title Format:</title><para><replaceable>Assistant Title</replaceable> - (<replaceable>Current Page </replaceable> of <replaceable>Total Pages</replaceable>)</para></formalpara>
      <formalpara><title>Buttons:</title><para><guibutton>Cancel</guibutton>, <guibutton>Back</guibutton>, <guibutton>Next</guibutton></para></formalpara>
      <figure>
	<title>Example of a middle page of an assistant</title>
	<mediaobject><imageobject>
	    <imagedata fileref="images/assistant-middle-page.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase>Screenshot showing the third page of an email account assistant, asking for mail server information</phrase>
	  </textobject>
	</mediaobject>
      </figure>
    </sect2>
    <sect2 id="assistant-last-page">
      <title>Last Page</title>
      <formalpara><title>Title Format:</title><para>FIXME</para></formalpara>
      <formalpara><title>Buttons:</title><para><guibutton>Cancel</guibutton>, <guibutton>Back</guibutton>, <guibutton>Finish</guibutton></para></formalpara>
    </sect2>
  </sect1>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:("/usr/lib/sgml/catalog")
sgml-local-ecat-files:("ECAT" "~/sgml/ECAT" "/usr/lib/sgml/ECAT" "/usr/local/lib/sgml/ECAT")
End:
-->
