<?xml version="1.0" encoding="UTF-8"?>
<chapter id="windows">
  <title>Windows</title>
  <para>Windows are an essential part of many graphical user interfaces. This section applies to top-level windows as they are the only windows apparent to the user.</para>
  <sect1 id="window-properties">
    <title>Parts of Windows and System Interaction</title>
    <sect2 id="window-props-titles">
      <title>Titles</title>
      <para>Every window should have a title<!-- composed of the proper name of the application and an identification of the window's purpose or content-->. A window title should contain information that is relevant to the user in distinguishing a particular window from other open windows. Information that does not assist in this selection, for example the application's version number, should be ommitted.</para>
      <para>See the description of each particular window type for title formats.</para>
    </sect2>
    <sect2 id="window-props-frames">
      <title>Frames</title>
      <para>Most windows will have frames; exceptions are shaped windows and sometimes torn-off windows. An application window should not attempt to provide its own frame, but should provide hints to the window manager for the desired frame type.</para>
      <para>Frame commands for each window type are shown by name when they may be provided.</para>
    </sect2>
    <sect2 id="window-props-modality">
      <title>Modality</title>
      <para>FIXME</para>
      <!-- Change this to a discussion of non-modal, application modal, and system modal windows. -->
      <para>A mode is a limitation of the actions a user may take. As such, modes should be avoided. When used, a mode should provide a clear means of escape, such as the <guibutton>Cancel</guibutton> button in some dialogs.</para>
      <para>A object mode will prevent the user from interacting with some of the controls in an application and might be entered when an error or exception has occured which could prevent the user from completing his task.</para>
      <para>A system mode should not be used by applications. The session and window managers are excepted as these are global interface features. The toolkit also makes use of a global mode for operations such as popping up menus or drag and drop.</para>
    </sect2>
    <sect2 id="window-props-focus">
      <title>Focus</title>
      <para>There are three focus types from which the user may choose: click-to-focus, enter-to-focus (also known as sloppy focus), and cross-to-focus (also known as focus follows mouse or PointerRoot mode). Applications must not attempt to override the user's choice, but should hint to the window manager their focus requirements. If one of your application windows may have special focus requirements then consult the Inter-Client Communication Conventions Manual (ICCCM), the wm-spec of the Free Desktop Group, and the toolkit API for the appropriate input model and how to hint to the window manager.</para>
    </sect2>
    <sect2 id="window-props-other">
      <title>General Communication with the Window Manager</title>
      <para>The toolkit API should provide all the functions needed for communicating with the window manager. The wm-spec of the Free Desktop Group and the ICCCM provide a thorough explanation of the toolkit functions.</para>
      <para>The Feedback section provides more information about when to use the available forms of window manager communication.</para>
    </sect2>
  </sect1>
 <sect1 id="primary-windows">
  <title>Primary Windows</title>
    <para>A primary window is a view of the contents of an object such as a document, a game, or an image. An application may have in any instance more than one primary window and more than one kind of primary window.</para>
    <para>A primary application window will be normally framed. It will usually contain a menu bar and a status bar and may also contain one or more toolbars.</para>
    <sect2 id="primary-window-titles">
      <title>Primary Window Titles</title>
      <formalpara>
        <title>Title Format for document based applications:</title>
        <para><replaceable>Document Name</replaceable>
	  <itemizedlist>
	    <listitem><example><title>Title for an AbiWord window</title><para>My Report.abw</para></example></listitem>
  	    <listitem><example><title>Title for an Evolution window display the Inbox folder</title><para>Inbox</para></example></listitem>
	    <listitem><example><title>Title for a Music player</title><para>U2 - Better Than the Real Thing</para></example></listitem>
	  </itemizedlist>
        </para>
      </formalpara>
      <para>While document names are most pertinent to users, we understand that application developers may want to raise the recognition of their application. If you plan to include your application's name in the title of a primary window, use the following format: <replaceable>Document Name</replaceable> - <replaceable>Application Name</replaceable>. This will at least ensure that the document name appears in limited space situations such as the window list. Please note that this is <emphasis role="bold">not</emphasis> recommended.</para>
      <para><emphasis role="bold">Do not</emphasis> place version numbers, company names, or other data the user will not find helpful in the window title. It consumes space in the title, making titles in limited spaces such as the window list less useful, and it provides more text the user will have to scan to find useful information. In a "beta" product where version numbers are critical for bug information placing version numbers is useful, but do not keep them in stable releases, instead place version information in the about box.</para>
      <formalpara>
        <title>Title Format for other applications:</title>
        <para><replaceable>Application Name</replaceable>
	  <itemizedlist>
	    <listitem><example><title>Title for the primary Dictionary window</title><para>Dictionary</para></example></listitem></itemizedlist>
        </para>
      </formalpara>
    </sect2>
    <sect2 id="primary-window-commands">
      <title>Window Commands</title>
      <para>Close, Maximize/Restore, Minimize, Roll-up/Unroll, Stick/Unstick</para>
    </sect2>

    <sect2 id="document-interface-types">
      <title>Document to Window Mapping</title>
      <sect3 id="sdi">
	<title>Single Document Interface (SDI)</title>
	<para>A single document interface places each document in its own primary window. Toolboxes and other utility windows may be shared between multiple SDI documents, but closing them should have no effect on the document windows. SDI should be used unless there is a compelling reason to use CSDI or MDI.</para>
      </sect3>
      <sect3 id="csdi">
	<title>Controlled Single Document Interface (CSDI)</title>
	<para>The use of CSDI is reserved for expert or special purpose applications. Complex drawing applications, such as the GIMP, present this kind of interface. The main toolbox of the GIMP is the control window.</para>
      </sect3>
      <sect3 id="mdi">
	<title>Multiple Document Interface (MDI)</title>
	<para>A paned or tabbed presentation of two documents<!--, or two views of the same document--> within a single window is an MDI. Often it is best to leave such presentation details to the window manager.</para>
      </sect3>
    </sect2>
  </sect1>

  <sect1 id="utility-windows">
    <title>Utility Windows</title>
    <para>Utility windows, such as palettes and toolboxes, are also normally framed. They should not contain a menu bar, a tool bar, or a status bar.</para>

    <sect2 id="property-windows">
      <title>Property Windows</title>
      <para>Provide a property window when actions in the property window immediately affect the object's properties.</para>

      <formalpara>
	<title>Title Format:</title>
	<para><replaceable>Object Name</replaceable> Properties</para>
      </formalpara>
      <formalpara>
	<title>Window Commands:</title>
	<para>Close, Minimize, Roll-up/Unroll, Stick/Unstick</para>
      </formalpara>
      <formalpara>
	<title>Buttons:</title>
	<para>A <guibutton>Close</guibutton> should be placed in the lower right corner.</para>
      </formalpara>

      <figure>
	<title>Example of a property window</title>
	<mediaobject><imageobject>
	    <imagedata fileref="images/property-window.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase>Screenshot showing the "file properties" window from Nautilus</phrase>
	  </textobject>
	</mediaobject>
      </figure>
    </sect2>

    <sect2 id="preference-windows">
      <title>Preference Windows</title>
      <para>Provide a preference window for applications which have instantly applied preferences.</para>
      <formalpara>
	<title>Title Format:</title>
	<para><replaceable>Application Name</replaceable> Preferences</para>
      </formalpara>
      <formalpara>
	<title>Window Commands:</title>
	<para>Close, Minimize, Roll-up/Unroll, Stick/Unstick</para>
      </formalpara>
      <formalpara>
	<title>Buttons:</title>
	<para>A <guibutton>Close</guibutton> should be placed in the lower right corner.</para>
      </formalpara>

      <figure>
	<title>Example of a preferences window</title>
	<mediaobject><imageobject>
	    <imagedata fileref="images/preferences-window.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase>Screenshot showing the Gnibbles preferences window</phrase>
	  </textobject>
	</mediaobject>
      </figure>
    </sect2>

    <sect2 id="toolbox-windows">
      <title>Toolboxes and Palettes</title>
      <para>A toolbox provides convenient access to a set of common actions.</para>
      <formalpara>
	<title>Title Format:</title>
	<para>FIXME</para>
      </formalpara>
      <formalpara>
	<title>Buttons:</title>
	<para>None.</para>
      </formalpara>
    </sect2>

    <sect2 id="other-windows">
      <title>Other</title>
      <para>FIXME</para>
    </sect2>

  </sect1>

  <sect1 id="alert-windows">
    <title>Alerts</title>
    <para>An alert will have a dialog-like frame and be object modal. Alerts are distinct from dialogs in that they are not directly requested by the user. As they are an unwelcome intrusion into the user's work, they should be avoided. Alerts may be used to inform the user of an exception, to request confirmation of a destructive action, or for unanticipated authentication.</para>
    <formalpara><title>Title Format</title><para>Alert windows should have no titles. Titles on these windows almost always mirror the window's primary text anyway, and only serve to throw extra words on the screen. Users will be able to read and respond to titleless alerts faster because there is less visual noise and confounding text.</para></formalpara>
      <!--    
    <para role="library-problem">Buttons in GTK dialogues end up the same size (sized to the button with the longest text label). This is wrong, and looks bad.</para>
    <para role="library-problem">Automatic wrapping of labels happens at funny places and ends up looking wrong. Labels should wrap before the last whole word that does not fit in the allotted space.</para> 
      -->
    <!--
  <para>FIXME - reduced or no frame; one or two buttons: <guibutton>OK</guibutton> for informing alerts, and effectively <guibutton>Cancel</guibutton> and <guibutton>OK</guibutton> for confirmation. No other controls: especially not the "Do not show this again" checkbutton. Perhaps locally modal, rarely globally modal.</para>
    -->
      <sect2 id="alert-button-order">
      <title>Alert Buttons</title>
      <para>All alerts should have an affirmative button which dismisses the alert and performs the action suggested in the primary text. Whenever an alert is displayed in response to a user action, a <guibutton>Cancel</guibutton> button should be present. Dangerous or archane alerts should consider having a <guibutton>Help</guibutton> which provides more information on the particular situation and explains the user's options. Alternate actions, which provide another possible solution, fix potential problems, or launch related dialogs/programs (amongst other things) may also be provided.</para>
      <formalpara><title>Button Phrasing</title><para>Whenever possible, buttons should be phrased in verb form, as users will be less liable to answer alert backwards, and will be able to select an action with less hesitation. An active phrase also fits best with the button's role in initiating actions, as contrasted with a more passive phrase. For example <guibutton>Save</guibutton> and <guibutton>Log In</guibutton> are better buttons than than <guibutton>Yes</guibutton> and <guibutton>OK</guibutton>.</para></formalpara>
      <itemizedlist>
	<listitem><formalpara><title>Affirmative Button</title><para>The affirmative button should be placed in the lower right corner of the alert. The affirmative button accepts the action proposed by the alert, or simply dismisses the alert if no action is suggested (such as in an information alert).</para></formalpara></listitem>
	<listitem><formalpara><title>Cancel Button</title><para>If the alert was produced in response to a user action, place a <guibutton>Cancel</guibutton> button immediately to the left of the affirmative button. This provides an escape route for users to stop an action in response to new information, or if they <quote>clicked</quote> accidentally. Clicking the <guibutton>Cancel</guibutton> button should revert the application to its state prior to the user action.</para></formalpara></listitem>
	<listitem><formalpara><title>Help Button</title><para>A <guibutton>Help</guibutton> button may be used to clarify alerts presenting potentially destructive options. The <guibutton>Help</guibutton> button should be placed in the lower left corner of the alert beneath the icon. Clicking <guibutton>Help</guibutton> should launch a help window clarifying the situation and detailing the actions performed by the other buttons. Any unobvious side effects of the buttons should also be explained.</para></formalpara></listitem>
	<listitem><formalpara><title>Alternate Buttons</title><para>Extra buttons may be used to provide alternates to the primary action proposed by the alert text. These buttons should be placed to the left of the <guibutton>Cancel</guibutton> button, or affirmative button if <guibutton>Cancel</guibutton> is not present. An example of a common alternate action would be a <guibutton>Quit without Saving</guibutton> button in a save confirmation alert. This is an alternative to the primary suggested action <guibutton>Save</guibutton> and the <guibutton>Cancel</guibutton> button.</para></formalpara></listitem>
      </itemizedlist>
      <figure id="alert-buttons-figure">
	<title>Button ordering and placement</title>
	
	<mediaobject><imageobject>
	    <imagedata fileref="images/alert-button-order.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase></phrase>
	  </textobject>
	</mediaobject>
      </figure>
    </sect2>
    <sect2 id="alert-text">
      <title>Alert Text</title>
      <formalpara><title>Primary Text</title><para>Primary text provides the user with a one sentence summary of a suggested action or a piece of information. This summary should be "to the point", but should contain the essential details of the problem/suggestion. All alerts should have primary text, which should be displayed in a slightly larger than default font, and bold.</para></formalpara>
      <para role="technical-note">Primary text should be denoted with the pango markup:
	<programlisting>&lt;span weight="bold" size="larger"&gt;<replaceable>Primary Text</replaceable>&lt;/span&gt;</programlisting>
      </para>
      <formalpara><title>Secondary Text</title><para>Secondary text provides a more in depth description of the problem and suggested action, including possible side effects. Secondary text can also provide information that may be helpful in allowing the user to make an informed decision. In most situations the user should only need the primary text to make a quick decision, but they may read the secondary text if they are unsure of the proper course of action, or require extra details. Secondary text is optional, and should be placed one text line height beneath the primary text using the default font size.</para></formalpara>
      <figure id="alert-text-figure">
	<title>Primary and Secondary Text Placement</title>
	
	<mediaobject><imageobject>
	    <imagedata fileref="images/alert-text.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase></phrase>
	  </textobject>
	</mediaobject>
      </figure>
    </sect2>
    <sect2 id="alerts-information">
      <title>Information Alerts</title>
      <para>An information alert should only be used when the user must know the information presented before continuing, or has specifically requested the information. Non-essential, auxilliary information should be presented by other means such as a status bar message.</para>
      <para>An information alert:
	<itemizedlist>
	  <listitem><para>Will use the stock information icon.</para></listitem>
	  <listitem><para>Will present a selectable message and an <guibutton>OK</guibutton> button. This button will be placed in the bottom right corner of the alert. Pressing <keysym>Enter</keysym> or <keysym>Escape</keysym> will dismiss the informational alert.</para></listitem>
	  <listitem><para>May present a convenience button to allow ready access to a relevant object. This button, when present, should be placed in the secondary area of the button box.</para> <!-- FIXME: Reword --> </listitem>
	</itemizedlist>
      </para>
      <formalpara>
	<title>Window Commands:</title>
	<para><!-- Minimize, ??? -->Roll-up/Unroll</para>
      </formalpara>
      <figure id="information-alert-figure">
	<title>An information alert</title>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="images/information-alert.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase></phrase>
	  </textobject>
	</mediaobject>
      </figure>
    </sect2>
    <sect2 id="alerts-error">
      <title>Error Alerts</title>
      <para>FIXME - same as information alerts except for the icon.</para>
      <para>An error alert:
	<itemizedlist>
	  <listitem><para>Will use the stock error icon.</para></listitem>
	  <listitem><para>Will present a selectable message and an <guibutton>OK</guibutton> button. This button will be placed in the bottom right corner of the alert. Pressing <keysym>Enter</keysym> may dismiss the error alert.</para></listitem>
	  <listitem><para>May present a convenience button to allow immediate handling of the error. This button, when present, should be placed in the secondary area of the button box.</para> <!-- FIXME: Reword --> </listitem>
	</itemizedlist>
      </para>
      <formalpara>
	<title>Window Commands:</title>
	<para><!-- Minimize, ??? -->Roll-up/Unroll</para>
      </formalpara>
      <figure id="error-alert-figure">
	<title>An error alert</title>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="images/error-alert.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase></phrase>
	  </textobject>
	</mediaobject>
      </figure>
    </sect2>

    <sect2 id="alerts-confirmation">
      <title>Confirmation Alerts</title>
      <para>A confirmation alert should be presented when the user's command may irreversibly destroy user data or create a security risk.</para>
      <para>A confirmation alert:
	<itemizedlist>
	  <listitem><para>Will use the stock warning icon.</para></listitem>
	  <listitem><para>Will present a button labelled with a verb or verb phrase describing the action to be confirmed, or labeled <guilabel>OK</guilabel> if such a phrase would be longer than three words. This button will be placed in the bottom right corner of the alert.</para></listitem>
	  <listitem><para>Will present a <guibutton>Cancel</guibutton> button which will prevent execution of the user's command. This button will be placed to the immediate left of the OK-equivalent button.</para></listitem>
	  <listitem><para>May present an alternate action button or a convenience button. This button, when present, should be placed in the secondary area of the button box.</para> <!-- FIXME: Reword --></listitem>
	</itemizedlist>
      </para>
      <formalpara>
	<title>Window Commands:</title>
	<para><!-- Minimize, ??? -->Roll-up/Unroll</para>
      </formalpara>
      <figure id="confirmation-alert-figure">
	<title>A confirmation alert</title>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="images/confirmation-alert.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase></phrase>
	  </textobject>
	</mediaobject>
      </figure>
      <sect3 id="save-confirmation-alerts">
	<title>Save Confirmation Alerts</title>
	<para>Save confirmation alerts help ensure that users do not lose document changes when they close applications. This makes closing applications a less dangerous operation.</para>
	<formalpara><title>Primary Text</title><para>Save changes to document <replaceable>Document Name</replaceable> before closing?</para></formalpara>
	<para>Feel free to replace <quote>document</quote> with a more appropriate description, for example <quote>image</quote> or <quote>diagram</quote> if the document in question is not primarily text.</para>
	<formalpara><title>Secondary Text</title><para>If you don't save, changes from the last <replaceable>Time Period</replaceable> will be discarded</para></formalpara>
	<para role="explanation">The secondary text provides the user with some context about the number of changes that might be unsaved.</para>
	<formalpara><title>Buttons</title><para><guibutton>Quit without Saving</guibutton>, <guibutton>Cancel</guibutton>, <guibutton>Save</guibutton></para></formalpara>
	<figure id="save-alert-figure">
	  <title>A save confirmation alert</title>
	  
	  <mediaobject><imageobject>
	      <imagedata fileref="images/save_alert.png" format="PNG"/>
	    </imageobject>
	    <textobject>
	      <phrase>Save confirmation alert: "              [ Don't Save ] [ Cancel ] [[ Save ]] "</phrase>
	    </textobject>
	  </mediaobject>
	</figure>
      </sect3>
    </sect2>

    <sect2 id="alerts-authentication">
      <title>Authentication Alerts</title>
      <para>FIXME</para>
      <para>An authentication alert:
	<itemizedlist>
	  <listitem>
	    <para>Will use the stock authentication icon.
	      <note><para><ulink url="http://bugzilla.gnome.org/show_bug.cgi?id=65765">http://bugzilla.gnome.org/show_bug.cgi?id=65765</ulink></para></note>
	    </para>
	  </listitem>
	  <listitem><para>Will present labelled fields for the user to fill with the data needed for authentication.</para></listitem>
	  <listitem><para>Will present a button labelled with a verb or verb phrase describing the action authenticated, or labeled <guilabel>OK</guilabel> if such a phrase would be longer than three words. This button will be placed in the bottom right corner of the alert.</para></listitem>
	  <listitem><para>Will present a <guibutton>Cancel</guibutton> button which will prevent authentication. This button will be placed to the immediate left of the OK-equivalent button.</para></listitem>
	  <listitem><para>May present an alternative action button or convenience button. This button, when present, should be placed in the secondary area of the button box.</para><!-- FIXME: Reword --></listitem>
	</itemizedlist>
      </para>
      <formalpara>
	<title>Window Commands:</title>
	<para><!-- Minimize, ??? -->Roll-up/Unroll</para>
      </formalpara>
    </sect2>

  </sect1>
  
  <sect1 id="assistant-windows">
    <title>Assistants</title>
    <para>An assistant is an application modal secondary window that guides the user through an operation by breaking it into sequential steps. Assistants are also useful for making complex operations less intimidating, as they restrict the information visible to the user at any given moment.</para>
    <para>Because assistants provide a relatively small number of controls on the screen at any given time, they have sufficient space for inline documentation. Thus out of band documentation, such as a <guibutton>Help</guibutton> button, should not be present. If you can't make an operation sufficiently clear in an assistant without feeling the need for a <guibutton>Help</guibutton> button, you should seriously reconsider your presentation of the information or the approach you are taking to the interface. It is probably overly complex.</para>
    <formalpara>
      <title>Window Commands:</title>
      <para>FIXME, Roll-up/Unroll</para>
    </formalpara>
    <sect2 id="assistant-first-page">
      <title>Introductory Page</title>
      <para>The first page provides the user with the "big picture". It states the goal of the assistant, and perhaps where they can find the information the assistant asks for if this is not immediately obvious. The overall title of the assistant should be placed in the title bar, along with an optional picture. Beneath it should be the explanation.</para>
      <formalpara><title>Title Format:</title><para><replaceable>Assistant Title</replaceable></para></formalpara>
      <formalpara><title>Buttons:</title><para><guibutton>Cancel</guibutton>, <guibutton>Next</guibutton></para></formalpara>
      <figure>
	<title>Example of the first page of an assistant</title>
	<mediaobject><imageobject>
	    <imagedata fileref="images/assistant-first-page.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase>Screenshot showing the first page for an assistant</phrase>
	  </textobject>
	</mediaobject>
      </figure>
    </sect2>
    <sect2 id="assistant-middle-page">
      <title>Content Pages</title>
      <para>Content pages contain the actual settings of the assistant. The title bar should contain a title for the current page, summarizing the types of settings present on the page (for example "Mail Server").</para>
      <formalpara><title>Title Format:</title><para><replaceable>Assistant Title</replaceable> - (<replaceable>Current Page </replaceable> of <replaceable>Total Pages</replaceable></para></formalpara>
      <formalpara><title>Buttons:</title><para><guibutton>Cancel</guibutton>, <guibutton>Back</guibutton>, <guibutton>Next</guibutton></para></formalpara>
      <figure>
	<title>Example of a middle page of an assistant</title>
	<mediaobject><imageobject>
	    <imagedata fileref="images/assistant-middle-page.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase>Screenshot showing a middle page for an assistant</phrase>
	  </textobject>
	</mediaobject>
      </figure>
    </sect2>
    <sect2 id="assistant-last-page">
      <title>Last Page</title>
      <formalpara><title>Title Format:</title><para>FIXME</para></formalpara>
      <formalpara><title>Buttons:</title><para><guibutton>Cancel</guibutton>, <guibutton>Back</guibutton>, <guibutton>Finish</guibutton></para></formalpara>
    </sect2>
  </sect1>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:("/usr/lib/sgml/catalog")
sgml-local-ecat-files:("ECAT" "~/sgml/ECAT" "/usr/lib/sgml/ECAT" "/usr/local/lib/sgml/ECAT")
End:
-->
