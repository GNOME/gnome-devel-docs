<?xml version='1.0' encoding='UTF-8'?>
<page xmlns="http://projectmallard.org/1.0/"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      type="guide" style="task"
      id="helloWorld.js">
  <info>
    <link type="guide" xref="beginner.js#tutorials" group="#first"/>
    <revision version="0.1" date="2012-02-19" status="stub"/>

    <credit type="author copyright">
      <name>Susanna Huhtanen</name>
      <email>ihmis.suski@gmail.com</email>
      <years>2012</years>
    </credit>
    <credit type="editor">
      <name>Tiffany Antopolski</name>
      <email>tiffany.antopolski@gmail.com</email>
    </credit>

    <desc>A basic "hello, world" application</desc>
  </info>
 <title>Hello World</title>
   <synopsis>
    <p>This tutorial will demonstrate how to make a small "Hello, World" application using JavaScript and GTK+.</p>
  </synopsis>

  <media type="image" mime="image/png" src="media/helloWorldJs.png"/>
   <links type="section" />
   <section id="script">
    <title>Script for running the application</title>
    <code mime="text/javascript"><![CDATA[
#!/usr/bin/gjs]]></code>
    <p>This needs to be the first line of your script. It tells the script to use <link href="https://live.gnome.org/Gjs/">Gjs</link>. Gjs is a JavaScript binding for GNOME.</p>
  </section>

  <section id="imports">
    <title>Libraries to import</title>
    <code mime="text/javascript"><![CDATA[
const Lang = imports.lang;
const Gtk = imports.gi.Gtk;]]></code>
    <p>In order for our script to work with GNOME, we need to import GNOME libraries via GObject Introspection. Here we import the language bindings and GTK+, the library which contains the graphical widgets used to make GNOME applications.  </p>
    </section>

   <section id="mainwindow">
    <title>Creating the main window for the application</title>
    <code mime="text/javascript"><![CDATA[
const Application = new Lang.Class({
    //A Class requires an explicit Name parameter. This is the Class Name.
    Name: 'Application',

    //create the application
    _init: function() {
        this.application = new Gtk.Application();

       //connect to 'activate' and 'startup' signals to handlers.
       this.application.connect('activate', Lang.bind(this, this._onActivate));
       this.application.connect('startup', Lang.bind(this, this._onStartup));
    },

    //create the UI
    _buildUI: function() {
        this._window = new Gtk.ApplicationWindow({ application: this.application,
                                                   title: "Hello World!" });
    },

    //handler for 'activate' signal
    _onActivate: function() {
        //show the window and all child widgets
        this._window.show_all();
    },

    //handler for 'startup' signal
    _onStartup: function() {
        this._buildUI();
    }
});
]]></code>

    <p>GtkApplication initializes Gtk+. It also connects the <gui>x</gui> button that's automatically generated along with the window to the "destroy" signal.</p>
    <p>We can start building our first window. We do this by creating a variable called _window and assigning it a new Gtk.ApplicationWindow.</p>
    <p>We give the window a property called title. The title can be any string you want it to be. To be on the safe side, it's best to stick to UTF-8 encoding.</p>
    <p>Now we have a window which has a title and a working "close" button. Let's add the actual "Hello World" text.</p>
    </section>

    <section id="label">
  <title>Label for the window</title>
  <code mime="text/javascript"><![CDATA[
// Add a label widget to your window
this.label = new Gtk.Label({ label: "Hello World" });
this._window.add(this.label);
this._window.set_default_size(200, 200);]]></code>
  <p>A text label is one of the GTK+ widgets we can use, on account of having imported the GTK+ library. To use it, we create a new variable called label, and assign it a new Gtk.Label. Then we give it properties inside the curly braces {}. In this case, we're setting the text that the label will hold. Finally, we create and run the application:</p>
<code mime="text/javascript"><![CDATA[
//run the application
let app = new Application();
app.application.run(ARGV);]]></code>

  <p>Gtk.ApplicationWindow can only hold one widget at a time. To construct more elaborate programs you need to create a holder widget like Gtk.Grid inside the window, and then add all the other widgets to it.</p>
  </section>
  <section id="js">
    <title>helloWorld.js</title>
    <p>Here's what the completed program looks like.</p>

<code mime="text/javascript" style="numbered"><xi:include href="samples/helloWorld.js" parse="text"><xi:fallback/></xi:include></code>
  </section>
  <section id="terminal">
  <title>Running the application from terminal</title>
  <p>To run this application, first save it as helloWorld.js. Then open Terminal, go to the folder where your application is stored and run</p>
<screen><output style="prompt">$ </output><input>gjs helloWorld.js</input></screen>
    </section>
</page>
