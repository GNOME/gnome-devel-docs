<page xmlns="http://projectmallard.org/1.0/"
      type="guide" style="task"
      id="helloWorld.js">
  <info>
    <link type="guide" xref="beginner.js#hello_world" group="#first"/>
    <revision version="0.1" date="2012-02-19" status="stub"/>

    <credit type="author copyright">
      <name>Susanna Huhtanen</name>
      <email>ihmis.suski@gmail.com</email>
      <years>2012</years>
    </credit>

    <desc>Tutorial for a hello world application</desc>
  </info>
  <title>Hello World</title>

  <synopsis>
    <p>In this tutorial we'll construct a small application, Hello World, using JavaScript and GTK+. To do and run all the code examples yourself, you need an editor to write code in, Terminal and GNOME 3 or higher installed into your computer. In this tutorial we'll go through the following parts:</p>
    <list>
      <item><p> <link xref="#script">Script for running the application</link> </p></item>
      <item><p> <link xref="#imports">Libraries to import</link> </p></item>
      <item><p> <link xref="#mainwindow">Creating the main window for the application</link> </p></item>
      <item><p> <link xref="#label">Label for the window</link> </p></item>
      <item><p> <link xref="#js">helloWorld.js</link> </p></item>
      <item><p> <link xref="#terminal">Running the application form Terminal</link> </p></item>
    </list> 
   
  </synopsis>
    <p>After reading this tutorial, you should see this in your screen:</p>
    <media type="image" mime="image/png" src="media/helloWorldJs.png"/>
    <section id="script">
    <title>Script for running the application</title>
    <code mime="text/javascript" style="numbered"><![CDATA[
  #!/usr/bin/gjs]]></code>
    <p>  This line tells how to run the script. It needs to be the first line of the code and it needs to be executable. To get the execution rights go to terminal and run in right folder: chmod +x scriptname. Or you can use the graphical filemanager. Just go to the right folder where your code is, right click you code file, choose properties, click the permissions tab and check the box for allow executing file as a program  
    </p>
  </section>
  
  <section id="imports">
    <title>Libraries to import</title>
    <code mime="text/javascript" style="numbered"><![CDATA[
var Gtk = imports.gi.Gtk;]]></code>
    <p>In order to have a working program we need to import a GObject Introspection -library to our use. For working UI, we need Gtk. Gtk is imported in the beginning so we have it in our use everywhere.</p>
    </section>

   <section id="mainwindow">
    <title>Creating the main window for the application</title> 
    <code mime="text/javascript" style="numbered"><![CDATA[
// Initialize the gtk
Gtk.init(null, 0);
//create your window, name it and connect the x to quit function. Remember that window is a taken word
var mywindow = new Gtk.Window({type: Gtk.WindowType.TOPLEVEL});
mywindow.title = "Hello World!";
mywindow.connect("destroy", function(){Gtk.main_quit()});


mywindow.show();
//and run it
Gtk.main();]]></code>
    <p>After importing Gtk, we need to initialize it. After initializing Gtk we can start building our first window. We do this by creating a variable mywindow and assign it a new Gtk.Window of type TOPLEVEL.</p> <p>After setting up our first window we'll give the window a property called title. Title can be any string you want it to be, to be on the safe side it is good to stick to UTF-8 encoding.</p> <p>The next major improvement to our application is connecting the automatically with the window generated close button with a functionality. The close button has only one reasonable function and that is to close the window. The connecting happens with the method connect. The signal the window is listening to is "destroy", so when the close button is pressed it gives out the signal "destroy". Just listening the signal is not enough, it needs to launch an action. in this case we want it to close the window, so quit he main loop should do the trick. So after "destroy", we'll ad function(){Gtk.main_quit()} to do the actual closing.</p><p>Now we have a window that has a title and a functionality of closing the window. If we would run th application at this stage it wouldnt show anything, so we need to tell our window to show itself with the method show() and we need to also run the whole application in order for anything to happen.</p>
    </section>
    
    <section id="label">
  <title>Label for the window</title>
  <code mime="text/javascript" style="numbered"><![CDATA[
//Set some text to your window
var label = new Gtk.Label({label: "Hello World"});
mywindow.add(label);]]></code>
  <p>Now all the hard parts are done. The only thing we need now is to put something inside our window. A label telling what this is about is the easiest thing to do, so we create a new variable called label and assign it a new Gtk.Lablel. With the label we're using a different method of giving it properties, we are giving the properties inside curly braces {}. The label has to be added to the window in order for the method show() applying also to it. For the future it is good to know that Gtk.Window can only contain one widget at the time. To be able to construct more elaborate programs you need to create a holder widget (Gtk.Box, Gtk.Grid, Gtk.Application and so on) of some kind under the window and then adding all the other widgets to that.</p>
  </section>
  <section id="js">
    <title>helloWorld.js</title>
    <p>This is what the whole program looks like.</p>
      <code mime="text/javascript" style="numbered"><![CDATA[
#!/usr/bin/gjs
//The previous line is a hash bang tells how to run the script.
// Note that the script has to be executable (run in terminal in the right folder: chmod +x scriptname)

var Gtk = imports.gi.Gtk;
// Initialize the gtk
Gtk.init(null, 0);
//create your window, name it and connect the x to quit function. Remember that window is a taken word
var mywindow = new Gtk.Window({type: Gtk.WindowType.TOPLEVEL});
mywindow.title = "Hello World!";
mywindow.connect("destroy", function(){Gtk.main_quit()});
//Set some text to your window
var label = new Gtk.Label({label: "Hello World"});
mywindow.add(label);
//show everything you have done
label.show();
mywindow.show();
//and run it
Gtk.main();]]></code>
  </section>
  <section id="terminal">
  <title>Running the application form Terminal</title>
  <p>To run this application open Terminal, go to the folder where your application is stored and then run</p> <screen> <output style="prompt">$ </output><input> GJS_PATH=`pwd` gjs helloWorld.js</input> </screen>
    </section>
</page>
