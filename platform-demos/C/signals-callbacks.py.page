<?xml version='1.0' encoding='UTF-8'?>
<page xmlns="http://projectmallard.org/1.0/"
      xmlns:e="http://projectmallard.org/experimental/"
      type="guide" style="task"
      id="signals-callbacks.py">

<info>
  <link type="guide" xref="beginner.py#tutorials"/>
  <revision version="0.1" date="2012-06-16" status="draft"/>

  <desc>An explanation of signals and callbacks in GTK+.</desc>
  <credit type="author copyright">
    <name>Sebastian P&#246;lsterl</name>
    <email>sebp@k-d-w.org</email>
    <years>2011</years>
  </credit>
  <credit type="editor">
    <name>Marta Maria Casetti</name>
    <email>mmcasetti@gmail.com</email>
    <years>2012</years>
  </credit>
</info>

<title>Signals and callbacks</title>

<p>Like most GUI toolkits, GTK+ uses an event-driven programming model. When the user is doing nothing, GTK+ sits in the main loop and waits for input. If the user performs some action - say, a mouse click - then the main loop &#34;wakes up&#34; and delivers an event to GTK+.</p>

<p>When widgets receive an event, they frequently emit one or more signals. Signals notify your program that &#34;something interesting happened&#34; by invoking functions you have connected to the signal. Such functions are commonly known as callbacks. When your callbacks are invoked, you would typically take some action. After a callback finishes, GTK+ will return to the main loop and await more user input.</p>

<p>A generic example is: <code>handler_id = widget.connect("event", callback, data)</code>.</p>

<p>Firstly, <code>widget</code> is an instance of a widget we created earlier. Next, the event we are interested in. Each widget has its own particular events which can occur. For instance, if you have a Gtk.Button you usually want to connect to the &#34;clicked&#34; event. This means that when the button is clicked, the signal is issued. Thirdly, the callback argument is the name of the callback function. It contains the code which runs when signals of the specified type are issued. Finally, the data argument includes any data which should be passed when the signal is issued. However, this argument is completely optional and can be left out if not required.</p>

<p>The function returns a number (the <code>handler_id</code>) that identifies this particular signal-callback pair. This number is required to disconnect from a signal such that the callback function will not be called during any future or currently ongoing emissions of the signal it has been connected to, as in <code>widget.disconnect(handler_id)</code>.</p>

</page>
