<page xmlns="http://projectmallard.org/1.0/"
      type="topic"
      id="style-principles">

  <info>

    <link type="guide" xref="index#style"/>

    <desc>Guiding principles for writing documentation.</desc>

    <revision pkgversion="3.0" version="0.1" date="2010-12-23" status="draft"/>

    <credit type="author">
      <name>GNOME Documentation Project</name>
      <email>gnome-doc-list@gnome.org</email>
    </credit>

  </info>

<title>Style Principles</title>

 <quote>
  <cite>Henry David Thoreau</cite>
  <p>Our life is frittered away by detail.... Simplify, simplify.</p>
 </quote>

 <quote>
  <cite><em>The Elements of Style</em>, William Strunck Jr. and E. B. White</cite>
  <p>Vigorous writing is concise. A sentence should contain no unnecessary words, a paragraph no unnecessary sentences, for the same reason that a drawing should have no unnecessary lines and a machine no unnecessary parts. This requires not that the writer make all his sentences short, or that he should avoid all detail and treat his subjects only in outline, but that every sentence tell.</p>
 </quote>

 <quote>
  <cite>Thomas Mann</cite>
  <p>A writer is someone for whom writing is more difficult than it is for other people.</p>
 </quote>

 <quote>
  <cite>John Ruskin</cite>
  <p>Say all you have to say in the fewest possible words, or your reader will be sure to skip them; and in the plainest possible words or he will certainly misunderstand them.</p>
 </quote>

<section id="human">
 <title>You are human, and so are your readers</title>
 <p>There is a tendency in technical writing to be formulaic, to rely on using the same structures again and again. This makes your writing boring and unsatisfying. Avoid this at all costs - readers won't take the information on board as effectively if they are bored, and you won't be getting the satisfaction of exercising your creativity.</p>
 <p>Having said that, you're not writing a novel. "Pleasant to read" is enough - don't obscure the content by desperately trying to work something interesting in there. Some topics are genuinely dull.</p>
</section>

<section id="simple">
 <title>Write simply</title>
 <p>Write in a way that is easy for your audience to understand. This shouldn't imply that you're writing for an unintelligent audience; rather, you're trying to save your readers unnecessary mental overhead. Simple writing is easier to understand, and the point of our technical writing is to help people to understand things.</p>
 <p>"Simple" also means "non-technical". Use words that the reader will understand and know about, or at least be able to correctly guess the meaning of. Just because a word is widely used in the computer industry doesn't mean that real users will know what it means.</p>
</section>

<section id="direct">
 <title>Be direct</title>
 <p>Write directly to your reader. It's fine to use "you" and "your" - there is no need to always write abstractly, or for the third person. That doesn't mean that every sentence should be addressed directly to the reader, though.</p>
 <p>Being direct also means cutting out waffle. Don't labor points (unless it's important to do so), don't over-describe things, and don't waste the user's time with introductory text. The most important information should go first - defer asides until later on.</p>
 <p>Prefer shorter sentences with fewer clauses, but keep your writing friendly and natural. Being a little terse is OK as long as the text flows well.</p>
 <p>You should also refrain from using flowery or excessively exuberant language. Trying to write in a poetic or learned manner can obscure the meaning of the content; too much enthusiasm can be off-putting or patronizing.</p>
</section>

<section id="sufficient">
 <title>Sufficient is better than complete</title>
 <p>Write enough that the reader know what you are talking about, but not much more. There is a tendency to over-explain things in documentation, usually for reasons of completeness. It's OK to miss out bits of a topic that aren't as important or interesting. You can skim over steps that are obvious.</p>
 <p>Likewise, your choice of topics shouldn't be dictated by completeness. Do users really need a topic on starting or exiting your app? Or would it be sufficient to leave those topics out?</p>
</section>

<section id="useful">
 <title>Be useful</title>
 <p>What you write should be useful to the reader. Writing about something simply because you <em>feel you should</em> isn't good enough; you'll end up with lazy, uninformative writing that doesn't answer your reader's questions.</p>
 <p>Always think about what your intended readership is looking for before you start writing. This will help you to write something that gets straight to the heart of the matter, and fast. And if you can't think of anything that a reader might want to know about a topic, perhaps you don't really need to write that topic after all?</p>
</section>

<section id="rules">
 <title>Break rules if it makes for better writing</title>
 <p>Dogged adherence to rules can lead to awkward-sounding text. If it makes more sense to say something in a particular way, even if it's <em>technically</em> wrong, you should say it anyway.</p>
 <p>There is a difference <em>bad</em> grammar and <em>not-quite-correct</em> grammar, however. Avoid the former; the rules of grammar are there to help avoid ambiguity and other confusions (even if they're not perfect).</p>
 <p>Likewise, absolute technical correctness is vehemently <em>not</em> the aim of our technical writing. It's fine to abuse terms if doing so would make your text more understandable for the reader.</p>
</section>

</page>