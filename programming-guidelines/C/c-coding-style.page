<page xmlns="http://projectmallard.org/1.0/"
      type="guide" style="task"
      id="c-coding-style">

  <info>
    <link type="guide" xref="index#coding-style"/>

    <credit type="author copyright">
      <name>Federico Mena-Quintero</name>
      <email>federico@gnome.org</email>
      <years>2013</years>
    </credit>
    <credit type="author copyright">
      <name>The GTK+ Team</name>
    </credit>

    <desc>Our guidelines for C code in Gnome</desc>
  </info>

  <title>C Coding Style</title>

  <p>
    This document presents the preferred coding style for C programs
    in Gnome.  While coding style is very much a matter of taste, in
    Gnome we favor a coding style that promotes consistency,
    readability, and maintainability.
  </p>

  <p>
    We present examples of good coding style as well as examples of
    bad style that is not acceptable in Gnome.  Please try to submit
    patches that conform to Gnome's coding style; this indicates that
    you have done your homework to respect the project's goal of
    long-term maintainability.  Patches with Gnome's coding style will
    also be easier to review!
  </p>

  <note>
    <p>
      This document is for C code.  For other languages, check the
      <link xref="index">main page</link> of the Gnome Programming
      Guidelines.
    </p>
  </note>

  <p>
    These guidelines are heavily inspired by GTK's CODING-STYLE
    document, the Linux Kernel's CodingStyle, and the GNU Coding
    Standards.  These are slight variations of each other, with
    particular modifications for each project's particular needs and
    culture, and Gnome's version is no different.
  </p>

  <section id="most-important-rule">
    <title>The single most important rule</title>

    <p>
      The single most important rule when writing code is this:
      <em>check the surrounding code and try to imitate it</em>.
    </p>

    <p>
      As a maintainer it is dismaying to receive a patch that is
      obviously in a different coding style to the surrounding code.
      This is disrespectful, like someone tromping into a spotlessly-clean
      house with muddy shoes.
    </p>

    <p>
      So, whatever this document recommends, if there is already
      written code and you are patching it, keep its current style
      consistent even if it is not your favorite style.
    </p>
  </section>

  <section id="line-width">
    <title>Line Width</title>

    <p>
      Try to use lines of code between 80 and 120 characters long.
      This amount of text is easy to fit in most monitors with a
      decent font size.  Lines longer than that become hard to read,
      and they mean that you should probably restructure your code.
      If you have too many levels of indentation, it means that you
      should fix your code anyway.
    </p>
  </section>

  <section id="indentation">
    <title>Indentation</title>

    <p>
      In general there are two preferred indentation styles for code
      in Gnome.
    </p>

    <list type="ordered">
      <item>
	<p>
	  Linux Kernel style.  This is 8-space indentations, with
	  K&amp;R brace placement:
	</p>

	<code>
for (i = 0; i &lt; num_elements; i++) {
        foo[i] = foo[i] + 42;

        if (foo[i] &lt; 35) {
                printf ("Foo!");
                foo[i]--;
        } else {
                printf ("Bar!");
                foo[i]++;
        }
}</code>
      </item>

      <item>
	<p>
	  GNU style.  Each new level is indented by 2 spaces,
	  braces go on a line by themselves, and they are indented as
	  well.
	</p>

	<code>
for (i = 0; i &lt; num_elements; i++)
  {
    foo[i] = foo[i] + 42;

    if (foo[i] &lt; 35)
      {
        printf ("Foo!");
        foo[i]--;
      }
    else
      {
        printf ("Bar!");
        foo[i]++;
      }
  }</code>
      </item>
    </list>


    <p>
      Both styles have their pros and cons.  The most important things
      is to <em>be consistent</em> with the surrounding code.  For
      example, the GTK+ library, which is Gnome's widget toolkit, is
      written with the GNU style.  Nautilus, Gnome's file manager, is
      written in Linux kernel style.  Both styles are perfectly
      readable and consistent when you get used to them.
    </p>

    <p>
      Your first feeling when having to study or work on a piece of
      code that doesn't have your preferred indentation style may be,
      how shall we put it, gut-wrenching.  You should resist your
      inclination to reindent everything, or to use an inconsistent
      style for your patch.  Remember the first rule:  <em>be
      consistent</em> and respectful of that code's customs, and your
      patches will have a much higher chance of being accepted without
      a lot of arguing about the right indentation style.
    </p>
  </section>

  <section id="tab-characters">
    <title>Tab characters</title>

    <p>
      <em>Do not ever change the size of tabs in your editor</em>;
      leave them as 8 spaces.  Changing the size of tabs means that
      code that you didn't write yourself will be perpetually misaligned.
    </p>

    <p>
      Instead, set the <em>indentation size</em> as appropriate for
      the code you are editing.  You may even be able to tell your
      editor to automatically convert all tabs to 8 spaces, so that
      there is no ambiguity about the intended amount of space.
    </p>
  </section>

  <section id="braces">
    <title>Braces</title>

    <p>
      Curly braces should not be used for single statement blocks:
    </p>

<code>
/* valid */
if (condition)
        single_statement ();
else
        another_single_statement (arg1);</code>

	<p>
	  The "no block for single statements" rule has only four
	  exceptions:
	</p>

	<list type="ordered">
	  <item>
	    <p>
	      If the single statement covers multiple lines, e.g. for functions with
	      many arguments, and it is followed by else or else if:
	    </p>

<code>
/* valid Linux kernel style */
if (condition) {
        a_single_statement_with_many_arguments (some_lengthy_argument,
                                                another_lengthy_argument,
                                                and_another_one,
                                                plus_one);
} else
        another_single_statement (arg1, arg2);

/* valid GNU style */
if (condition)
  {
    a_single_statement_with_many_arguments (some_lengthy_argument,
                                            another_lengthy_argument,
                                            and_another_one,
                                            plus_one);
  }
else
  another_single_statement (arg1, arg2);</code>
          </item>

          <item>
            <p>
              If the condition is composed of many lines:
            </p>

<code>
/* valid Linux kernel style */
if (condition1 ||
    (condition2 &amp;&amp; condition3) ||
    condition4 ||
    (condition5 &amp;&amp; (condition6 || condition7))) {
        a_single_statement ();
}

/* valid GNU style */
if (condition1 ||
    (condition2 &amp;&amp; condition3) ||
    condition4 ||
    (condition5 &amp;&amp; (condition6 || condition7)))
  {
    a_single_statement ();
  }</code>
          </item>

          <item>
            <p>
              Nested if's, in which case the block should be placed on the
              outermost if:
            </p>

<code>
/* valid Linux kernel style */
if (condition) {
        if (another_condition)
                single_statement ();
        else
                another_single_statement ();
}

/* valid GNU style */
if (condition)
  {
    if (another_condition)
      single_statement ();
    else
      another_single_statement ();
  }

/* invalid */
if (condition)
        if (another_condition)
                single_statement ();
        else if (yet_another_condition)
                another_single_statement ();</code>
          </item>

          <item>
            <p>
              In GNU style, if either side of an if-else statement has
              braces, both sides should, to match up indentation:
            </p>

<code>
/* valid GNU style */
if (condition)
  {
    foo ();
    bar ();
  }
else
  {
    baz ();
  }

/* invalid */
if (condition)
  {
    foo ();
    bar ();
  }
else
  baz ();</code>
          </item>
        </list>

        <p>
          In general, new blocks should be placed on a new indentation level,
          like this:
        </p>

        <code>
int retval = 0;

statement_1 ();
statement_2 ();

{
        int var1 = 42;
        gboolean res = FALSE;

        res = statement_3 (var1);

        retval = res ? -1 : 1;
}</code>

        <p>
          While curly braces for function definitions should rest on a
          new line they should not add an indentation level:
        </p>

        <code>
/* valid Linux kernel style*/
static void
my_function (int argument)
{
        do_my_things ();
}

/* valid GNU style*/
static void
my_function (int argument)
{
  do_my_things ();
}

/* invalid */
static void
my_function (int argument) {
        do_my_things ();
}

/* invalid */
static void
my_function (int argument)
  {
    do_my_things ();
  }
        </code>
  </section>

  <section id="conditions">
    <title>Conditions</title>

    <p>
      Do not check boolean values for equality.  The rationale is that
      a "true" value may not be necessarily equal to whatever the
      <code>TRUE</code> macro uses.  For example:
    </p>

    <code>
/* invalid */
if (condition == TRUE)
        do_foo ();

/* valid */
if (another_condition)
        do_bar ();</code>

        <p>
          Even if C handles NULL equality like a boolean, be explicit.
          This makes it easier to port your C code to something like
          C#, where testing against null explicitly is important:
        </p>

        <code>
/* valid */
if (some_pointer == NULL)
        do_blah ();

/* valid */
if (something != NULL)
        do_foo ();

/* invalid */
if (some_other_pointer)
        do_blurp ();</code>

        <!-- FIXME: gtk+/docs/CODING-STYLE mentions where to put
             logical operators in conditiosn split over multiple
             lines.  I (Federico) disagree with this, for a good
             reason. -->

  </section>

  <section id="functions">
    <title>Functions</title>

    <p>
      Functions should be declared by placing the returned value on a
      separate line from the function name:
    </p>

    <code>
void
my_function (void)
{
}
    </code>

    <p>
      The argument list must be broken into a new line for each
      argument, with the argument names right aligned, taking into
      account pointers:
    </p>

    <code>
void
my_function (some_type_t      type,
             another_type_t  *a_pointer,
             double_ptr_t   **double_pointer,
             final_type_t     another_type)
{
}
    </code>

    <p>
      If you use Emacs, you can use <code>M-x align</code> to do this
      kind of alignment automatically.  Just put the point and mark
      around the function's prototype, and invoke that command.
    </p>

    <p>
      The alignment also holds when invoking a function without breaking the
      line length limit:
    </p>

    <code>
align_function_arguments (first_argument,
                          second_argument,
                          third_argument);
    </code>
  </section>

  <section id="whitespace">
    <title>Whitespace</title>

    <p>
      Always put a space before an opening parenthesis but never after:
    </p>

    <code>
/* valid */
if (condition)
        do_my_things ();

/* valid */
switch (condition) {
}

/* invalid */
if(condition)
        do_my_things();

/* invalid */
if ( condition )
        do_my_things ( );
    </code>
  </section>



</page>
