
  <chapter id="menus">
    <title>Menus</title>

<remark> Tear-off menus? (These are controlled by gconf in 2.0, so nothing app developer needs to do?)</remark>
<remark> Menu bar position </remark>
<remark> Menu bar hiding </remark>

    <para>Menus present the whole range of an application's commands to the user, and often a subset of its preferences.  When designing a new application, place common menu items in the same locations as they appear in other applications, as this makes it much easier for the user to learn.</para>
  
    <para>In most applications, only primary windows should have a menubar. <link linkend="utility-windows">Utility windows</link> and <link linkend="dialog-boxes">dialog boxes</link> should be simple enough that their functions can be provided by controls such as buttons placed within the window.</para>

    <para>Occasionally, however, a utility window or dialog is so complex that there would be too many such controls. In this case, you may use a menubar provided that:</para>

    <itemizedlist>
      <listitem><para>the menus follow the same standard layout as described in <xref linkend="standard-menus" /></para></listitem>
      <listitem><para>you do not include a dialog button area or any buttons that dismiss the window, such as <guibutton>OK</guibutton>, <guibutton>Close</guibutton> or <guibutton>Cancel</guibutton>.  Place these commands on the <guimenu>File</guimenu> menu or equivalent instead.</para></listitem>
    </itemizedlist>

	<itemizedlist><title>Guidelines</title>
      <listitem><para>Label menu items with verbs or adjectives, describing commands or properties respectively, according to the rules in <xref linkend="layout-capitalization"/>.</para></listitem>

	<listitem><para>Make a menu item insensitive when its command is unavailable. For example, the <menuchoice><guimenu>Edit</guimenu> <guimenuitem>Copy</guimenuitem></menuchoice> item, which issues the command to copy selected data to the clipboard, should not be activatable when there is no data selected.</para></listitem>

    <listitem><para>Provide an access key for every menu item.  You may use the same access key on different menus in your application, but avoid duplicating access keys on the same menu.  Note that unlike other controls, once a menu is displayed, its access keys may be used by just typing the letter; it is not necessary to press the <keysym>Alt</keysym> key at the same time.</para></listitem>

      <listitem><para>Design your menu structure to avoid more than one level of submenus.  Deep menu hierarchies are harder to memorize and physically difficult to navigate.</para></listitem>

	</itemizedlist>


	<sect1 id="menu-type-menubar">
	  <title>The Menubar</title>

	<figure id="example-menu-bar">
	<title>A typical menubar</title>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="images/application-menubar.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase>A typical application menubar, showing File, Edit, View, Insert, Format, Go, Bookmarks, Tools, Windows and Help menus</phrase>
	  </textobject>
	</mediaobject>
      </figure>

	  <para>The menubar provides a number of drop-down menus. It is visible at all times and is always accessible from the keyboard as well as the mouse, so use it to give access to all commands available in your application.</para>

	  <para>Each item on the menubar is a menu title. Menu titles also appear in drop-down menus with submenus.</para>

	<itemizedlist><title>Guidelines</title>

		<listitem><para>Provide a menubar in each primary application window, containing at least a <guimenu>File</guimenu> and a <guimenu>Help</guimenu> menu.</para></listitem>

      		<listitem><para>Organize menu titles in the standard order&mdash; see <xref linkend="standard-menus" />.</para></listitem>

		 <listitem><para>Do not disable menu titles. Allow the user to explore the menu, even though there might be no available items on it at that time.</para></listitem>

		  <listitem><para>Menu titles on a menubar are single words with their first letter capitalized.  Do not use spaces in menu titles, as this makes them easily-mistaken for two separate menu titles.  Do not use compound words (such as <guimenu>WindowOptions</guimenu>) or hyphens (such as <guimenu>Window-Options</guimenu>) to circumvent this guideline.</para></listitem>

		<listitem><para>Do not provide a mechanism for hiding the menubar, as this may be activated accidentally, resulting in the application being "broken" for some users.  If your users do require this option, provide a button elsewhere in the window (on a toolbar or in a toolbox, for example) that opens the menubar again.</para></listitem>
	
	</itemizedlist>

	</sect1>

   <sect1 id="menu-types">
      <title>Types of Menu</title>


	<sect2 id="menu-type-drop-down">
	  <title>Drop-down Menus</title>
	<figure id="drop-down-menu">
	<title>A typical drop-down menu</title>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="images/generic-view-menu.png" format="PNG"/>
	  </imageobject>
	  <textobject><phrase>Screenshot of a typical drop-down menu</phrase></textobject>
	</mediaobject>
      </figure>

	  <para>A drop-down menu appears when the user clicks on its title in a menubar, or focuses the title and presses <keycap>Return</keycap>.</para>

<!-- CB-Ed/Fig: Define "post," as no-brainer-ish as it may seem, and also add a figure to show what it means.  A simple menu being shown at the user clicking on a menu title on a menubar, or "posted," makes sense.  -->

    <itemizedlist><title>Guidelines</title>

	<listitem><para>Only place items on a menu that relate to that menu's title.</para></listitem>

      <listitem><para>Organize menu items in the standard order&mdash; see <xref linkend="standard-menus" />.  For application-specific items where there is no standard order, arrange in numerical or other logical order (for example, <guimenuitem>50%</guimenuitem>, <guimenuitem>100%</guimenuitem>, <guimenuitem>200%</guimenuitem>), task order (for example, <guimenuitem>Compile</guimenuitem> then <guimenuitem>Debug</guimenuitem>) or by expected frequency of use.</para></listitem>

      <listitem><para>Limit top-level menus to a maximum of about 15 items. <remark>This used to be 20 items, that seemed really high to me. 15 items is already a long menu. Since this is phrased as "about 15 items" applications that really need to fudge can -Seth</remark> If you have any more items than this, consider moving a functionally-related subset of the items into a submenu or a new top-level menu.</para></listitem>

      <listitem><para>Do not add or remove individual menu items while the application is running, make them insensitive instead. Entire menus may be added or removed from the menubar at runtime, however, for example in component-based applications.</para></listitem>

      <listitem><para>Immediately update menu items that are edited directly or indirectly by the user, such as those on the <guisubmenu>Open Recent</guisubmenu> submenu and the <guimenu>Bookmarks</guimenu> menu.</para></listitem>


  <!-- CB-Ed: As in JLFDG AT p. 33, perhaps provide a table of common access keys, or "mnemonics." -->
  <!-- CFB: the keyboard navigation chapter already does so -->

    </itemizedlist>

	</sect2>

	<sect2 id="menu-type-submenu">
	  <title>Submenus</title>

	<figure id="submenu">
	<title>A drop-down menu with a submenu</title>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="images/submenu.png" format="PNG"/>
	  </imageobject>
	  <textobject><phrase>Screenshot of a drop-down menu with a submenu</phrase></textobject>
	</mediaobject>
      </figure>

	  <para>A submenu appears when the user clicks its title, which is indicated by a small arrow symbol beside its label.  You can save space on long menus by grouping related commands onto a single submenu.</para>

	<itemizedlist><title>Guidelines</title>

		<listitem><para>Use submenus sparingly, as they are physically difficult to navigate and make it harder to find and reach the items they contain.</para></listitem>

		<listitem><para>Do not create submenus with fewer than three items, unless the items are added dynamically (for example the <menuchoice><guimenu>File</guimenu><guimenuitem>New Tab</guimenuitem></menuchoice> submenu in <application>gnome-terminal</application>).</para></listitem>

		<listitem><para>Do not nest submenus within submenus.  More than two levels of hierarchy are difficult to memorize and navigate.</para></listitem>
		
	</itemizedlist>

	</sect2>

<!-- CB-Ed/Fig: In JLFDG AT, p. 41, the Most Recently Used (MRU) list is recommended to contain no more than 10 items. Add a figure here, with callouts to point out this rule, among others, if any are developed.  --> 

	<sect2 id="menu-type-popup">
	  <title>Popup Menus</title>

	<figure id="popup-menu">
	<title>A popup menu for a mail folder</title>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="images/popup-menu.png" format="PNG"/>
	  </imageobject>
	  <textobject><phrase>Screenshot of a popup menu for a mail folder, listing the actions that can be performed on that folder</phrase></textobject>
	</mediaobject>
      </figure>

	<para>Popup menus provide shortcuts to those menu items that are applicable only to the currently selected object.  As such, they are sometimes known as &quot;context menus&quot; or &quot;shortcut menus&quot;.  A popup menu is shown when the user right-clicks on an object, or selects the object and presses <keycombo><keycap>Shift</keycap><keycap>F10</keycap></keycombo>.</para>

	<para>Be aware that popup menus are used primarily by intermediate and advanced users.  Even some users who have used graphical desktops for many years do not know about popup menus until somebody demonstrates them.</para>

	<itemizedlist><title>Guidelines</title>
		<listitem><para>Provide a popup menu for every object, selectable part, and text input target such as entry fields.</para></listitem>
		<listitem><para>Provide an access key for each item.  However, to enhance their spatial efficency and readability, do not show keyboard shortcuts in popup menus.</para></listitem>
		
		<listitem><para>Since the user may not be aware of their presence, do not provide functions that are only accessible from popup menus unless you are confident that your target users will know how to use them</para>
		<remark>But see http://bugzilla.mozilla.org/show_bug.cgi?id=34357</remark>
		</listitem>

		<listitem><para>Order items on a popup menu as follows:</para>
		<itemizedlist>
			<listitem><para>default action for object (same as double-clicking the object)</para></listitem>
			<listitem><para>other commands in expected frequency-of-use order</para></listitem>
			<listitem><para>transfer commands such as <command>Cut</command>, <command>Copy</command>, and <command>Paste</command></para></listitem>
			<listitem><para><guimenuitem>Input Methods</guimenuitem>, where applicable</para></listitem>
		</itemizedlist>
		</listitem>

	 	<listitem><para>Popup menus need to be as simple as possible to maximize their efficiency.  Do not place more than about ten items on a popup menu, and don't use submenus.</para></listitem>

	</itemizedlist>

<!-- CB-Ed: In the previous note, define the Input Methods menu and why it is an exception, for scalability reasons (other items may fall into the same category).  It also sounds like a pretty low-level command; should this be exposed to the user? -->
<!-- SN-Ed: No, it should not be exposed to the user. I'm not really sure what possessed the GTK guys to put this in every right click menu for text boxes. I suppose in this case having it be a submenu is good (if they insist on it existing) because it makes it maximally invisible -->

	</sect2>
	</sect1>

	<sect1 id="menu-design">
	<title>Designing a Menu</title>

	<sect2 id="menu-grouping">
	  <title>Grouping Menu Items</title>

	<figure id="menu-separators">
	<title>Items grouped on a menu with separators</title>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="images/generic-view-menu.png" format="PNG"/>
	  </imageobject>
	  <textobject><phrase>Screenshot of a menu divided into five logical groups with menu separators</phrase></textobject>
	</mediaobject>
      </figure>

	  <para>Menu separators are the horizontal dividing lines that visually separate groups of related items on a drop-down menu, submenu, or popup menu.  For example, the separators in <xref linkend="menu-separators"/> divide the menu into five functionally-related groups.  Good use of separators helps to &quot;chunk&quot; the information on a menu and make it easier to scan and memorize.</para>
	  
	  <itemizedlist><title>Guidelines</title>

	    <listitem><para>The best size for a group is around 2-5 items.  Single-item groups are best placed at the top or bottom of a menu, otherwise try to group them with other single items on the same menu of the same type.</para></listitem>

	    <listitem><para>Order items within a group logically, numerically, in task order or by expected frequency of use, as appropriate.</para></listitem>

	    <listitem><para>Only place one type of menu item in each group&mdash; <link linkend="menu-item-type-command">command</link>, <link linkend="menu-item-type-mutable">mutable</link>, <link linkend="menu-item-type-check">checkbox</link> or <link linkend="menu-item-type-radio">radio button</link>.  For example, do not place commands (e.g. <menuchoice><guimenu>View</guimenu><guimenuitem>Reload</guimenuitem></menuchoice>) and settings (e.g. <menuchoice><guimenu>View</guimenu><guimenuitem>Toolbar</guimenuitem></menuchoice>) in the same group.</para></listitem>

	    </itemizedlist>	  
	</sect2>

	<sect2 id="menu-item-types">
	<title>Types of menu item</title>
	
	<sect3 id="menu-item-type-command">
	  <title>Command Items</title>

	<figure id="command-items-figure"><title>A group of command items on a menu</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/command-menu.png" format="PNG"/>
	    </imageobject>
	    <textobject>
		<phrase>Screenshot of a group on a menu containing only command items: Save, Save As, Save All, and Revert</phrase></textobject>
	  </mediaobject>
	</figure>

	  <para>Command items are menu items that initiate a command or perform an action, such as <guimenuitem>Save</guimenuitem>, <guimenuitem>Print</guimenuitem> or <guimenuitem>Quit</guimenuitem>. They may act on the currently active document in a document based application, or on the application itself.</para>

	<itemizedlist><title>Guidelines</title>

		<listitem><para>Provide a keyboard shortcut for standard or frequently used command items.  See <xref linkend="shortcuts"/> for more information on choosing shortcut keys.</para></listitem>
	  <remark>
	    Should we reserve <keysym>Alt</keysym> as a modifier for window manager operations? Should we state this here?
	  </remark>

	  <!-- <para>Shortcuts consist of the <keysym>Control</keysym> key and an alphanumeric key, or of one of the keys <keysym>F1</keysym>-<keysym>F12</keysym>, <keysym>Insert</keysym>, <keysym>Delete</keysym>, <keysym>Home</keysym>, <keysym>End</keysym>, <keysym>Page Up</keysym> or <keysym>Page Down</keysym>. The <keysym>Shift</keysym> key may be used as an additional modifier for commands which are related to or the opposite of the command accessed without the <keysym>Shift</keysym> key.  See <xref linkend="shortcuts"/> for more information.</para> -->
	  
	<listitem><para>Do not remove command items from the menu when they are unavailable, make them insensitive instead.  This allows the user to infer what functionality the application provides even if it is not currently available, and keeping the menu structure static makes it easier to mememorize.</para></listitem>

	  <listitem><para>Label the menu item with a trailing ellipsis ("...")  only if the command requires further input from the user before it can be performed. Do not add an ellipsis to items that only present a confirmation dialog (such as <guimenuitem>Delete</guimenuitem>), or that do not <emphasis>require</emphasis> further input (such as <guimenuitem>Properties</guimenuitem> or <guimenuitem>About</guimenuitem>).</para></listitem>

	</itemizedlist>

<!-- CB-Ed/Fig: Figure would be nice here. -->
	</sect3>

	<sect3 id="menu-item-type-mutable">
	  <title>Mutable Command Items</title>
	  <para>A mutable command item changes its label when selected.  For example, <menuchoice><guimenu>View</guimenu><guimenuitem>Reload</guimenuitem></menuchoice> in a browser may change to <guimenuitem>Stop</guimenuitem> to allow the user to interrupt the operation if it is taking a long time.</para>

	  <para>Note that mutable menu items can be problematic because the user never sees the menu item changing, so it is not obvious that a different function has become available. </para>

	<itemizedlist><title>Guidelines</title>
		<listitem><para>If your mutable menu items are <link linkend="menu-item-type-command">command items</link>, and you have sufficient space on your menu, consider providing two adjacent menu items for the commands instead.  Then make the items sensitive or insensitive as the situation demands.  This also makes it easier for the user to tell when different shortcuts are available for each of the commands, for example <keycombo><keycap>Ctrl</keycap><keycap>R</keycap></keycombo> for <guimenuitem>Reload</guimenuitem>, and <keycap>Esc</keycap> for <guimenuitem>Stop</guimenuitem>.</para></listitem>

		<listitem><para>Do not use mutable menu items to toggle a two-state setting (for example, <guimenuitem>Show Toolbar</guimenuitem> and <guimenuitem>Hide Toolbar</guimenuitem>.  Present such items as a single <link linkend="menu-item-type-check">checkbox item</link> instead.</para></listitem>
	</itemizedlist>

	</sect3>
	<sect3 id="menu-item-type-check">
	  <title>Checkbox Items</title>

	<figure id="checkbox-items-figure"><title>A group of checkbox items on a menu</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/checkbox-menu.png" format="PNG"/>
	    </imageobject>
	    <textobject>
		<phrase>Screenshot of group on a View menu containing three checkbox items: toolbar, statusbar and fullscreen</phrase></textobject>
	  </mediaobject>
	</figure>

	  <para>A checkbox menu item shows the current state of a two-state setting, and allows the user to toggle it by selecting the menu item.</para>

	<itemizedlist><title>Guidelines</title>
	  
	  	<listitem><para>Use a checkbox menu item only when it is obvious from the label what the set and unset states mean.  This usually means that the two states are logical or natural opposites, such as &quot;on&quot; and &quot;off&quot;.  If this is not the case, use two radio button items instead.</para></listitem>
		  <listitem><para>Never change the label of a checkbox menu item in response to the user selecting the item.</para></listitem>

	</itemizedlist>

	</sect3>
	<sect3 id="menu-item-type-radio">
	  <title>Radio Button Items</title>

	<figure id="radiobutton-items-figure"><title>A group of radiobutton items on a menu</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/radiobutton-menu.png" format="PNG"/>
	    </imageobject>
	    <textobject>
		<phrase>Screenshot of group on a menu containing two radiobutton items: view as icons, and view as list</phrase></textobject>
	  </mediaobject>
	</figure>

	  <para>Radio button menu items show which of two or more mutually-exclusive settings are currently selected, and allows the user to choose a different setting by selecting its menu item.</para>

	<itemizedlist>

	  	<listitem><para>If you need to offer a choice of two mutually-exclusive settings to the user,  use a group of two radio button items instead of a single checkbox menu item if the settings are not clearly opposites.  For example, represent <guimenuitem>View as Icons</guimenuitem> and <guimenu>View as List</guimenu> as two radio button items.</para></listitem>

	  <listitem><para>Never change the label of a radio button menu item in response to the user selecting or deselecting the item.</para></listitem>

	</itemizedlist>

<remark>
	Adam notes that this whole section can be a significant source of
	nastiness in a UI. We need explicit recommendations here on how to
	represent different states of a toggled menu item via icons in the UI.
	We also need to make recommendations to avoid some common mistakes,
	including:
	
	* Confusing menu items acting as radio buttons in a group with menu
          items acting as checkboxes.
	* Ambiguous names for checkbox/toggle menu items which make it
	  difficult to establish the current system state by looking at
	  the menu.
</remark>

	</sect3>
	
      </sect2>

    </sect1>

    <sect1 id="standard-menus">
      <title>Standard Menus</title>
      <para>The primary application window has some standard menus and a standard menubar order. Not every menu is required, but the order of the menubar and of the individual menus should be preserved. Place application-specific menus after the <guimenu>Format</guimenu> menu and before the <guimenu>Go</guimenu> menu; {modify them this way, etc. ...}</para>
      <remark>
	What is the best way to present menus given the known variants? Multiple shots? Segements?
	Possible convention guideline: If the menu or submenu would contain only two items, rethink the interface.
      </remark>
      <figure id="generic-menu-bar">
	<title>A generic menubar</title>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="images/application-menubar.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <simplelist type="horiz" columns="9">
	      <member><guimenu><accel>F</accel>ile</guimenu></member>
	      <member><guimenu><accel>E</accel>dit</guimenu></member>
	      <member><guimenu><accel>V</accel>iew</guimenu></member>
	      <member><guimenu><accel>I</accel>nsert</guimenu></member>
	      <member><guimenu>For<accel>m</accel>at</guimenu></member>
	      <member><guimenu><accel>G</accel>o</guimenu></member>
	      <member><guimenu><accel>B</accel>ookmarks</guimenu></member>
	      <member><guimenu><accel>T</accel>ools</guimenu></member>
	      <member><guimenu><accel>W</accel>indows</guimenu></member>
	      <member><guimenu><accel>H</accel>elp</guimenu></member>
	    </simplelist>
	  </textobject>
	</mediaobject>
      </figure>
      <sect2 id="the-file-menu">
	<title>File</title>
        <remark>I think we should move to a MacOS/X concept of having an "AppName" menu that contains things like preferences, about, quit, etc. -Seth</remark>

	<figure id="generic-file-menu"><title>A generic File menu</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/file-menu.png" format="PNG"/>
	    </imageobject>
	    <textobject>
<literallayout>
<guimenu>File</guimenu>
<guimenuitem><accel>N</accel>ew                  Ctrl+N</guimenuitem>
<guimenuitem><accel>O</accel>pen...              Ctrl+O</guimenuitem>
<guimenuitem>Recent <accel>F</accel>iles              &gt; </guimenuitem>
---
<guimenuitem><accel>S</accel>ave                 Ctrl+S</guimenuitem>
<guimenuitem>Save <accel>A</accel>s...     Shift+Ctrl+S</guimenuitem>
<guimenuitem>Sa<accel>v</accel>e Copy...               </guimenuitem>
<guimenuitem><accel>R</accel>evert                     </guimenuitem>
---
<guimenuitem>Page Set<accel>u</accel>p                 </guimenuitem>
<guimenuitem>Print Previe<accel>w</accel>  Shift+Ctrl+P</guimenuitem>
<guimenuitem><accel>P</accel>rint...             Ctrl+P</guimenuitem>
<guimenuitem><accel>M</accel>ail...              Ctrl+M</guimenuitem>
---
<guimenuitem>Proper<accel>t</accel>ies                 </guimenuitem>
---
<guimenuitem><accel>C</accel>lose                Alt+F4</guimenuitem>
<guimenuitem><accel>Q</accel>uit                 Ctrl+Q</guimenuitem>
</literallayout>
	    </textobject>
	  </mediaobject>
	</figure>

        <para>The <guimenu>File</guimenu> menu was originally the location for commands that operate on the current document. It is the left-most item in the menubar because of its importance and frequency of use, and because it is a relevant menu in a great number of applications. Because most applications already had this menu, and because the distinction between closing documents and closing windows became blurred, the <guimenu>File</guimenu> menu has also become the standard location for <guimenuitem>Quit</guimenuitem>.</para>

        <para>If your application does not operate on documents, use a substitute menu with a more appropriate name.  For example, many games should have a <guimenu>Game</guimenu> instead of a <guimenu>File</guimenu> menu.  You should still place the <guimenuitem>Quit</guimenuitem> menu item as the last item on this menu, however.</para>

	<sect3>
	  <title>Creation and Opening Operations</title>
<remark><para>Adam noted in the last review that we don't make any suggestions for applications  that do not edit document/files. In an OOUI, the Game
menu would have items such as (modulo phraeseology) Open New Game, Open Game Settings, High Scores.</para><para>For non-game UI there would be at the very least, Open as ... and Open Settings.</para></remark>

	<table frame="all"> 
	  <title>Creation and Opening operation menu items </title> 

	  <tgroup cols="3" align="left">
	    <thead> 
	      <row> 
		<entry>Label</entry> 
		<entry>Shortcut</entry>
		<entry>Description</entry>
		</row>
	      </thead>
	    <tbody valign="top">
	      <row>
	      	<entry><accel>N</accel>ew</entry>
	       <entry><keycombo><keycap>Ctrl</keycap><keycap>N</keycap></keycombo></entry>
		<entry>Creates a new document. Open a new primary window, with the title <replaceable>Document name</replaceable>, containing a blank document.  How this window is displayed, e.g. as a tab or a separate window, is up to the window manager.
			<para>If your application can create a number of different types of document, you can make the <guimenuitem><accel>N</accel>ew</guimenuitem> item a submenu, containing a menu item for each type. Label these items <guimenuitem>New <replaceable>document type</replaceable></guimenuitem>, make the first entry in the submenu the most commonly used document type, and give it the <keycombo><keycap>Ctrl</keycap><keycap>N</keycap></keycombo> shortcut.</para>
			<para>Note: A blank document will not necessarily be completely blank. For example, a document created from a template may already contain some data.<!-- FIXME: More on templates --></para>
		</entry>
		</row>

		<row>
		      <entry><accel>O</accel>pen...</entry>
	      		<entry><keycombo><keycap>Ctrl</keycap><keycap>O</keycap></keycombo></entry>
			<entry>Opens an existing document in a new window. Present the user with a standard file open dialog <!-- Ref this elsewhere --> from which they can choose an existing file. If the user's choice is already open in the application, raise that window instead of opening a new one. <!-- If the current window contains a blank untitled document then replace it with the selected file. Otherwise open the file in a new window. -->
		<remark><para>If your application provides more than two ways to open an object, place all the Open ... items in a submenu, including Recent Files. This keeps the menu less cluttered and in some ways presents a better inteface as the list of recent files is presented in the same menu, and near, the regular open commands. Users hate having to go to the bottom of the file menu to open recent files; the cause of this is that, in the workplace, it is far more common to sort out other peoples already written and saved crap than it is to have to write your own. Most of the users of office application, surveyed in both card sorts and online presentations of speculative menus, do not want or do not even notice when the New... items are absent.</para>
		  <para>Problem to be solved. It may be desirable to open a second read-only view of the same document. How should this be provided? Non-OOUI are particularly nasty in this regard, as in many others. A "Clone Window" command seems quite nasty.</para>
		  <para>As I noted in the first review, the blank window should be kept available; in an OOUI this is a more obvious a way of working.</para>
		</remark>
			</entry>
		</row>

	  <!-- I think this is totally broken, I'm moving back to having recent files on the main menu itself. -Seth
		<row>
			<entry>Recent Files</entry>
			<entry>none</entry>	
			<entry>Allows the user to open a recently used file. The application should maintain a history of recently opened documents and these should be accessible via a submenu. Selecting one of these files should open that file in the same way that <guimenuitem><accel>O</accel>pen</guimenuitem> does.
			<para>Provide at least ten of the most recent files in the menu; fewer only according to user preferences or absence of recent files.</para>
			</entry>
		</row>
	  -->
		</tbody>
		</tgroup>
	</table>
	</sect3>


	<sect3>
	  <title>Saved State Operations</title>
	    <remark>This section needs a review with an eye to what can actually be done programmatically.</remark>

	<table>
	  <title>Saved State Operation menu items</title>
	  <tgroup cols="3" align="left">
	    <thead> 
	      <row> 
		<entry>Label</entry> 
		<entry>Shortcut</entry>
		<entry>Description</entry>
		</row>
	      </thead>
	    <tbody valign="top">
	      <row>
		<entry><accel>S</accel>ave</entry>
		<entry><keycombo><keycap>Ctrl</keycap><keycap>S</keycap></keycombo></entry>
		<entry>Saves the document with its current filename. If the document already has a filename associated with it, save the document immediately without any further interaction from the user. If there are any additional options involved in saving a file (eg. DOS or UNIX-style line endings in a text file), use the same values as the last time the document was saved.
		<para>If the document has no associated filename, the action should be the same as that of <guimenuitem>Save As</guimenuitem>.</para>
		</entry>
		</row>

		<row>
		      <entry>Save <accel>A</accel>s...</entry>
	      		<entry><keycombo><keycap>Shift</keycap><keycap>Ctrl</keycap><keycap>S</keycap></keycombo></entry>
			<entry>Saves the document with a new filename. Present the user with the standard Save As dialog, and save the file with the chosen file name. <!-- FIXME: errors, additional information--></entry>

		</row>
		<row>
	      		<entry>S<accel>a</accel>ve a Copy...</entry>
	      		<entry>None</entry>
			<entry>Prompts the user to enter a filename, with which a copy of the document is then saved.  Do not alter either the view or the filename of the original document.  All subsequent changes are still made to the original document until the user specifies otherwise, for example by choosing the <guimenuitem>Save As</guimenuitem> command.
		<para> Like the <guimenuitem>Save As</guimenuitem> dialog, the <guimenuitem>Save a Copy</guimenuitem> dialog may present different ways to save the data. For example, an image may be saved in a native format or as a PNG.</para></entry>
	      </row>

	    <row>
	      	<entry><accel>R</accel>evert</entry>
	      <entry>None</entry>
		<entry>Reverts the document to the last saved state. Present the user with a warning that all changes will be lost, and offer the option of cancelling before reloading the file.</entry>

		</row>

		<row>
		      <entry>Save <accel>V</accel>ersion...</entry>
	      		<entry>None</entry>
			<entry>An alternative to the <guimenuitem>Save Copy</guimenuitem> command.  Only use this item in conjunction with the <guimenuitem>Restore Version</guimenuitem> command.</entry>
	      </row>

		<row>
		      <entry>R<accel>e</accel>store Version...</entry>
	      		<entry>None</entry>
			<entry>Prompts the user for a version of the current document to be restored. Present the user with with a warning that all changes will be lost, and offer the option of cancelling before restoring the version. Only use this item in conjunction with the <guimenuitem>Save Version</guimenuitem> command.</entry>
		</row>
	
		<row>
		      <entry><accel>V</accel>ersions...</entry>
	      		<entry>None</entry>
			<entry>An alternative to the <guimenuitem>Save Version</guimenuitem> and <guimenuitem>Restore Version</guimenuitem> commands. Use this when more utilities, such as a diff, are available.</entry>
	      </row>

		</tbody>
		</tgroup>

	</table>
	</sect3>

	<sect3>
	  <title>Export Operations</title>
		  <remark>All of these items, (Print, Send . . . ) are export or save operations, to keep a semblance of a sane order of operations, the order of the items should follow the order of locality. Ergo, Save Print Send - local (disk), local or remote (printer), remote (someone else)</remark>

	<table>
	  <title>Export Operation menu items</title>
	  <tgroup cols="3" align="left">
	    <thead> 
	      <row> 
		<entry>Label</entry> 
		<entry>Shortcut</entry>
		<entry>Description</entry>
		</row>
	      </thead>
	    <tbody valign="top">
	      <row>
	      	<entry>Page Set<accel>u</accel>p</entry>
		<entry>None</entry>
	      	<entry>Allows the user to control print-related settings. Present the user with a dialog allowing the user to set such options as portrait or landscape format, margins, and so on. <remark>We should have a standard dialog for this.</remark></entry>
	      </row>

		<row>
		      <entry>Print Previe<accel>w</accel></entry>
	      		<entry><keycombo><keycap>Shift</keycap><keycap>Ctrl</keycap><keycap>P</keycap></keycombo></entry>
			<entry>Shows the user what the printed document will look like. Present a new window containing an accruate represenation of the appearance of the document as it would be printed.  The libgnomeprintui library provides a standard Print Preview window that you should use if possible.</entry>
		</row>

	    <row>
	    	<entry><accel>P</accel>rint...</entry>
		<entry><keycombo><keycap>Ctrl</keycap><keycap>P</keycap></keycombo></entry>
	        <entry>Prints the current document. Present the user with a dialog allowing them to set options like the page range to be printed, the printer to be used, and so on. The dialog should contain a button marked <guibutton>Print</guibutton> which should start the actual printing and close the dialog.  The libgnomeprintui library provides a standard Print dialog that you should use if possible.</entry>
	    </row>

	    <row>
	      <entry>S<accel>e</accel>nd To...</entry>
		<entry><keycombo><keycap>Ctrl</keycap><keycap>M</keycap></keycombo></entry>
	      <entry>Provides the user a means to attach or send the current document as an email or email attachment <!-- (launch $MAILER -a $ATTACHMENT)-->, depending on its format.
		<para>You may provide more than one <guimenuitem>Send</guimenuitem> depending on which options are available. If there are more than two such items, move them into a submenu. For example, if just the commands <guimenuitem>Send by Email</guimenuitem> and <guimenuitem>Send by Fax</guimenuitem> were available, those could be left on the top-level menu  If there was a third option, such as <guimenuitem>Send by FTP</guimenuitem>, then you would place all the options in a <guimenuitem>Send</guimenuitem> submenu.</para>
	      </entry>
	    </row>
	</tbody>
	</tgroup>
	</table>
	</sect3>
	
	<sect3>
	  <title>Closing Operations</title>
	<table>
	  <title>Closing Operation menu items</title>
	  <tgroup cols="3" align="left">
	    <thead> 
	      <row> 
		<entry>Label</entry> 
		<entry>Shortcut</entry>
		<entry>Description</entry>
		</row>
	      </thead>
	    <tbody valign="top">
	      <row>
		<entry><accel>C</accel>lose</entry>
		<entry><keycombo><keycap>Ctrl</keycap><keycap>W</keycap></keycombo></entry>
	        <entry>Closes the current document. If it has unsaved changes, present the user with a <link linkend="alerts-confirmation">confirmation alert</link> giving the option to save changes, discard the changes, or cancel the action without closing or saving the document.
		<para>If the window you are closing is the last open document in the application, the correct action depends on your application type:</para>
		<itemizedlist>
			<listitem>Single document interface: close the application</listitem>
			<listitem>Controlled single document interface: leave only the control window open</listitem>
			<listitem>Multiple document interface: <remark>what should we do here?  Close the current document, and open a new document window with a blank, untitled document?</remark></listitem>
		</itemizedlist>		
		  <remark>As mentioned on the usability list, Control+W is an Emacs shortcut for Cut. This has already proven deleterious for some users so we should consider dropping the shortcut.  But see also <ulink url="http://bugzilla.gnome.org/show_bug.cgi?id=76761">http://bugzilla.gnome.org/show_bug.cgi?id=76761</ulink></remark>
	      </entry>
	    </row>
	    
	    <row>
	      <entry><accel>Q</accel>uit</entry>
		<entry><keycombo><keycap>Ctrl</keycap><keycap>Q</keycap></keycombo></entry>
	      <entry>Closes the application. If there are unsaved changes in any open documents, present the user with a <link linkend="alerts-confirmation">confirmation alert</link> listing those documents and giving the option to save all, discard all, or cancel. If there are no unsaved changes, close the application immediately without presenting any further messages or dialogs.  
		  <remark>Kathy had suggested not providing a shortcut key to Quit. I can find no discussion of this. (And I think it should go away.)</remark>
	      </entry>
	    </row>
	  </tbody>
	</tgroup>
	</table>
	</sect3>
	
      </sect2>
      <sect2 id="menu-standard-edit">
	<title>Edit</title>
	<figure id="generic-edit-menu">
	  <title>A generic Edit menu</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/application-edit-menu.png" format="PNG"/>
	    </imageobject>
	    <textobject>
<literallayout class="monospaced">
<guimenu><accel>E</accel>dit</guimenu>
<guimenuitem><accel>U</accel>ndo                 Ctrl+Z</guimenuitem>
<guimenuitem><accel>R</accel>edo           Shift+Ctrl+Z</guimenuitem>
-
<guimenuitem>Cu<accel>t</accel>                  Ctrl+X</guimenuitem>
<guimenuitem><accel>C</accel>opy                 Ctrl+C</guimenuitem>
<guimenuitem><accel>P</accel>aste                Ctrl+V</guimenuitem>
<guimenuitem><accel>D</accel>elete               Del</guimenuitem>
<guimenuitem><accel>S</accel>elect All           Ctrl+A</guimenuitem>
<guimenuitem>Dese<accel>l</accel>ect All   Shift+Ctrl+A</guimenuitem>
-
<guimenuitem><accel>F</accel>ind                 Ctrl+F</guimenuitem>
<guimenuitem>Find Ne<accel>x</accel>t            Ctrl+G</guimenuitem>
<guimenuitem>Find Pre<accel>v</accel>ious  Shift+Ctrl+G</guimenuitem>
<guimenuitem>R<accel>e</accel>place              Ctrl+R</guimenuitem>
-
<guimenuitem>Prefere<accel>n</accel>ces...</guimenuitem>
</literallayout>
	    </textobject>
	  </mediaobject>
	</figure>
	<para>The <guimenu>Edit</guimenu> menu contains items relating to editing the document, clipboard handling, selection and searching and replacing. {. . . and the application Preferences item}</para>

	<sect3>
	  <title>Modification History</title>
	  <para>Document-editing applications are recommended to maintain a history of modifications to a document and the state of the document between each action. The Undo and Redo commands are used to move through this history. The <guimenuitem>Undo</guimenuitem> and <guimenuitem>Redo</guimenuitem> items on the menu include the name of the action they will undo or redo (NB: not currently easy to do in gtk). They are always be separate menu items with separate keyboard shortcuts, even if the application is capable of only one undo level.</para>

	<table frame="all"> 
	  <title>Modification History menu items </title> 

	  <tgroup cols="3" align="left">
	    <thead> 
	      <row> 
		<entry>Label</entry> 
		<entry>Shortcut</entry>
		<entry>Description</entry>
		</row>
	      </thead>
	    <tbody valign="top">
	      <row>
	  	<entry><accel>U</accel>ndo <replaceable>action</replaceable></entry>
	       <entry><keycombo><keycap>Ctrl</keycap><keycap>Z</keycap></keycombo></entry>
		<entry>Undoes the previous action in the undo history list. Revert the document to its state before the previous action was performed.</entry>
	      </row>

		<row>
	      		<entry><accel>R</accel>edo <replaceable>action</replaceable></entry>
			<entry><keycombo><keycap>Shift</keycap><keycap>Ctrl</keycap><keycap>Z</keycap></keycombo></entry>
	      		<entry>Performs the next action in the undo history list, after the user has moved backwards through the list with the <guimenuitem>Undo</guimenuitem> command.  Move the user one step forwards again, restoring the document to the state it was in after that action was originally performed.</entry>
	      </row>
		</tbody>
		</tgroup>
	</table>
	</sect3>

	<sect3>
	  <title>Manipulating Selected Data</title>

	<table frame="all"> 
	  <title>Selected Data Manipulation menu items </title> 

	  <tgroup cols="3" align="left">
	    <thead> 
	      <row> 
		<entry>Label</entry> 
		<entry>Shortcut</entry>
		<entry>Description</entry>
		</row>
	      </thead>
	    <tbody valign="top">
	      <row>
		<entry>Cu<accel>t</accel></entry>
	      	<entry><keycombo><keycap>Ctrl</keycap><keycap>X</keycap></keycombo></entry>
		<entry>Removes the selected content and places it onto the clipboard. Visually, remove the content from the document in the same manner as <guimenuitem><accel>D</accel>elete</guimenuitem>.</entry>
	      </row>

		<row>
	    		<entry><accel>C</accel>opy</entry>
	      		<entry><keycombo><keycap>Ctrl</keycap><keycap>C</keycap></keycombo></entry>
			<entry>Copies the selected content onto the clipboard.</entry>
	      </row>
	    
	    <row>
		<entry><accel>P</accel>aste</entry>
	      <entry><keycombo><keycap>Ctrl</keycap><keycap>V</keycap></keycombo></entry>
		<entry>Inserts the contents of the clipboard into the document.  If there is no current selection, use the caret as the insertion point.  If there is a current selection, replace it with the clipboard contents.</entry>
	    </row>
	    
		<row>
			<entry><accel>D</accel>elete</entry>
		      <entry><keycap>Delete</keycap></entry>
			<entry>Removes the selected content without placing it on the clipboard.
		      <remark>Should Delete be provided on a menu? The command is as obvious as using the arrow keys to move about.</remark></entry>
	      </row>

		<row>
		      <entry>Select <accel>A</accel>ll</entry>
	      		<entry><keycombo><keycap>Ctrl</keycap><keycap>A</keycap></keycombo></entry>
			<entry>Selects all content in the current document.</entry>
	    	</row>
	    
		<row>
		  <entry><accel>D</accel>eselect All</entry>
	      	  <entry><keycombo><keycap>Shift</keycap><keycap>Ctrl</keycap><keycap>A</keycap></keycombo></entry>
		<entry>Deselects all content in the current document. Only provide this item in those rare situations when no other method of undoing selection is possible or apparent to the user.  For example, in complex graphics applications where selection and deselection is not usually possible by using the cursor keys.</entry>
	      </row>

	    </tbody>
	  </tgroup>
	 </table>
	</sect3>

	<sect3>
	  <title>Searching and Replacing</title>

	<table frame="all"> 
	  <title>Searching and Replacing menu items </title> 

	  <tgroup cols="3" align="left">
	    <thead> 
	      <row> 
		<entry>Label</entry> 
		<entry>Shortcut</entry>
		<entry>Description</entry>
		</row>
	      </thead>
	    <tbody valign="top">
	      <row>
	      <entry>Find</entry>
	      <entry><keycombo><keycap>Ctrl</keycap><keycap>F</keycap></keycombo></entry>
		<entry>Opens a window or dialog allowing the user to search for specific content in the current document, highlighting each match in-place.
		<para>If the command allows the user to search for content in places other than the current document, for example other open documents, other documents on disk, or a remote network location, label this item <guimenuitem>Search</guimenuitem> instead of <guimenuitem>Find</guimenuitem>.</para></entry>
	      </row>

	    <row>
	      <entry>Find Ne<accel>x</accel>t</entry>
	      <entry><keycombo><keycap>Ctrl</keycap><keycap>G</keycap></keycombo></entry>
	      <entry>Selects the next instance of the last Find term in the current document.  <remark>What to do if there is no next instance?  Disable the menu item, which could be confusing, or pop up an annoying alert saying 'no matches found'?</remark></entry>
	      </row>

		<row>
		      <entry>Find Pre<accel>v</accel>ious</entry>
	      		<entry><keycombo><keycap>Shift</keycap><keycap>Ctrl</keycap><keycap>G</keycap></keycombo></entry>
			<entry>Selects the previous instance of the last Find term in the current document.</entry>
	      </row>

		<row>
		      <entry><accel>R</accel>eplace...</entry>
	      		<entry><keycombo><keycap>Ctrl</keycap><keycap>R</keycap></keycombo></entry>
			<entry>Opens a window or dialog allowing the user to search for specific content in the current document, and replace each occurrence with new content. 	    
		 	<remark>Replace is not always descriptive of what the user may do with the utility window. Formatting a section is also a possibility. Ideally, these would all be merged into a simple utility window</remark>
		</entry>
	      </row>
		</tbody>
		</tgroup>
	</table>
	</sect3>

	<sect3>
	  <title>User Preferences</title>
	  <para>A user preferences dialog allows the user to change preferences for the whole application (in all its instances). <!-- or utility window? --></para>

	<table>
	<title>User Preferences menu items</title>
	 <tgroup cols="3" align="left">
	    <thead> 
	      <row> 
		<entry>Label</entry> 
		<entry>Shortcut</entry>
		<entry>Description</entry>
		</row>
	      </thead>
	    <tbody valign="top">
	      <row>
	 	      <entry>Prefere<accel>n</accel>ces</entry>
	      		<entry>None</entry>
			<entry>Opens a <link linkend="preference-windows">preferences window</link> allowing the user to change preferences for the whole application.  Changes will apply to all running and subsequent instances of the application.</entry>
		</row>
		</tbody>
		</tgroup>
	</table>
	</sect3>

      </sect2>
      <sect2 id="menu-standard-view">
	<title>View</title>
	<figure id="generic-view-menu">
	  <title>A generic View menu</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/generic-view-menu.png" format="PNG"/>
	    </imageobject>
	    <textobject>
	      <literallayout class="monospaced">
<guimenu><accel>V</accel>iew</guimenu><!-- FIXME -->
	      </literallayout>
	    </textobject>
	  </mediaobject>
	</figure>

	<para>The <guimenu>View</guimenu> menu only contains items that affect the user's view of the current document.  Do not place any items on the <guimenu>View</guimenu> menu that affect the the content of the current document.</para>

	<sect3>
	<title>Window Decorations</title>
	<table>
	<title>Window Decoration menu items</title>
	 <tgroup cols="3" align="left">
	    <thead> 
	      <row> 
		<entry>Label</entry> 
		<entry>Shortcut</entry>
		<entry>Description</entry>
		</row>
	      </thead>
	    <tbody valign="top">
	      <row>
	 	      <entry><accel>T</accel>oolbar</entry>
	      		<entry>None</entry>
			<entry>Shows or hides the application's toolbar.  This is a <link linkend="menu-item-type-check">checkbox menu item</link>. Include this item in every application that has a single toolbar.  See <xref linkend="toolbar-controlling-appearance"/> for information on how to deal with multiple toolbars.</entry>
		</row>

		<row>
			<entry><accel>S</accel>tatusbar</entry>
			<entry>None</entry>
			<entry>Shows or hides the application's statusbar.  This is a <link linkend="menu-item-type-check">checkbox menu item</link>.  Include this item in every application that has a statusbar.</entry>
		</row>
		</tbody>
		</tgroup>
	</table>
	</sect3>

	<sect3>
	<title>Content Presentation</title>
	<table>
	<title>Content Presentation menu items</title>
	 <tgroup cols="3" align="left">
	    <thead> 
	      <row> 
		<entry>Label</entry> 
		<entry>Shortcut</entry>
		<entry>Description</entry>
		</row>
	      </thead>
	    <tbody valign="top">

		<row>
			<entry><accel>I</accel>cons</entry>
			<entry>None</entry>
			<entry>Shows the contents of the selected container as rows and columns of large icons, each with its name underneath.  This is a <link linkend="menu-item-type-radio">radio button menu item</link>.</entry>
		</row>

		<row>
			<entry><accel>L</accel>ist</entry>
			<entry>None</entry>
			<entry>Shows the contents of the selected container as a list of small icons, possibly in multiple columns, each with its name on its right-hand side.  This is a <link linkend="menu-item-type-radio">radio button menu item</link>.</entry>
		</row>

		<row>
			<entry><accel>D</accel>etails</entry>
			<entry>None</entry>
			<entry>Shows the contents of the selected container as single column of small icons, each with its name on its right-hand side.  Additional columns give extra information about the object each icon represents, for example the size and modification date of files in a file manager.  This is a <link linkend="menu-item-type-radio">radio button menu item</link>.
			<para>If your application has no need for both <guimenu>List</guimenu> and <guimenu>Details</guimenu> modes, use the <guimenu>List</guimenu> item for whichever of the two modes you support.</para></entry>
		</row>

		<row>
			<entry>S<accel>o</accel>rt By...</entry>
			<entry>None</entry>
			<entry>Sorts the contents of an container by user-specified criteria.  Open a dialog allowing the user to choose from pre-defined sort keys (for example, Name, Size, or Modification Date in a file manager), or to specify their own if applicable.</entry>
		</row>

		<row>
			<entry><accel>Z</accel>oom In</entry>
			<entry><keycombo><keycap>Ctrl</keycap><keycap>+</keycap></keycombo></entry>
			<entry>Zooms into the document.  Make the center of the new, zoomed view the same as the center of the previous view.</entry>
		</row>

		<row>
			<entry>Zoom <accel>O</accel>ut</entry>
			<entry><keycombo><keycap>Ctrl</keycap><keycap>-</keycap></keycombo></entry>
			<entry>Zooms out of the document.  Make the center of the new, zoomed out view the same as the center of the previous view.</entry>
		</row>

		<row>
			<entry><accel>N</accel>ormal Size</entry>
			<entry><keycombo><keycap>Ctrl</keycap><keycap>=</keycap></keycombo></entry>
			<entry>Resets the zoom value back to the default level, normally 100%.  Make the center of the new view the same as the center of the previous view.</entry>
		</row>

		<row>
			<entry>Best <accel>F</accel>it</entry>
			<entry>None</entry>
			<entry>Makes the document fill the window.  Show the document, or the current page of the document, at as high a zoom level as will fit in the window whilst allowing the whole document or page to be visible without scrolling.</entry>
		</row>

		<row>
			<entry><accel>R</accel>efresh</entry>
			<entry><keycombo><keycap>Ctrl</keycap><keycap>R</keycap></keycombo></entry>
			<entry>Redraws the current view of the document from local storage.  For example, in a web browser application, this would redraw the page from the browser page cache.
			<para>If you want to check if the actual content has changed before refreshing the view, for example, checking a web page on a remote web server, label this item <guimenuitem>Reload</guimenuitem> rather than <guimenuitem>Refresh</guimenuitem>.  If your application requires both <guimenuitem>Reload</guimenuitem> and <guimenuitem>Refresh</guimenuitem>, use <keycombo><keycap>Shift</keycap><keycap>Ctrl</keycap><keycap>R</keycap></keycombo> for <guimenuitem>Reload</guimenuitem>.</para></entry>
		</row>

		</tbody>
		</tgroup>
	</table>
	</sect3>
      </sect2>

      <sect2 id="menu-standard-insert">
	<title>Insert</title>
	<figure id="generic-insert-menu">
	  <title>A generic Insert menu</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/generic-insert-menu.png" format="PNG"/>
	    </imageobject>
	    <textobject>
	      <literallayout class="monospaced">
<guimenu><accel>I</accel>nsert</guimenu><!-- FIXME -->
	      </literallayout>
	    </textobject>
	  </mediaobject>
	</figure>
	<para>Provide an <guimenu>Insert</guimenu> menu instead of <menuchoice><guimenu>Edit</guimenu><guisubmenu>Insert</guisubmenu></menuchoice> when more than 6 items would be present or when insertion commands would be frequently used.</para>
      </sect2>

<!-- CFB I think the format menu is *too* generic to be of much use here...
     commenting out for now

      <sect2 id="menu-standard-format">
	<title>Format</title>
	<figure id="generic-format-menu">
	  <title>A generic Format menu</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/generic-format-menu.png" format="PNG"/>
	    </imageobject>
	    <textobject>
	      <literallayout class="monospaced">
<guimenu>For<accel>m</accel>at</guimenu>
	      </literallayout>
	    </textobject>
	  </mediaobject>
	</figure>
	<para>Provide a <guimenu>Format</guimenu> menu for commands which alter data such as markup and structural changes.</para>
      </sect2>
-->

      <sect2 id="menu-standard-bookmarks">
	<title>Bookmarks</title>
	<figure id="generic-bookmarks-menu">
	  <title>A generic Bookmarks menu</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/generic-bookmarks-menu.png" format="PNG"/>
	    </imageobject>
	    <textobject>
	      <literallayout class="monospaced">
<guimenu><accel>B</accel>ookmarks</guimenu>
<guimenuitem><accel>A</accel>dd Bookmark   </guimenuitem><keycombo><keycap>Ctrl</keycap><keycap>D</keycap></keycombo>
<guimenuitem><accel>E</accel>dit Bookmarks </guimenuitem><keycombo><keycap>Ctrl</keycap><keycap>B</keycap></keycombo>
		<!-- FIXME -->
	      </literallayout>
	    </textobject>
	  </mediaobject>
	</figure>
	<para>Provide a <guimenu>Bookmarks</guimenu> menu for browsers.</para>

	<table>
	<title>Bookmark menu items</title>
	 <tgroup cols="3" align="left">
	    <thead> 
	      <row> 
		<entry>Label</entry> 
		<entry>Shortcut</entry>
		<entry>Description</entry>
		</row>
	      </thead>
	    <tbody valign="top">

		<row>
			<entry><accel>A</accel>dd Bookmark</entry>
			<entry>None</entry>
			<entry>Adds a bookmark for the current document to the default bookmark list.  Do not pop up a dialog asking for a title or location for the bookmark, instead choose sensible defaults (such as the document's title or filename as the bookmark name) and allow the user to change them later using the <guimenuitem>Edit Bookmarks</guimenuitem> feature.</entry>
		</row>

		<row>
			<entry><accel>E</accel>dit Bookmarks</entry>
			<entry>None</entry>
			<entry>Allows the user to edit the application's bookmark list.  Open a window in which the user can arrange bookmarks into a hierarchy, move, copy, and delete bookmarks, and change their properties.</entry>
		</row>
		</tbody>
		</tgroup>
	</table>

      </sect2>
      <sect2 id="menu-standard-go">
	<title>Go</title>
	<figure id="generic-browser-go-menu">
	  <title>A generic browser Go menu</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/generic-browser-go-menu.png" format="PNG"/>
	    </imageobject>
	    <textobject>
<literallayout class="monospaced">
<guimenu><accel>G</accel>o</guimenu>
<guimenuitem><accel>B</accel>ack       </guimenuitem>
<guimenuitem><accel>F</accel>orward    </guimenuitem>
<guimenuitem><accel>U</accel>p         </guimenuitem>
<guimenuitem><accel>R</accel>eload     </guimenuitem>
<guimenuitem><accel>S</accel>top       </guimenuitem>
<guimenuitem><accel>H</accel>ome       </guimenuitem>
<guimenuitem><accel>L</accel>ocation...</guimenuitem>
</literallayout>
	    </textobject>
	  </mediaobject>
	</figure>

	<table>
	<title>Go menu items for a browser application</title>
	 <tgroup cols="3" align="left">
	    <thead> 
	      <row> 
		<entry>Label</entry> 
		<entry>Shortcut</entry>
		<entry>Description</entry>
		</row>
	      </thead>
	    <tbody valign="top">

		<row>
			<entry><accel>B</accel>ack</entry>
			<entry><keycombo><keycap>Alt</keycap><keycap>Left</keycap></keycombo></entry>
			<entry>Navigates to the previous document in the browser's history list.</entry>
		</row>

		<row>
			<entry><accel>F</accel>orward</entry>
			<entry><keycombo><keycap>Alt</keycap><keycap>Right</keycap></keycombo></entry>
			<entry>Navigates to the next document in the browser's history list.</entry>		
		</row>

		<row>
			<entry><accel>U</accel>p</entry>
			<entry><keycombo><keycap>Alt</keycap><keycap>Up</keycap></keycombo></entry>
			<entry>Navigates to the current folder or document's parent folder or document.  For a document browser, such as an online help viewer, this usually means navigating to the enclosing sub-section, section, chapter or contents page.</entry>		
		</row>
	
		<row>
			<entry><accel>H</accel>ome</entry>
			<entry><keycombo><keycap>Alt</keycap><keycap>Home</keycap></keycombo></entry>
			<entry>Navigates to a starting page defined by the user or the application.</entry>
		</row>


		<row>
			<entry><accel>L</accel>ocation...</entry>
			<entry>None</entry>
			<entry>Navigates to a user-specified URI.  Open a dialog into which the user can type a suitable URI, or select one from a list where applicable (for example, a file selection dialog for applications that can handle file:// URIs).</entry>		
		</row>

			</tbody>
		</tgroup>
	</table>

	<remark>FIXME: Reload and Stop should be on the View menu</remark>

	<figure id="generic-document-go-menu">
	  <title>A generic document Go menu</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/generic-document-go-menu.png" format="PNG"/>
	    </imageobject>
	    <textobject>
<literallayout class="monospaced">
<guimenu><accel>G</accel>o</guimenu>
<guimenuitem><accel>P</accel>revious Page  </guimenuitem>
<guimenuitem><accel>N</accel>ext Page      </guimenuitem>
<guimenuitem><accel>J</accel>ump to Page...</guimenuitem>
-
<guimenuitem><accel>F</accel>irst Page     </guimenuitem>
<guimenuitem><accel>L</accel>ast Page      </guimenuitem>
</literallayout>
	    </textobject>
	  </mediaobject>
	</figure>

	<table>
	<title>Go menu items for a document-based application</title>
	 <tgroup cols="3" align="left">
	    <thead> 
	      <row> 
		<entry>Label</entry> 
		<entry>Shortcut</entry>
		<entry>Description</entry>
		</row>
	      </thead>
	    <tbody valign="top">

		<row>
			<entry><accel>P</accel>revious Page</entry>
			<entry><keycap>PageUp</keycap></entry>
			<entry>Navigates to the previous page in the document.</entry>
		</row>

		<row>
			<entry><accel>N</accel>ext Page</entry>
			<entry><keycap>PageDown</keycap></entry>
			<entry>Navigates to the next page in the document.</entry>		
		</row>

		<row>
			<entry><accel>G</accel>o to Page...</entry>
			<entry>None</entry>
			<entry>Navigates to a user-specified page number.  Open a dialog into which the user can type a page number.
			<para>Text-based applications may also benefit from a <guimenuitem>Go  to Line...</guimenuitem> menu item, which allows the user to jump to a specified line number.</para></entry>		
		</row>
	
		<row>
			<entry><accel>F</accel>irst Page</entry>
			<entry><keycombo><keycap>Ctrl</keycap><keycap>Home</keycap></keycombo></entry>
			<entry>Navigates to the first page in the document.</entry>
		</row>


		<row>
			<entry><accel>L</accel>ast Page</entry>
			<entry><keycombo><keycap>Ctrl</keycap><keycap>End</keycap></keycombo></entry>
			<entry>Navigates to the last page in the document.</entry>		
		</row>

			</tbody>
		</tgroup>
	</table>

      </sect2>

<!-- CFB Commenting out until we have anything to go on it :/
      <sect2 id="menu-standard-tools">
	<title>Tools</title>
	<figure id="generic-tools-menu">
	  <title>A generic Tools menu</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/generic-tools-menu.png" format="PNG"/>
	    </imageobject>
	    <textobject>
	      <literallayout class="monospaced">
<guimenu><accel>T</accel>ools</guimenu>
	      </literallayout>
	    </textobject>
	  </mediaobject>
	</figure>
	<para>FIXME</para>
      </sect2>

-->

      <sect2 id="application-windows-menu">
	<title>Windows</title>
	<figure id="generic-windows-menu">
	  <title>A generic Windows menu</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/generic-windows-menu.png" format="PNG"/>
	    </imageobject>
	    <textobject>
	      <literallayout class="monospaced">
<guimenu><accel>W</accel>indows</guimenu>
<guimenuitem><accel>S</accel>ave All</guimenuitem>
<guimenuitem><accel>C</accel>lose All</guimenuitem>
	      </literallayout>
	    </textobject>
	  </mediaobject>
	</figure>
	<para>Avoid presenting a multiple document interface (MDI).</para>
	<para>If the application presents an MDI, provide a Windows menu for commands which apply to all of the application's windows. Provide a list of the application's primary windows to allow them to be raised.</para>
	<para>The Windows menu may also be labelled <guimenu><accel>D</accel>ocuments</guimenu>, <guimenu><accel>B</accel>uffers</guimenu>, or similarly according to the application context.</para>
      </sect2>
      <sect2 id="menu-standard-help">
	<title>Help</title>
	<figure id="generic-help-menu">
	  <title>A generic Help menu</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/generic-help-menu.png" format="PNG"/>
	    </imageobject>
	    <textobject>
	      <literallayout class="monospaced">
<guimenu><accel>H</accel>elp</guimenu>
<guimenuitem><accel>S</accel>earch</guimenuitem>
<guimenuitem>Help <accel>C</accel>ontents      F1</guimenuitem>
<guimenuitem><accel>A</accel>bout <replaceable>appname</replaceable></guimenuitem>
	      </literallayout>
	    </textobject>
	  </mediaobject>
	</figure>

	<table>
	<title>Help menu items</title>
	 <tgroup cols="3" align="left">
	    <thead> 
	      <row> 
		<entry>Label</entry> 
		<entry>Shortcut</entry>
		<entry>Description</entry>
		</row>
	      </thead>
	    <tbody valign="top">

		<row>
			<entry><accel>C</accel>ontents</entry>
			<entry><keycap>F1</keycap></entry>
			<entry>Opens the default help browser on the contents page for the application.</entry>
		</row>

		<row>
			<entry><accel>A</accel>bout</entry>
			<entry>None</entry>
			<entry>Opens the About dialog for the application.  Use the standard dialog provided by the GNOME libraries, which contains the name and version number of the application, a short description of the application's functionality, author contact details, copyright message and a pointer to the licence under which the application is made available.</entry>		
		</row>

			</tbody>
		</tgroup>
	</table>

	<remark>We originally wanted a Search item on here too, but it's not technically possible to implement it right now.</remark>

      </sect2>
    </sect1>
  </chapter>
