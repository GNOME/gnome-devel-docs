<?xml version="1.0" encoding="UTF-8"?>
  <chapter id="menus">
    <title>Menus</title>

<!-- TODO:
- Tear-off menus? (These are controlled by gconf in 2.0, so nothing app developer needs to do?)
- Menu bar position
- Menu bar hiding
-->
    <para>Menus present the whole range of an application's commands to the user, and often a subset of its preferences.  When designing a new application, placing common menu items in the same menus as they appear in other applications makes it much easier for the user to learn.</para>
  
    <para>In most applications, only primary windows should have a menu bar.  Secondary windows, and dialog boxes in particular, should be simple enough that their functions can be carried out by controls such as buttons placed within the window.</para>

    <para>Occasionally, however, a secondary window is so complex that there would be too many controls.  In these cases you may use a menubar provided that:</para>

    <itemizedlist>
      <listitem><para>the menus follow the same standard layout as described in <xref linkend="standard-menus" /></para></listitem>
      <listitem><para>you do not include any dialog-style buttons to dismiss the window, such as <guibutton>OK</guibutton>, <guibutton>Close</guibutton> or <guibutton>Cancel</guibutton>, but place these commands on the <guimenu>File</guimenu> menu or equivalent instead.</para></listitem>
    </itemizedlist>

    <para>Guidelines:</para>

    <itemizedlist>

	<listitem><para>Only place items on a menu that relate to that menu's title.</para></listitem>

      <listitem><para>Organize menus according to the standard order when there is one&mdash; see <xref linkend="standard-menus" /> for the standard order for many common menu items.  For application-specific items where there is no standard order, arrange in numerical or other logical order (for example, <guimenuitem>50%</guimenuitem>, <guimenuitem>100%</guimenuitem>, <guimenuitem>200%</guimenuitem>), task order (for example, <guimenuitem>Compile</guimenuitem> then <guimenuitem>Debug</guimenuitem>) or by expected frequency of use.</para></listitem>

      <listitem><para>Label menu items with verbs or adjectives, describing commands or properties respectively, according to the rules in <xref linkend="layout-capitalization"/>.</para></listitem>


    <listitem><para>Provide an access key for each menu item. Note that unlike other controls, once a menu is posted, its access keys are accessible just by typing the letter; it is not necessary to press the <keysym>Alt</keysym> key at the same time.</para></listitem>

      <listitem><para>Design your menu structure to avoid more than one level of submenus.  Deep menu hierarchies are physically difficult to navigate, which has accessibility implications.  They are also harder to memorize.</para></listitem>

      <listitem><para>Limit top level menus to a maximum of about 20 items.  If you have any more items than this, consider moving a functionally-related subset of the items into a submenu or a new top-level menu.</para></listitem>

      <listitem><para>Do not add or remove menu items while the application is running, make them insensitive instead. Entire menus may be added or removed from the menu bar at runtime, however, for example in component-based applications.</para></listitem>

      <listitem><para>Change menu items that have been edited directly or indirectly by the user, such as those on the <guisubmenu>Open Recent</guisubmenu> submenu and the <guimenu>Bookmarks</guimenu> menu, consequent to the appropriate user action.</para></listitem>


  <!-- CB-Ed: As in JLFDG AT p. 33, perhaps provide a table of common access keys, or "mnemonics." -->

    </itemizedlist>

    <sect1 id="menu-controlsparts">
      <title>Menu Controls</title>
      <para>FIXME</para>
      <sect2 id="menu-types">
	<title>Menu Types</title>
	<sect3 id="menu-type-menubar">
	  <title>The Menu Bar</title>
	  <para>Provide a menubar on each primary application window. The menubar provides a number of drop-down menus. This menubar will be visible at all times and will always be accessible via the keyboard as well as the mouse, and for this reason it should give access to all commands available in the application.</para>
	  <para>The keyboard shortcut <keycap>F10</keycap> focuses the first menu in a menubar.</para>

	  <note>
	    <title>For Discussion</title>
	    <para>We should have this same function on release of Alt. <ulink url="http://bugzilla.gnome.org/show_bug.cgi?id=53543">http://bugzilla.gnome.org/show_bug.cgi?id=53543</ulink></para>
	  </note>
	</sect3>
	<sect3 id="menu-type-drop-down">
	  <title>Drop-down Menus</title>
	  <para>Drop-down menus post from the head items on the menu bar. . . .</para>

<!-- CB-Ed/Fig: Define "post," as no-brainer-ish as it may seem, and also add a figure to show what it means.  A simple menu being shown at the user clicking on a menu title on a menu bar, or "posted," makes sense.  -->

	</sect3>
	<sect3 id="menu-type-submenu">
	  <title>Submenus</title>
	  <para>A submenu posts from an item in a drop-down menu or a popup menu.</para>

<!-- CB-Fig: Figure of submenu being "posted." -->

	  <para>Submenus should be used to save space on otherwise crowded menu by grouping related commands. A submenu should container no fewer than three items, unless the items are added dynamically as in the <guisubmenu>Open Recent</guisubmenu> submenu of the <guimenu>File</guimenu> menu. Usually a submenu should not itself have a submenu. Submenus should be used sparingly, since they are physically difficult to navigate and they make it harder to reach the items they contain.</para>
	</sect3>

<!-- CB-Ed/Fig: In JLFDG AT, p. 41, the Most Recently Used (MRU) list is recommended to contain no more than 10 items. Add a figure here, with callouts to point out this rule, among others, if any are developed.  --> 

	<sect3 id="menu-type-popup">
	  <title>Popup Menus</title>
	  <para>Provide a popup menu for every object, selectable part, and text input target such as an entry. Show the popup menu in response to a right-click or the keycombo <keycombo action="simul"><keycap>Shift</keycap><keycap>F10</keycap></keycombo>. Unlike drop-down menus, do not show keyboard shortcuts in popup menus.</para>

<!-- CB-Ed: Why not? (Show keyboard shortcuts in popup menus) -->

	  <para>Provide an access key for each item.</para>
	  <!-- Since the user may not be aware of their presence, any items they contain should also be available via the application's menubar. -->
	  <!-- http://bugzilla.mozilla.org/show_bug.cgi?id=34357 -->
	  <para>Place the default command for an object as the first item on its popup menu, followed by other commands in expected frequency-of-use order, followed by transfer commands such as <command>Cut</command>, <command>Copy</command>, and <command>Paste</command>.</para>
	  <para>Avoid submenus from popup menus.</para>
	  <note>
	    <para>An exception exists for the <guimenuitem>Input Methods</guimenuitem> submenu. When present, this must be the last item.</para>
	  </note>

<!-- CB-Ed: In the previous note, define the Input Methods menu and why it is an exception, for scalability reasons (other items may fall into the same category).  It also sounds like a pretty low-level command; should this be exposed to the user? -->
<!-- SN-Ed: No, it should not be exposed to the user. I'm not really sure what possessed the GTK guys to put this in every right click menu for text boxes. I suppose in this case having it be a submenu is good (if they insist on it existing) because it makes it maximally invisible -->

<!--

CFB: Making this note a comment... actually all I really suggested was that the structure ought to be consistent, whether or not 'Properties' is always the last item is kind of incidental.

	  <note>
	    <title>For Discussion</title>
	    <para>Calum recommends the last item should be <guimenuitem>Properties</guimenuitem>. For an OOUI, the properties of an object are considered just another view of the object and the item to access them should be placed after the other opening options. It would look rather odd to have <guimenuitem>Properties</guimenuitem> after <guimenuitem>Input Methods</guimenuitem></para>
	  </note>


-->

	</sect3>
      </sect2>
      <sect2 id="menu-item-types">
	<title>Menu Item Types</title>
	<para>Provide an access key for every menu item, except separators.</para>

	<sect3 id="menu-item-type-head">
	  <title>Titles</title>
	  <para>Each item on the menu bar is a menu title. Menu titles also appear in drop-down menus with submenus.</para>

<!-- CB-Ed/Fig: Figures would be good here, especially for the second sentence of the previous para. -->

	  <para>Do not disable menu titles. Allow the user to explore the menu, even though there might be no available items on it at that time.</para>
	</sect3>
	<sect3 id="menu-item-type-sep">
	  <title>Separators</title>
	  <para>A separator visually divides groups of related items on a drop-down menu, submenu, or popup menu.  Good use of separators helps to &quot;chunk&quot; the information on a menu and make it easier to scan and memorize.</para>

<!-- CB-Fig: A main figure for this chapter would probably be great, something along the lines of a menu anatomy figure, calling out different parts and rules for using those parts, of a menu.  The Separators may need its own figure, pointing out the rules shown below. -->
	  
	  <para>Guidelines:</para>
	  <itemizedlist>

	    <listitem><para>The best size for a group is around 2-5 items.  Single items should only appear at the top or bottom of a menu, otherwise try to group them with other single items on the same menu.</para></listitem>

	    <listitem><para>Order items within a group logically, numerically, in task order or by expected frequency of use, as appropriate.</para></listitem>

	    <listitem><para>Every menu item in any one group should be of the same type&mdash; command, mutable, checkbox or radio button.  For example, do not place commands (e.g. <menuchoice><guimenu>View</guimenu><guimenuitem>Reload</guimenuitem></menuchoice>) and settings (e.g. <menuchoice><guimenu>View</guimenu><guimenuitem>Toolbar</guimenuitem></menuchoice> in the same group.</para></listitem>

	    </itemizedlist>	  
	</sect3>

	<sect3 id="menu-item-type-command">
	  <title>Command Items</title>
	  <para>Command items . . .</para>
	  <para>Provide a keyboard shortcut for standard or frequently used command items.</para>
	  <para>Use <keysym>Control</keysym> as the modifier key in the most frequently used shortcut combination for a regular key. If there is a similar command which would be frequently used, use <keysym>Shift</keysym> as an additional modifier key. If other modifier keys are needed, consider redesigning the interface.</para>
	  <para>See <xref linkend="shortcuts"/> for more information.</para>
	  <note>
	    <title>For Discussion</title>
	    <para>Should we reserve <keysym>Alt</keysym> as a modifier for window manager operations? Should we state this here?</para>
	  </note>
	  <!-- <para>Shortcuts consist of the <keysym>Control</keysym> key and an alphanumeric key, or of one of the keys <keysym>F1</keysym>-<keysym>F12</keysym>, <keysym>Insert</keysym>, <keysym>Delete</keysym>, <keysym>Home</keysym>, <keysym>End</keysym>, <keysym>Page Up</keysym> or <keysym>Page Down</keysym>. The <keysym>Shift</keysym> key may be used as an additional modifier for commands which are related to or the opposite of the command accessed without the <keysym>Shift</keysym> key.  See <xref linkend="shortcuts"/> for more information.</para> -->
	  <para>Make a menu item insensitive when its command is unavailable. For example, the <menuchoice><guimenu>Edit</guimenu> <guimenuitem>Copy</guimenuitem></menuchoice> item, which issues the command to copy selected data to the clipboard, should not be activatable when there is no data selected.</para>
	  <para>Do not remove a command item from the menu, the toolkit will handle changing its appearance according to input-sensitivity. The user should be able to see commands which might be available at other times and keeps the item in a memorable place.</para>

<!-- CB-Ed: The previous para is badly written, especially the last clause; it's grammatically incorrect, to begin with. -->
	  <para>Where a command requires further input from the user before it can be performed, it should be marked with an ellipsis ("..."). However, items should not be given an ellipsis to indicate only that a confirmation dialog will be presented or that the result of a command will be that a dialog is presented to the user.</para>


<!-- CB-Ed/Fig: Figure would be nice here. -->
	</sect3>

	<sect3 id="menu-item-type-mutable">
	  <title>Mutable Command Items</title>
	  <para>A mutable command item changes its label when selected.  For example, <menuchoice><guimenu>View</guimenu><guimenuitem>Reload</guimenuitem></menuchoice> in a browser may change to <guimenuitem>Stop</guimenuitem> to allow the user to interrupt the operation if it is taking a long time.</para>

	  <para>Mutable menu items can be problematic because the user never sees the menu item changing, so it is not obvious that a new or different function has become available.  It is therefore often better to provide separate menu items for the available functions and make them available or unavailable as the situation demands.</para>

	  <note><title>Mutable items for settings</title>
	    <para>What's our position on mutable items for settings, e.g. Show Toolbar/Hide Toolbar in Nautilus?</para>
	  </note>

	</sect3>
	<sect3 id="menu-item-type-check">
	  <title>Checkbox Items</title>

	  <para>A checkbox menu item shows the current state of a two-state setting, and allows the user to toggle it by selecting the menu item.</para>
	  
	  <para>Use a checkbox menu item only when it is obvious from the label what the two states are.  For example, it is reasonably obvious that <menuchoice><guimenu>View</guimenu><guimenuitem>Toolbar</guimenuitem></menuchoice> checkbox menu item will toggle the visibility of the application's toolbar on or off.  However, <menuchoice><guimenu>View</guimenu><guimenuitem>View as Icons</guimenuitem></menuchoice> would be a bad setting to control with a checkbox menu item, since it is not clear what type of view would be used if you unchecked the menu item.  Using two radio button menu items would be more appropriate in this case, to make the two choices explicit.</para>

	  <para>Never change the label of a checkbox menu item in response to the user checking or unchecking the item.</para>

	</sect3>
	<sect3 id="menu-item-type-radio">
	  <title>Radio Button Items</title>


	<!--
	Adam notes that this whole section can be a significant source of
	nastiness in a UI. We need explicit recommendations here on how to
	represent different states of a toggled menu item via icons in the UI.
	We also need to make recommendations to avoid some common mistakes,
	including:
	
	* Confusing menu items acting as radio buttons in a group with menu
          items acting as checkboxes.
	* Ambiguous names for checkbox/toggle menu items which make it
	  difficult to establish the current system state by looking at
	  the menu.

	Calum notes further that we should give recommendations on when to use 
	two separate mutually-exclusive items rather than one with a checkbox 
	(or a dynamic menu name). This is generally important when the two 
	states are not naturally opposites.
	-->

	  <para>Radio button menu items show which of two or more mutually-exclusive settings are currently selected, and allows the user to choose a different setting by selecting its menu item.</para>

	  <para>Even if there are only two possible settings, use a group of two radio button items instead of a checkbox menu item if the two settings are not clearly opposites.  For example, <guimenuitem>View as Icons</guimenuitem> and <guimenu>View as List</guimenu> should be represented as two radio button items rather than a single checbox item.</para>

	  <para>Never change the label of a radio button menu item in response to the user selecting or deselecting the item.</para>

	</sect3>
	
      </sect2>


    </sect1>
    <sect1 id="standard-menus">
      <title>Standard Menus</title>
      <para>The primary application window has some standard menus and a standard menu bar order. Not every menu is required, but the order of the menu bar and of the individual menus should be preserved. Place application-specific menus after the <guimenu>Format</guimenu> menu and before the <guimenu>Go</guimenu> menu; {modify them this way, etc. ...}</para>
      <note>
	<title>For Discussion</title>
	<para>What is the best way to present menus given the known variants? Multiple shots? Segements? </para>
	<para>Possible convention guideline: If the menu or submenu would contain only two items, rethink the interface.</para>
      </note>
      <figure id="generic-menu-bar">
	<title>A generic menu bar</title>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="images/application-menubar.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <simplelist type="horiz" columns="9">
	      <member><guimenu><accel>F</accel>ile</guimenu></member>
	      <member><guimenu><accel>E</accel>dit</guimenu></member>
	      <member><guimenu><accel>V</accel>iew</guimenu></member>
	      <member><guimenu><accel>I</accel>nsert</guimenu></member>
	      <member><guimenu>For<accel>m</accel>at</guimenu></member>
	      <member><guimenu><accel>G</accel>o</guimenu></member>
	      <member><guimenu><accel>B</accel>ookmarks</guimenu></member>
	      <member><guimenu><accel>T</accel>ools</guimenu></member>
	      <member><guimenu><accel>W</accel>indows</guimenu></member>
	      <member><guimenu><accel>H</accel>elp</guimenu></member>
	    </simplelist>
	  </textobject>
	</mediaobject>
      </figure>
      <sect2 id="the-file-menu">
	<title>File</title>
	<para>FIXME</para>
	<figure id="generic-file-menu"><title>A generic File menu</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/file-menu.png" format="PNG"/>
	    </imageobject>
	    <textobject>
<literallayout>
<guimenu>File</guimenu>
<guimenuitem><accel>N</accel>ew                  Ctrl+N</guimenuitem>
<guimenuitem><accel>O</accel>pen...              Ctrl+O</guimenuitem>
<guimenuitem>Recent <accel>F</accel>iles              &gt; </guimenuitem>
---
<guimenuitem><accel>S</accel>ave                 Ctrl+S</guimenuitem>
<guimenuitem>Save <accel>A</accel>s...     Shift+Ctrl+S</guimenuitem>
<guimenuitem>Sa<accel>v</accel>e Copy...               </guimenuitem>
<guimenuitem><accel>R</accel>evert                     </guimenuitem>
---
<guimenuitem>Page Set<accel>u</accel>p                 </guimenuitem>
<guimenuitem>Print Previe<accel>w</accel>  Shift+Ctrl+P</guimenuitem>
<guimenuitem><accel>P</accel>rint...             Ctrl+P</guimenuitem>
<guimenuitem><accel>M</accel>ail...              Ctrl+M</guimenuitem>
---
<guimenuitem>Proper<accel>t</accel>ies                 </guimenuitem>
---
<guimenuitem><accel>C</accel>lose                Alt+F4</guimenuitem>
<guimenuitem><accel>Q</accel>uit                 Ctrl+Q</guimenuitem>
</literallayout>
	    </textobject>
	  </mediaobject>
	</figure>
	<sect3>
	  <title>Creation and Opening Operations</title>
<note><para>Adam noted in the last review that we don't make any suggestions for applications  that do not edit document/files. In an OOUI, the Game
menu would have items such as (modulo phraeseology) Open New Game, Open Game Settings, High Scores.</para><para>For non-game UI there would be at the very least, Open as ... and Open Settings.</para></note>
	  <variablelist>
	    <varlistentry>
	      <term>New</term>
	      <listitem>
		<para>Creates a new document. The <guimenuitem><accel>N</accel>ew</guimenuitem> command should create a new window or tab (depending on the users MDI settings) with a blank document in it. <!-- FIXME: titling of new documents --></para>

		<para>Where the application may create a number of different types of document, the <guimenuitem><accel>N</accel>ew</guimenuitem> item may be a submenu containing entries for these various types. These entries should be labelled <guimenuitem>New <replaceable>document type</replaceable></guimenuitem> and the most commonly used item should be the first entry in the submenu and should be given the <keycombo><keycap>Ctrl</keycap><keycap>N</keycap></keycombo> shortcut.</para>
		<para>A blank document will not necessarily be truly blank. For example, a document created from a template may already contain some data.<!-- FIXME: More on templates --></para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>Open</term>
	      <listitem>
		<para>Opens an existing document in a new window. The user should be presented with a standard file open dialog <!-- Ref this elsewhere --> from which they may choose an existing file. If the user's choice is already open in the application then it should request that the window containing that file be raised. <!-- If the current window contains a blank untitled document then it should be replaced with the selected file. Otherwise the file should be opened in a new window. --></para>
		<note>
		  <para>If the application would provide more than two ways to open an object, place all the Open ... items in a submenu, including Recent Files. This keeps the menu less cluttered and in some ways presents a better inteface as the list of recent files is presented in the same menu, and near, the regular open commands. Users hate having to go to the bottom of the file menu to open recent files; the cause of this is that, in the workplace, it is far more common to sort out other peoples already written and saved crap than it is to have to write your own. Most of the users of office application, surveyed in both card sorts and online presentations of speculative menus, do not want or do not even notice when the New... items are absent.</para>
		  <para>Problem to be solved. It may be desireable to open a second read-only view of the same document. How should this be provided? Non-OOUI are particularly nasty in this regard, as in many others. A "Clone Window" command seems quite nasty.</para>
		  <para>As I noted in the first review, the blank window should be kept available; in an OOUI this is a more obvious a way of working.</para>
		</note>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>Recent Files</term>
	      <listitem>
		<para>Allows the user to open a recently used file. The application should maintain a history of recently opened documents and these should be accessible via a submenu. Selecting one of these files should open that file in the same way that <guimenuitem><accel>O</accel>pen</guimenuitem> does.</para>
		<para>Provide at least ten of the most recent files in the menu; fewer only according to user preferences or absence of recent files.</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</sect3>
	<sect3>
	  <title>Saved State Operations</title>
	  <note>
	    <title>For Discussion</title>
	    <para>This section needs a review with an eye to what can actually be done programmatically.</para>
	  </note>
	  <variablelist>
	    <varlistentry>
	      <term>Save</term>
	      <listitem>
		<para>Saves the document to its current filename. If the document has a filename associated with it then the document should be saved to that file without any further interaction with the user. If there are any additional options involved in saving a file (eg. DOS or UNIX-style line endings in a text file) then these should remain as they were the last time the document was saved. If the document has no associated filename then the action should be the same as that of <guimenuitem>Save As</guimenuitem>.</para>
		<note>
		  <para>Calum recommends disabling this item (making it insensitive) if the document is read-only.</para>
		  <para>Gregory wonders why a read-only view would have this item.</para>
		</note>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>Save As</term>
	      <listitem>
		<para>Saves the document to a new filename. The <guimenuitem>Save <accel>A</accel>s</guimenuitem> command should present the user with a standard file save as dialog and save the file with the chosen file name. <!-- FIXME: errors, additional information--></para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>Save Copy</term>
	      <listitem>
		<para>The <guimenuitem>Save Copy</guimenuitem> command prompts the user to enter a filename, with which a copy of the document is then saved.  Neither the view nor the filename of the original document is altered.  All subsequent changes are still made to the original document until the user specifies otherwise, for example by choosing the <guimenuitem>Save As</guimenuitem> command).</para>

		<para> Like the <guimenuitem>Save As</guimenuitem> dialog, the <guimenuitem>Save Copy</guimenuitem> dialog may present different ways to save the data. For example, an image may be saved in a native format or as a PNG.</para>
		<note>
		  <title>For Discussion</title>
		  <para>Should this be "Save Copy As..."?</para>
		</note>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>Revert</term>
	      <listitem>
		<para>Reverts the document to the last saved state. The user should be presented with with a warning that all changes will be lost and given the option of cancelling before reloading the file.</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>Save Version</term>
	      <listitem>
		<para>The <guimenuitem>Save Version</guimenuitem> is an alternative to the <guimenuitem>Save Copy</guimenuitem> command.</para>
		<para>This should be used only in conjunction with the <guimenuitem>Restore Version</guimenuitem> command.</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>Restore Version</term>
	      <listitem>
		<para>Prompts the user for a version of the current document to be restored. The user should be presented with with a warning that all changes will be lost and given the option of cancelling before restoring the version.</para>
		<para>This should be used only in conjunction with the <guimenuitem>Save Version</guimenuitem> command.</para>
		<note>
		  <title>For Discussion</title>
		  <para>All of these items, (Print, Send . . . ) are export or save operations, to keep a semblance of a sane order of operations, the order of the items should follow the order of locality. Ergo, Save Print Send - local (disk), local or remote (printer), remote (someone else)</para>
		</note>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>Versions</term>
	      <listitem>
		<para>An alternative to the <guimenuitem>Save Version</guimenuitem> and <guimenuitem>Restore Version</guimenuitem> commands. Use this when more utilities, such as a diff, are available.</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</sect3>
	<sect3>
	  <title>Export Operations</title>
	  <variablelist>
	    <varlistentry>
	      <term>Page Setup</term>
	      <listitem>
		<para>Allows the user to control print-related settings. The user should be presented with a dialog allowing the user to set such options as portrait or landscape format, margins, and so on.</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>Print Preview</term>
	      <listitem>
		<para>Shows the user what the printed document will look like. The <guimenuitem>Print Preview</guimenuitem> command should bring up a new window containing an accruate represenation of the appearance of the document as it would be printed.</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>Print</term>
	      <listitem>
		<para>Prints the current document. The <guimenuitem>Print</guimenuitem> command should brings up a print dialog allowing the user to set such options as the page range to be printed, the printer to be used, and so on. The dialog should contain a button marked <guibutton>Print</guibutton> which should start the actual printing and close the dialog.</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>Send</term>
	      <listitem>
		<para><guimenuitem>Send</guimenuitem> provides the user a means to instantly attach or send the currently viewed document as an email attachement <!-- (launch $MAILER -a $ATTACHMENT) -->or, in the case of plain text or html, to send the document as email to another user.</para>
		<para>This item may be split according to the options to send which are available. As according to the general rule, if there are more than two items (usually with a common name) split them off into a submenu. For example, if just the commands Send by Email and Send by FAX were available, those could be left on the menu; but if there were a third option, perhaps Send by FTP, then all the options would be placed in a submenu.</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</sect3>
	<sect3>
	  <title>Closing Operations</title>
	  <variablelist>
	    <varlistentry>
	      <term>Close</term>
	      <listitem>
		<para>Close the current document. If the document in the current window has unsaved changes, present the user with an alert giving the option to save changes (which should function like the <menuchoice><guimenu>File</guimenu> <guimenuitem>Save</guimenuitem></menuchoice> command), discard the changes or cancel the action. If the window being closed is the last open document of that application, then either leave the with a blank document if your application is MDI, or leave only the control window open if your application is CSD).</para>
		<note>
		  <title>For Discussion</title>
		  <para>As mentioned on the usability list, Control+W is an Emacs shortcut for Cut. This has already proven deleterious for some users so we should consider dropping the shortcut (at least). The graphic shows Alt+F4 which is a used in Windows, CDE, and OS/2 for closing windows.</para>
		</note>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>Quit</term>
	      <listitem>
		<para>Quit the application. If there are unsaved changes in any open documents, present the user with an alert listing those documents and giving the option to save all, discard all, or cancel. If there are no unsaved changes then close the application immediately without presenting any further messages or dialogs.</para>
		<note>
		  <title>For Discussion</title>
		  <para>Kathy had suggested not providing a shortcut key to Quit. I can find no discussion of this. (And I think it should go away.)</para>
		</note>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</sect3>
	
      </sect2>
      <sect2 id="menu-standard-edit">
	<title>Edit</title>
	<figure id="generic-edit-menu">
	  <title>A generic Edit menu</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/application-edit-menu.png" format="PNG"/>
	    </imageobject>
	    <textobject>
<literallayout class="monospaced">
<guimenu><accel>E</accel>dit</guimenu>
<guimenuitem><accel>U</accel>ndo                 Ctrl+Z</guimenuitem>
<guimenuitem><accel>R</accel>edo           Shift+Ctrl+Z</guimenuitem>
-
<guimenuitem>Cu<accel>t</accel>                  Ctrl+X</guimenuitem>
<guimenuitem><accel>C</accel>opy                 Ctrl+C</guimenuitem>
<guimenuitem><accel>P</accel>aste                Ctrl+V</guimenuitem>
<guimenuitem><accel>D</accel>elete               Del</guimenuitem>
<guimenuitem><accel>S</accel>elect All           Ctrl+A</guimenuitem>
<guimenuitem>Dese<accel>l</accel>ect All   Shift+Ctrl+A</guimenuitem>
-
<guimenuitem><accel>F</accel>ind                 Ctrl+F</guimenuitem>
<guimenuitem>Find Ne<accel>x</accel>t            Ctrl+G</guimenuitem>
<guimenuitem>Find Pre<accel>v</accel>ious  Shift+Ctrl+G</guimenuitem>
<guimenuitem>R<accel>e</accel>place              Ctrl+R</guimenuitem>
-
<guimenuitem>Prefere<accel>n</accel>ces...</guimenuitem>
</literallayout>
	    </textobject>
	  </mediaobject>
	</figure>
	<para>The <guimenu>Edit</guimenu> menu contains items relating to editing the document, clipboard handling, selection and searching and replacing. {. . . and the application Preferences item}</para>

	<sect3>
	  <title>Modification History</title>
	  <para>Document-editing applications are recommended to maintain a history of modifications to a document and the state of the document between each action. The Undo and Redo commands are used to move through this history. The <guimenuitem>Undo</guimenuitem> and <guimenuitem>Redo</guimenuitem> items on the menu include the name of the action they will undo or redo (NB: not currently easy to do in gtk). They are always be separate menu items with separate keyboard shortcuts, even if the application is capable of only one undo level.</para>
	  <variablelist>
	    <varlistentry>
	      <term>Undo <replaceable>action</replaceable></term>
	      <listitem>
		<para>Undoes the previous action in the history. The document reverts to the state it was in before the previous action was performed.</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>Redo <replaceable>action</replaceable></term>
	      <listitem>
		<para>Repeats the following action in the history list. After the user has travelled back through the modification history with the <guimenuitem>Undo</guimenuitem> command, the <guimenuitem>Redo</guimenuitem> command moves the user forwards through that history and changes the document back to the state it was in after that action had been performed.</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</sect3>
	<sect3>
	  <title>Manipulating Selected Data</title>
	  <variablelist>
	    <varlistentry><term>Cut</term>
	      <listitem>
		<para>Removes the selected content and places it onto the clipboard. Remove the content in the same manner as <guimenuitem><accel>D</accel>elete</guimenuitem>. Only make this command available when a section of the document is selected.</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry><term>Copy</term>
	      <listitem>
		<para>Copies the selected content onto the clipboard. Only make this command available when a section of the document is selected.</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry><term>Paste</term>
	      <listitem>
		<para>Inserts the contents of the clipboard at the caret or, if part of the document is selected, replaces that part with the clipboard contents.</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry><term>Delete</term>
	      <listitem>
		<para>Removes the selected content without placing it on the clipboard.</para>
		<note>
		  <title>For Discussion</title>
		  <para>Should Delete be provided from a menu? The command is as obvious as using the arrow keys to move about.</para>
		</note>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>Select All</term>
	      <listitem>
		<para>Selects all parts of the document.</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>Deselect All</term>
	      <listitem>
		<para>Deselects all selected parts of the document. Only provide this when no other method of undoing selection may be apparent. It is expected that this item will be very rare, but place it after <guimenuitem>Select All</guimenuitem> when required.</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	</sect3>
	<sect3>
	  <title>Searching and Replacing</title>
	  <variablelist>
	    <varlistentry>
	      <term>Find</term>
	      <listitem>
		<para>Brings up a Find utility or dialog.</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>Find Next</term>
	      <listitem>
		<para>Finds the next instance of the last Find term. Make this item insensitive if there is no next instance and the find does not wrap around to the beginning of the document.</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>Find Previous</term>
	      <listitem>
		<para>Finds the previous instance of the last Find term. This item should be insensitive if there is no previous instance and the find does not wrap around to the end of the document.</para>
	      </listitem>
	    </varlistentry>
	    <varlistentry>
	      <term>Replace</term>
	      <listitem>
		<para>Brings up a Replace utility or dialog.</para>
	      </listitem>
	    </varlistentry>
	  </variablelist>
	  <!-- Note moved here by CB from the middle of his stuff... --> 
	  <note>
	    <title>For Discussion</title>
	    <para><guimenuitem>Find</guimenuitem> should be used for functions that locate text etc. in the currently loaded/focused document, with results highlighted in-place.</para>
	    <para><guimenuitem>Search</guimenuitem> should be used for functions that locate text etc. in locations (potentially) other than the current document, e.g. mail folders, website, disk partition etc., with results generally shown in a separate window.</para>
	    <para>Replace is not always descriptive of what the user may do with the utility window. Formatting a section is also a possibility.</para>
	    <para>Ideally, these would all be merged into a simple utility window</para>
	  </note>
	</sect3>
	<sect3>
	  <title>User Preferences</title>
	  <para>A user preferences dialog allows the user to change preferences for the whole application (in all its instances). <!-- or utility window? --></para>
	</sect3>
      </sect2>
      <sect2 id="menu-standard-view">
	<title>View</title>
	<figure id="generic-view-menu">
	  <title>A generic View menu</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/generic-view-menu.png" format="PNG"/>
	    </imageobject>
	    <textobject>
	      <literallayout class="monospaced">
<guimenu><accel>V</accel>iew</guimenu><!-- FIXME -->
	      </literallayout>
	    </textobject>
	  </mediaobject>
	</figure>
	<para>FIXME</para>
      </sect2>

      <sect2 id="menu-standard-insert">
	<title>Insert</title>
	<figure id="generic-insert-menu">
	  <title>A generic Insert menu</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/generic-insert-menu.png" format="PNG"/>
	    </imageobject>
	    <textobject>
	      <literallayout class="monospaced">
<guimenu><accel>I</accel>nsert</guimenu><!-- FIXME -->
	      </literallayout>
	    </textobject>
	  </mediaobject>
	</figure>
	<para>Provide an <guimenu>Insert</guimenu> menu instead of <menuchoice><guimenu>Edit</guimenu><guisubmenu>Insert</guisubmenu></menuchoice> when more than 6 items would be present or when insertion commands would be frequently used.</para>
      </sect2>

<!-- CFB I think the format menu is *too* generic to be of much use here...
     commenting out for now

      <sect2 id="menu-standard-format">
	<title>Format</title>
	<figure id="generic-format-menu">
	  <title>A generic Format menu</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/generic-format-menu.png" format="PNG"/>
	    </imageobject>
	    <textobject>
	      <literallayout class="monospaced">
<guimenu>For<accel>m</accel>at</guimenu>
	      </literallayout>
	    </textobject>
	  </mediaobject>
	</figure>
	<para>Provide a <guimenu>Format</guimenu> menu for commands which alter data such as markup and structural changes.</para>
      </sect2>
-->

      <sect2 id="menu-standard-bookmarks">
	<title>Bookmarks</title>
	<figure id="generic-bookmarks-menu">
	  <title>A generic Bookmarks menu</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/generic-bookmarks-menu.png" format="PNG"/>
	    </imageobject>
	    <textobject>
	      <literallayout class="monospaced">
<guimenu><accel>B</accel>ookmarks</guimenu>
<guimenuitem><accel>A</accel>dd Bookmark   </guimenuitem><keycombo><keycap>Ctrl</keycap><keycap>D</keycap></keycombo>
<guimenuitem><accel>E</accel>dit Bookmarks </guimenuitem><keycombo><keycap>Ctrl</keycap><keycap>B</keycap></keycombo>
		<!-- FIXME -->
	      </literallayout>
	    </textobject>
	  </mediaobject>
	</figure>
	<para>Provide a <guimenu>Bookmarks</guimenu> menu for browsers.</para>
      </sect2>
      <sect2 id="menu-standard-go">
	<title>Go</title>
	<figure id="generic-browser-go-menu">
	  <title>A generic browser Go menu</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/generic-browser-go-menu.png" format="PNG"/>
	    </imageobject>
	    <textobject>
<literallayout class="monospaced">
<guimenu><accel>G</accel>o</guimenu>
<guimenuitem><accel>B</accel>ack       </guimenuitem>
<guimenuitem><accel>F</accel>orward    </guimenuitem>
<guimenuitem><accel>U</accel>p         </guimenuitem>
<guimenuitem><accel>R</accel>eload     </guimenuitem>
<guimenuitem><accel>S</accel>top       </guimenuitem>
<guimenuitem><accel>H</accel>ome       </guimenuitem>
<guimenuitem><accel>L</accel>ocation...</guimenuitem>
</literallayout>
	    </textobject>
	  </mediaobject>
	</figure>
	<figure id="generic-document-go-menu">
	  <title>A generic document Go menu</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/generic-document-go-menu.png" format="PNG"/>
	    </imageobject>
	    <textobject>
<literallayout class="monospaced">
<guimenu><accel>G</accel>o</guimenu>
<guimenuitem><accel>P</accel>revious Page  </guimenuitem>
<guimenuitem><accel>N</accel>ext Page      </guimenuitem>
<guimenuitem><accel>J</accel>ump to Page...</guimenuitem>
-
<guimenuitem><accel>F</accel>irst Page     </guimenuitem>
<guimenuitem><accel>L</accel>ast Page      </guimenuitem>
</literallayout>
	    </textobject>
	  </mediaobject>
	</figure>
	<para>FIXME</para>
      </sect2>

<!-- CFB Commenting out until we have anything to go on it :/
      <sect2 id="menu-standard-tools">
	<title>Tools</title>
	<figure id="generic-tools-menu">
	  <title>A generic Tools menu</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/generic-tools-menu.png" format="PNG"/>
	    </imageobject>
	    <textobject>
	      <literallayout class="monospaced">
<guimenu><accel>T</accel>ools</guimenu>
	      </literallayout>
	    </textobject>
	  </mediaobject>
	</figure>
	<para>FIXME</para>
      </sect2>

-->

      <sect2 id="application-windows-menu">
	<title>Windows</title>
	<figure id="generic-windows-menu">
	  <title>A generic Windows menu</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/generic-windows-menu.png" format="PNG"/>
	    </imageobject>
	    <textobject>
	      <literallayout class="monospaced">
<guimenu><accel>W</accel>indows</guimenu>
<guimenuitem><accel>S</accel>ave All</guimenuitem>
<guimenuitem><accel>C</accel>lose All</guimenuitem>
	      </literallayout>
	    </textobject>
	  </mediaobject>
	</figure>
	<para>Avoid presenting a multiple document interface (MDI).</para>
	<para>If the application presents an MDI, provide a Windows menu for commands which apply to all of the application's windows. Provide a list of the application's primary windows to allow them to be raised.</para>
	<para>The Windows menu may also be labelled <guimenu><accel>D</accel>ocuments</guimenu>, <guimenu><accel>B</accel>uffers</guimenu>, or similarly according to the application context.</para>
      </sect2>
      <sect2 id="menu-standard-help">
	<title>Help</title>
	<figure id="generic-help-menu">
	  <title>A generic Help menu</title>
	  <mediaobject>
	    <imageobject>
	      <imagedata fileref="images/generic-help-menu.png" format="PNG"/>
	    </imageobject>
	    <textobject>
	      <literallayout class="monospaced">
<guimenu><accel>H</accel>elp</guimenu>
<guimenuitem><accel>S</accel>earch</guimenuitem>
<guimenuitem>Help <accel>C</accel>ontents      F1</guimenuitem>
<guimenuitem><accel>A</accel>bout <replaceable>appname</replaceable></guimenuitem>
	      </literallayout>
	    </textobject>
	  </mediaobject>
	</figure>
	<variablelist>
	  <varlistentry>
	    <term>Search</term>
	    <listitem>
	      <para>Brings up a dialog allowing the user to search the application's documentation.</para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>Help Contents</term>
	    <listitem>
	      <para>Brings up the default gnome help browser with the contents page of the application's documentation.</para>
	    </listitem>
	  </varlistentry>
	  <!-- What about context-sensitive help? How will that work? Do we want to give it the F1 shortcut? -->
	  <varlistentry>
	    <term>About <replaceable>appname</replaceable></term>
	    <listitem>
	      <para>Brings up the About dialog for the application. This dialog contains the name and version number of the application, a short description of what the application does, contact details of the authors, a copyright notice, and a pointer to the license under which the application is made available.</para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </sect2>
    </sect1>
  </chapter>
