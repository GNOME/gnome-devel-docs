<?xml version="1.0" encoding="UTF-8"?>

  <chapter id="controls">
    
    <title>Controls</title>
    
    <sect1 id="controls-usage">

      <title>Using Controls Effectively</title>

      <para>GNOME provides a set of controls, also known as widgets, which allow users to interact with your applications. Using these controls appropriately and not altering their standard behavior is important.  This allows users to predict the effects of their actions, and thus learn to use your application more quickly and efficiently. Controls that behave in non-standard ways break the user's mental model of how your application works, and dilute the meaning of the GUI's visual language.</para>
    </sect1>
    
    <sect1 id="controls-terminology">
      <title>Terminology</title>
      <para>Although they are known as &quot;widgets&quot; in the GNOME APIs and developer documentation, do not use this term in your user interface or user documentation. Refer to them by their specific names (for example, &quot;buttons&quot; or &quot;menus&quot;), or by the generic name &quot;controls&quot;.</para>
    </sect1>
    
    <sect1 id="controls-sensitivity">
      <title>Sensitivity</title>
      <para>Sometimes it does not make sense to allow the user to interact with a control in the current context, for example, to press a <guilabel>Paste</guilabel> button when the clipboard is empty. At these times, make the control insensitive (for example, using the <ulink url="http://developer.gnome.org/doc/API/2.0/gtk/gtkwidget.html#GTK-WIDGET-SET-SENSITIVE"><function>gtk_widget_set_sensitive()</function></ulink> function, for GTK controls) to minimize the risk of user error.  While a control is insensitive, it will appear dimmed and will not be able to receive the focus (although assistive technologies will still be able to detect and report it).</para>
      
      <para>It is usually better to make a control insensitive than to hide it altogether.  This way, the user can learn about functionality they may be able to use later, even if it is not available right now.</para>
      
     <figure>
	<title>Two check boxes: the top one is sensitive and will therefore respond to clicking, the lower is insensitive and will not respond</title>
	
	<mediaobject><imageobject>
	    <imagedata fileref="images/controls-sensitivity.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase>Screenshot comparing the visual appearance of sensitive and insensitive check box controls</phrase>
	  </textobject>
	</mediaobject>
	
      </figure>
      
      <para>Sometimes, however, a large group of controls always become insensitive or sensitive simultaneously as the direct result of user action, such as checking a box or pressing a button.  In this case it is sometimes better to hide or show the controls (for example, using the <ulink url="http://developer.gnome.org/doc/API/2.0/gtk/gtkwidget.html#GTK-WIDGET-SHOW"><function>gtk_widget_show()</function></ulink> and <ulink url="http://developer.gnome.org/doc/API/2.0/gtk/gtkwidget.html#GTK-WIDGET-HIDE"><function> gtk_widget_hide()</function></ulink> functions, for GTK controls) rather than making them sensitive or insensitive.  For example, if all the controls on a <link linkend="controls-notebooks">notebook tab</link> are insensitive, it is probably better to hide the tab altogether.</para>

      <sect2 id="controls-locked">
	<title>Locked Controls</title>

	<para>In a network-managed environment, like a computer lab, system administrators usually want to &quot;lock down&quot; the values of certain settings, or remove them from the user interface altogether.  This makes it easier for them to troubleshoot any problems that their users may encounter.  In GNOME, the correct way for the system administrator to do this is by restricting write access to the GConf keys corresponding to those settings.</para>
	
	<para>When you are designing your application, consider which settings a system administrator might want to make unavailable to users.  These may typically include:</para>
	
	<itemizedlist>
	  <listitem><para>Settings that, if set wrongly, could prevent the application from functioning at all.  For example, proxy settings in a network application.</para></listitem>
	  <listitem><para>Settings that could refer to networked resources.  For example, the Templates directory in an office application, where shared stationery such as fax cover sheets might be stored.</para></listitem>
	  <listitem><para>Settings that customize the user interface, other than those required for accessibility.  For example, certain menu, keyboard or toolbar customization options.</para></listitem>
	</itemizedlist>

	<para>When you implement the controls to change these settings, you therefore need to decide at runtime whether each one needs to be available to the user, depending on the read/write state of the GConf key that holds its value.  In the simplest case, your code for each control could look like that in the example below.</para>

	<example>
	  <title>Sample code fragment showing how to make a GConf-locked control insensitive</title>
	  <programlisting>
	if (!gconf_key_is_writable (http_proxy))
	   gtk_widget_set_sensitive (http_proxy_field, FALSE);</programlisting>
	</example>

	<para>Include a section for system administrators in your user guide, explaining which settings they can lock, and their corresponding GConf keys.</para>

	<para>You may want to explain to the user why their values cannot be edited.  You could do this in static text, tooltips or online help, depending on the situation.</para>
	
	<para>For example:</para>
	
	<figure>
	  <title>Example of a dialog whose controls have been locked in GConf by a system administrator</title> 
	  <mediaobject><imageobject>
	      <imagedata fileref="images/controls-locked.png" format="PNG"/>
	    </imageobject>
	    <textobject>
	      <phrase>Screenshot showing disabled proxy controls in a web browser's property dialog, under the caption &quot;Only the system administrator can change these settings&quot;</phrase>
	    </textobject>
	  </mediaobject>
	</figure>

	<para>In this example, the settings are still visible to the user and copiable to the clipboard, but they cannot be edited.  In some cases, it may be better to hide the affected controls altogether.  Be aware of the possible documentation issues if you do this, however.  If users see controls in user guides and screenshots that they don't see on their screen, at best they will lose faith in the user guide, and at worst they may give up trying to use your application altogether.</para>

      </sect2>
      
    </sect1>
    
    <sect1 id="controls-entry">
      <title>Text Entry Fields</title>

      <para>Text entry fields are used for entering one or more lines of plain text.  In GTK 2, the <ulink url="http://developer.gnome.org/doc/API/2.0/gtk/gtkentry.html">GtkEntry</ulink> control is used for single-line text entry, and <ulink url="http://developer.gnome.org/doc/API/2.0/gtk/gtktextview.html">GtkTextView</ulink> for multiple-line text entry.  Although GtkTextView can also be used for formatted, multi-lingual text editing and display, when used in dialogs for simple text entry its behavior should be kept as close as possible to that of a GtkEntry control.</para>

      <figure>
	  <title>Dialog fragment showing single and multi-line entry fields</title> 
	  <mediaobject><imageobject>
	      <imagedata fileref="images/controls-text.png" format="PNG"/>
	    </imageobject>
	    <textobject>
	      <phrase>Screenshot of dialog fragment containing both single and multi-line entry fields</phrase>
	    </textobject>
	  </mediaobject>
	</figure>

      <para>Recommendations:</para>
      <itemizedlist>
	
	<listitem><para>Label the entry field with a text label above it or to its left, using <link linkend="layout-capitalization">sentence capitalization</link>. Provide an access key in the label that allows the user to give focus directly to the entry field.</para></listitem>

	<listitem><para>Right-justify the contents of entry fields that are used only for numeric entry, unless the convention in the user's locale demands otherwise.  This is useful in windows where the user might want to compare two numerical values in the same column of controls.  In this case, ensure the right edges of the relevant controls are also aligned.</para></listitem>

	<listitem><para>When the user gives focus to an entry field using the keyboard, place the text cursor at the end of the existing text and highlight its contents (but don't overwrite the existing PRIMARY clipboard selection).  This makes it easy to immediately overtype or append new text, the two most common operations performed on entry fields.</para></listitem> 
	
	<listitem><para>Size text entry fields according to the likely size of the input.  This gives a useful visual cue to the amount of input expected, and breaks up the dialog making it easier to scan.  Don't make all the fields in the dialog the same width just to make everything line up nicely.</para></listitem>
	<listitem><para>In an instant-apply <link linkend="utility-windows">property or preference window</link>, validate the contents of the entry field when it loses focus, not after each keypress.</para></listitem>

	<listitem><para>Provide a static text prompt for text boxes that require input in a particular format or in a particular unit of measurement.  For example:</para>
	  
	  <figure>
	    <title>Text entry field showing required input format in an adjacent static text label</title> 
	    <mediaobject><imageobject>
		<imagedata fileref="images/controls-text-prompt.png" format="PNG"/>
	      </imageobject>
	      <textobject>
		<phrase>A text entry field in which the user must input a time, with the label &quot;hh:mm&quot; beside it to indicate the required format</phrase>
	      </textobject>
	    </mediaobject>
	  </figure>
	  
	</listitem>
	
	<listitem><para>Where possible, provide an additional or alternative control that limits the required input to the valid range. For example, provide a <link linkend="controls-spin-boxes">spinbox</link> or <link linkend="controls-sliders">slider</link> if the required input is one of a fixed range of integers, or provide access to a <ulink url="http://developer.gnome.org/doc/API/2.0/gtk/gtkcalendar.html">GtkCalendar</ulink> control if the user has to enter a valid date:</para>  

	  <figure>
	    <title>Text entry field requiring a date as input, with a button beside it to pop up a GtkCalendar control to simplify the task</title> 
	    <mediaobject><imageobject>
		<imagedata fileref="images/controls-text-choose.png" format="PNG"/>
	      </imageobject>
	      <textobject>
		<phrase>A text entry field in which the user must input a date, with a button labelled &quot;Choose&quot; beside it that opens a GtkCalendar control to simplify the task</phrase>
	      </textobject>
	    </mediaobject>
	  </figure>
	  
	  <para>This is less error-prone than expecting the user to format their text input in some arbitrary format.  You may still want to provide the entry field control as well, however, for expert users who are familiar with the required format.</para>
	  
	<listitem><para>If you implement an entry field that accepts only keystrokes valid in the task context, such as digits, play the system warning beep when the user tries to type an invalid character.  If the user types three invalid characters in a row, display an <link linkend="alert-windows">alert</link> that explains the valid inputs for that textfield.</para></listitem>

	</listitem>

      </itemizedlist>

      <sect2 id="controls-text-return">
	<title>Behavior of Return key</title>
	
	<para>Normally, pressing <keycap>Return</keycap> in a dialog should activate the dialog's default button, unless the focused control uses <keycap>Return</keycap> for its own purposes.  You should set therefore set the <ulink url="http://developer.gnome.org/doc/API/2.0/gtk/gtkentry.html#GTK-ENTRY-SET-ACTIVATES-DEFAULT"><function>activates-default</function></ulink> property of most entry fields to TRUE.  (Note that GtkTextView does not have such a setting&mdash; pressing <keycap>Return</keycap> always inserts a new line.).</para>
	
	<para>However, if your dialog contains several entry fields that are usually filled out in order, for example <guilabel>Name</guilabel>, <guilabel>Address</guilabel> and <guilabel>Telephone Number</guilabel>, consider setting the <function>activates-default</function> property on those entry fields to FALSE.  Pressing <keycap>Return</keycap> should then move focus on to the next control instead.  Doing this will help prevent the user from accidentally closing the window before they have entered all the information they wanted to.</para>

	<para>As a further safeguard, remember not to set the default button in a dialog until the minimum amount of required information has been entered, for example, both a username and a password in a login dialog.  Again, in this case you should move focus to the next control when the user presses <keycap>Return</keycap>, rather than just ignoring the keypress.</para>

	<para>If you need to provide a keyboard shortcut that activates the default button while a GtkTextView control has focus, use <keycombo><keycap>Ctrl</keycap><keycap>Return</keycap></keycombo>.</para>
	
	<note><title>Note</title>
	  <para>GTK does not currently move focus to the next control when <keycap>Return</keycap> is pressed and either <function>activates-default=FALSE</function>, or there is no default button in the window.  For now, <keycap>Return</keycap> does nothing in these situations, so you will have to implement the focus change behavior yourself.</para>
	</note>
	
      </sect2>
      
      <sect2 id="controls-text-tab">
	<title>Behavior of Tab key</title>

	<para>Normally, pressing <keycap>Tab</keycap> in a single-line entry field should move focus to the next control, and in a multi-line entry field it should insert a tab character.  Pressing <keycombo><keycap>Ctrl</keycap><keycap>Tab</keycap></keycombo> in a multi-line entry field should move focus to the next control.</para>

	<para>If you need to provide a keyboard shortcut that inserts a tab character into a single line entry field, use <keycombo><keycap>Ctrl</keycap><keycap>Tab</keycap></keycombo>.  There are unlikely to be many situations where this is useful, however.</para>

	<note><title>Pending patch</title>
	  <para>There is a patch in bugzilla (bugid=<ulink url="http://bugzilla.gnome.org/show_bug.cgi?id=53763">53763</ulink>) that adds an <function>allow_tab_characters</function> function to GtkEntry controls.  This allows you to specify on a per-control basis whether <keycap>Tab</keycap> should insert a tab character or not.  It is currently not known whether this patch is likely to make it into a future version of gtk.</para>
	</note>

      </sect2>
      
    </sect1>
    
    <sect1 id="controls-spin-boxes">
      <title>Spin Boxes</title>

      <para>A spin box is a text box that accepts a range of values. It incorporates two arrow buttons that allow the user to increase or decrease the current value by a fixed amount.</para>

      <figure>
	<title>A spin box used to input an integral value</title> 
	<mediaobject><imageobject>
	    <imagedata fileref="images/controls-spin-box.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase>A simple spin box used to specify the spacing between applets on a panel</phrase>
	  </textobject>
	</mediaobject>
      </figure>

      <para>Recommendations:</para>
      
      <itemizedlist>
	
	<listitem><para>Use spin boxes for numerical input only.  Use a list or option menu when you need the user to select from fixed data sets of other types.</para></listitem>

	<listitem><para>Use a spin box if the numerical value is meaningful or useful for the user to know, and the valid input range is unlimited or fixed at one end only.  For example, a control for specifying the number of iterations of some action, or a timeout value.  If the range is fixed at both ends, or the numerical values are arbitrary (for example, a volume control), use a slider control instead.</para></listitem>
	
	<listitem><para>Label the spin box with a text label above it or to its left, using <link linkend="layout-capitalization">sentence capitalization</link>. Provide an access key in the label that allows the user to give focus directly to the spin box.</para></listitem>	
		
	<listitem><para>Right-justify the contents of spin boxes, unless the convention in the user's locale demands otherwise.  This is useful in windows where the user might want to compare two numerical values in the same column of controls.  In this case, ensure the right edges of the relevant controls are also aligned.</para></listitem>

      </itemizedlist>
      
      
    </sect1>
    
    <sect1 id="controls-sliders">
      
      <title>Sliders</title>
      
      <para>A slider allows the user to quickly select a value from a fixed, ordered range, or to increase or decrease the current value.  The control looks like the type of slider that you might find on an audio mixing desk or a hi-fi's graphic equalizer.  In GTK, you implement a slider using the GtkHScale or GtkVScale controls, for horizontal or vertical sliders respectively.</para>

      <figure>
	<title>A simple slider control</title>
	<mediaobject><imageobject>
	    <imagedata fileref="images/controls-slider.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase>A slider control used to change the stereo audio balance between left and right speakers</phrase>
	  </textobject>
	</mediaobject>
      </figure>
      
      <para>Recommendations:</para>
      
      <itemizedlist>
	
	<listitem><para>Use a slider when:</para>
	  <itemizedlist>
	    <listitem><para>adjusting the value relative to its current value is more important than choosing an absolute value.  For example, a volume control: the average user will usually think about turning the volume up or down to make a sound louder or quieter, rather than setting the peak output to a specific decibel value.</para></listitem>
	    <listitem><para>it is useful for the user to control the rate of change of the value in real time.  For example, to monitor the effects of a color change in a live preview window as they drag the RGB sliders.</para></listitem>
	    
	  </itemizedlist>
	</listitem>
	
	<listitem><para>Label the slider with a text label above it or to its left, using <link linkend="layout-capitalization">sentence capitalization</link>. Provide an access key in the label that allows the user to give focus directly to the slider.</para></listitem>	

	<listitem><para>Mark significant values along the length of the slider with text or tick marks.  For example the left, right and center points on an audio balance control (see example above).</para></listitem>

	<listitem><para>For large ranges of integers (more than about 20), and for ranges of floating point numbers, consider providing a text box or spin box that is linked to the slider's value.  This allows the user to quickly set or fine-tune the setting more easily than they could with the slider control alone:</para>
	  <figure>
	    <title>Slider controls with linked spin boxes for direct numeric entry or fine adjustment</title>
	    <mediaobject><imageobject>
		<imagedata fileref="images/controls-slider-spinbox.png" format="PNG"/>
	      </imageobject>
	      <textobject>
		<phrase>Three slider controls used to change RGB values, each with a spinbox beside them to facilitate direct numeric entry</phrase>
	      </textobject>
	    </mediaobject>
	  </figure>
	</listitem>
	
      </itemizedlist>
      
    </sect1>
    
    <sect1 id="controls-buttons">
      <title>Buttons</title>
      
      <para>A button initiates an action when the user clicks it.</para>

      <figure>
	<title>Typical GTK buttons as found in a modal dialog</title>
	
	<mediaobject><imageobject>
	    <imagedata fileref="images/controls-buttons.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase>OK and Cancel buttons as found in a modal dialog</phrase>
	  </textobject>
	</mediaobject>
	
      </figure>
      
      <para>Recommendations:</para>
      
      <itemizedlist>
	<listitem><para>Label all buttons with direct commands (imperative verbs), using <link linkend="layout-capitalization">book title capitalization</link>.  For example, <guilabel>Save</guilabel>, <guilabel>Sort</guilabel> or <guilabel>Update Now</guilabel>.  Provide an access key in the label that allows the user to directly activate the button from the keyboard.</para></listitem>
	
	<listitem><para>After pressing a button, the user should expect to see the result of their action within 1 second, for example, closing the window or opening another.  See the <link linkend="feedback">Feedback</link> chapter for guidance on what to do if your application cannot respond this quickly.</para></listitem>
	
	<listitem><para>Use an ellipsis (...) at the end of the label if the action requires further input from the user before it can be carried out.  For example, <guilabel>Save As...</guilabel> or <guilabel>Find...</guilabel>.  Note that you should not add an ellipsis to commands like <guilabel>Properties</guilabel>, <guilabel>Preferences</guilabel>, or <guilabel>Settings</guilabel>, as these open windows that do not <emphasis>require</emphasis> further input.</para></listitem>
	
	<listitem><para>Once a dialog is displayed, do not change its default button from one button to another.  You may dynamically add or remove default status from the same button if it helps prevent user error.  Changing the default from one button to another can be confusing and inefficent, however, especially for users relying on assistive technologies.</para></listitem>
	
	<listitem><para>If your button can display text, an icon, or both, choose which label to display at runtime according to the user's desktop preferences.  However, you may over-ride these preferences when there is no suitable icon to describe the button's action graphically, for example.</para></listitem>
	
	<listitem><para>Do not use more than one or two different sizes of button in the same window.  This will help give a pleasing uniform visual appearance to your window that makes it easier to use.</para></listitem>

	<listitem><para>Do not assign actions to double-clicking or right-clicking a button, as users are unlikely to discover them.</para></listitem>

	<listitem><para>Make invalid buttons insensitive rather than popping up an error message when the user clicks them.</para></listitem>

      </itemizedlist>
      
      <para>In a dialog, one button may be made the default button, which is shown with a different border and is activated by pressing <keycap>Return</keycap>. In general,  this will be the <guibutton>OK</guibutton> or equivalent button. However, if pressing this button by mistake could cause a loss of data, do not set a default button for the window. Do not make <guibutton>Cancel</guibutton> the default button instead.  See <link linkend="dialog-windows">Dialogs</link> for more information.</para>
      
      <para>Similarly, if it does not make sense to have a default button until several fields in the dialog have been correctly completed&mdash;for example, both the <guilabel>Username</guilabel> and <guilabel>Password</guilabel> fields in a login dialog&mdash;do not set the default button until they have both been completed.</para>
      
    </sect1>
    
    <sect1 id="controls-check-boxes">
      
      <title>Check Boxes</title>
      
      <para>Check boxes are used to show or change a setting.  Its two states, set and unset, are shown by the presence or absence of a checkmark in the labelled box.</para>
      
      <figure>
	<title>A typical group of check boxes</title>
	
	<mediaobject><imageobject>
	    <imagedata fileref="images/controls-check-boxes.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase>A typical group of five check boxes in a dialog</phrase>
	  </textobject>
	</mediaobject>
	
      </figure>
      

      <para>Recommendations:</para>

      <itemizedlist>

	<listitem><para>Do not initiate an action when the user clicks a check box.  However, if used in an instant-apply <link linkend="utility-windows">property or preference window</link>, update the setting represented by the check box immediately.</para></listitem>
	
	<listitem><para>Clicking a check box should not affect the values of any other controls. It may sensitize, insensitize, hide or show other controls, however. 
</para></listitem>
	
	<listitem><para>If toggling a check box affects the sensitivity of other controls, place the check box immediately above or to the left of the controls it affects to indicate that the controls are dependent on the state of the check box. (pic required)
</para></listitem>
	
	<listitem><para>Use <link linkend="layout-capitalization">sentence capitalization</link> for check box labels, for example <guilabel>Use custom font</guilabel></para></listitem>
	
	<listitem><para>Label check boxes to clearly indicate the effects of both their checked and unchecked states, for example, <guilabel>Show icons in menus</guilabel>.  Where this proves difficult, consider using two radio buttons instead so both states can be given labels.  For example, rather than a checkbox labelled <guilabel>Status bar progress meter is on the right</guilabel>, use radio buttons labelled <guilabel>Right</guilabel> and <guilabel>Left</guilabel> under the label <guilabel>Status bar progress meter position:</guilabel> (FIXME: make this into a picture).</para></listitem>

	<listitem><para>Provide an access key in all check box labels that allows the user to set or unset the check box directly from the keyboard.</para></listitem>
	
	<listitem><para>If the check box represents a setting in a multiple selection that is set for some objects in the selection and unset for others (for example, the "read only" property of three selected files), show the check box in its mixed state. (picture required)</para></listitem>
	
	<listitem><para>Label a group of check boxes with a descriptive heading above or to the left of the group.</para></listitem>

	<listitem><para>Use a frame around the group if necessary, but remember that blank space often works just as well and results in a less visually-cluttered dialog.</para></listitem>
		
	<listitem><para>Do not place more than about eight check boxes under the same heading.  If you need more than eight, try to use blank space, heading labels or frames to divide them into smaller groups.  Otherwise, consider using a check box list instead&mdash; but you probably also need to think about how to simplify your user interface.</para></listitem>

	<listitem><para>Try to align groups of check boxes vertically rather than horizontally, as this makes them easier to scan visually.  Use horizontal or rectangular alignments only if they greatly improve the layout of the window.</para></listitem>

      </itemizedlist>
      
      <para>When a check box is showing the properties of a multiple selection, it may be in the mixed state.  In this situation:</para>
      
      <itemizedlist>
	
	<listitem><para>clicking the box once should check the box, applying that setting (when confirmed) to all the selected objects</para></listitem>
	
	<listitem><para>clicking the box a second time should uncheck the box, removing that setting (when confirmed) to all the selected objects</para></listitem>
	
	<listitem><para>clicking the box a third time should return the box to its mixed state, restoring each selected object's original value for that setting (when confirmed)</para></listitem>
	
      </itemizedlist>      
      
    </sect1>
    
    <sect1 id="controls-radio-buttons">
      
      <title>Radio Buttons</title>
      
      <para>Radio buttons are used in groups to select from a mutually exclusive set of options. Only one radio button within a group may be set at any one time. As with check boxes, do not use radio buttons to initiate actions.</para>

      <figure>
	<title>A typical group of radio buttons</title>
	
	<mediaobject><imageobject>
	    <imagedata fileref="images/controls-radio-buttons.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase>A typical group of three radio buttons in a dialog</phrase>
	  </textobject>
	</mediaobject>
	
      </figure>
      

      <para>Recommendations:</para>
      <itemizedlist>

	<listitem><para>Only use radio buttons in groups of at least two, never use a single radio button on its own.  To represent a single setting, use a check box or two radio buttons, one for each state.</para></listitem>

	<listitem><para>Exactly one radio button should be set in the group at all times.  The only exception is when the group is showing the properties of a multiple selection, when one or more of the buttons may be in their mixed state.</para></listitem>

	<listitem><para>Do not initiate an action when the user clicks a radio button.  However, if used in an instant-apply <link linkend="utility-windows">property or preference window</link>, update the setting represented by the radio button immediately.</para></listitem>

	  <listitem><para>Clicking a radio button should not affect the values of any other controls. It may sensitize, insensitize, hide or show other controls, however.</para></listitem>
      
      <listitem><para>If toggling a radio button affects the sensitivity of other controls, place the radio button immediately to the left of the controls it affects to indicate that the controls are dependent on the state of the radio button. (pic required)
</para></listitem>

	<listitem><para>Use <link linkend="layout-capitalization">sentence capitalization</link> for radio button labels, for example <guilabel>Switched movement</guilabel>.  Provide an access key in the label that allows the user to set the radio button directly from the keyboard.</para></listitem>

	<listitem><para>If the radio button represents a setting in a multiple selection that is set for some objects in the selection and unset for others (for example, the border style of a column of selected cells in a table), show the radio button in its mixed state. (picture required)</para></listitem>

	<listitem><para>Label a group of radio buttons with a descriptive heading above or to the left of the group.</para></listitem>
	
	<listitem><para>Use a frame around the group if necessary, but remember that blank space often works just as well and results in a less visually-cluttered dialog.</para></listitem>
	
	<listitem><para>Do not place more than about eight radio buttons under the same heading.  If you need more than eight, consider using a single-selection <link linkend="controls-lists">list</link> instead&mdash; but you probably also need to think about how to simplify your user interface.</para></listitem>
	
	<listitem><para>Try to align groups of radio buttons vertically rather than horizontally, as this makes them easier to scan visually.  Use horizontal or rectangular alignments only if they greatly improve the layout of the window.</para></listitem>

      
      </itemizedlist>

      <para>When a radio button group is showing the properties of a multiple selection, one or more buttons may be in the mixed state.  In this situation, clicking any radio button in the group should set the clicked button, and unset all the others in the group.  Thereafter, the group should behave as a normal radio button group&mdash; there should be no way to reset a radio button to its mixed state by clicking on it.  Provide a <guibutton>Reset</guibutton> button or equivalent in the window that allows the previous mixed settings to be restored without closing the window or cancelling the dialog.</para>
      
      <note><title>For discussion</title>
	<para>Can we suggest any better ways of manipulating radio button groups in mixed state that do not rely on having a Reset button? I can think of one that is more in line with the suggestion for checkboxes, but it would not be terribly intuitive to use and probably a hassle to implement as well.</para>
      </note>
      
    </sect1>
    
    <sect1 id="controls-toggle-buttons">
      
      <title>Toggle Buttons</title>
      
      <para>Toggle buttons look similar to regular <link linkend="controls-buttons">Buttons</link>, but are used to show or change a state rather than initiate an action.  A toggle button's two states, set and unset, are shown by its appearing &quot;pushed in&quot; or &quot;popped out&quot; respectively.</para>
      
      <figure>
	<title>A typical group of toggle buttons</title>
	
	<mediaobject><imageobject>
	    <imagedata fileref="images/controls-toggle-buttons.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase>A group of four toggle buttons representing a choice of measurement units: inches, centimeters, feet and meters</phrase>
	  </textobject>
	</mediaobject>
	
      </figure>
      
      <para>Recommendations:</para>
      
      <itemizedlist>
	
	<listitem><para>Do not use groups of toggle buttons in dialogs unless space constraints force you to do so, or you need to provide consistency with a toolbar in your application.  <link linkend="controls-check-boxes">Check boxes</link> or <link linkend="controls-radio-buttons">radio buttons</link> are usually preferable, as they allow more descriptive labels and are less easily-confused with other types of control.</para></listitem>
	
	<listitem><para>Only use toggle buttons in groups, so they are not mistaken for regular buttons.  Make the group behave like either a group of check boxes where none, one or more of the buttons may be set at once, or a group of radio buttons, where exactly one button may be set at once, and setting one button unsets the others.</para></listitem>

	<listitem><para>Provide an access key in the label of all toggle buttons that allows the user to set or unset the button directly from the keyboard.</para></listitem>
	
	<listitem><para>Label a group of toggle buttons with a descriptive heading above or to the left of the group, as you would with a group of check boxes or radio buttons.</para></listitem>

	<listitem><para>Use a frame around the group of buttons if necessary, but remember that blank space often works just as well and results in a less visually-cluttered dialog.</para></listitem>
	
	<listitem><para>Try to align groups of toggle buttons horizontally rather than vertically.  This is how toggle buttons normally appear on a toolbar, so the user will be more familiar with this arrangement.</para></listitem>

	<listitem><para>Do not leave any space between toggle buttons in a group, otherwise they may look unrelated or may be mistaken for regular buttons.</para></listitem>

	<listitem><para>Use <link linkend="layout-capitalization">book title capitalization</link> for toggle button labels, for example <guibutton>No Wallpaper</guibutton>, <guibutton>Embossed Logo</guibutton>.</para></listitem>

	<listitem><para>If your toggle button can display text, an icon, or both, choose which label to display at runtime according to the user's desktop preferences.</para></listitem>
	
	<listitem><para>Use the same text or graphical label for a toggle button whether it is set or unset.</para></listitem>

	<listitem><para>If the toggle button represents a setting in a multiple selection that is set for some objects in the selection and unset for others (for example, the Bold Text toolbar button for a selected paragraph), show the button in its mixed state. (picture required)</para></listitem>
	
      </itemizedlist>
     
    </sect1>

    
 <sect1 id="controls-option-menus">

      <title>Option Menus</title>
      
      <para>Option menus are used to select from a mutually exclusive set of options. They can be useful when there is insufficient space in a window to use a group of radio buttons or a single-selection list, with which they are functionally equivalent.</para>
      
       <figure>
	<title>An option menu showing current selection (left) and the list of available choices when clicked on (right)</title>
	
	<mediaobject><imageobject>
	    <imagedata fileref="images/controls-option-menu.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase>One picture of an option menu displaying its current setting, and another showing its popup menu of available choices when clicked on</phrase>
	  </textobject>
	</mediaobject>
	
      </figure>
      
      <para>Recommendations:</para>
      
      <itemizedlist>

	<listitem><para>Do not use option menus with fewer than three items, or more than about ten.  To offer a choice of two options, use <link linkend="controls-radio-buttons">radio buttons</link> or <link linkend="controls-toggle-buttons">toggle buttons</link>.  To offer a choice of more than ten options, use a <link linkend="controls-lists">list</link>.</para></listitem>
	
	<listitem><para>Do not initiate an action when the user selects an item from an option menu.  However, if used in an instant-apply <link linkend="utility-windows">property or preference window</link>, update the setting that the menu represents immediately.</para></listitem>
	
	<listitem><para>Selecting an item from an option menu should not affect the values of any other controls. It may sensitize, insensitize, hide or show other controls, however.</para></listitem>
		
	<listitem><para>Label the option menu with a text label above it or to its left, using <link linkend="layout-capitalization">sentence capitalization</link>.  (pic required).  Provide an access key in the label that allows the user to give focus directly to the option menu.</para></listitem>

	<listitem><para>Use <link linkend="layout-capitalization">sentence capitalization</link> for option menu items, for example <guilabel>Switched movement</guilabel></para></listitem>

	<listitem><para>Assign an access key to every option menu item.  Ensure each access key is unique within the enclosing window or dialog, not just within the menu.</para></listitem>

	<listitem><para>Do not assign shortcut keys to option menu items by default.  The user may assign their own shortcut keys in the usual way if they wish, however.</para></listitem>

	<listitem><para>Do not use an option menu in a situation where it may have to show a property of a multiple selection, as option menus have no concept of mixed state.  Use a group of radio or toggle buttons instead, as these can be show set, unset or mixed states.</para></listitem>
	
      </itemizedlist>
      
      <para>You should normally use <link linkend="controls-radio-buttons">radio buttons</link> or a <link linkend="controls-lists">list</link> instead of option menus, as those controls present all the available options at once without any further interaction. However, option menus may be preferable in a window where:</para>
      
      <itemizedlist>
	<listitem><para>there is little available space</para></listitem>
	<listitem><para>the list of options may change over time</para></listitem>
	<listitem><para>the contents of the hidden part of the menu are obvious from its label and the one selected item.  For example, if you have an option menu labelled &quot;Month:&quot; with the item &quot;January&quot; selected, the user might reasonably infer that the menu contains the 12 months of the year without having to look.</para></listitem>
	
      </itemizedlist>
      
      <para>Option menus can also be useful on toolbars, to replace a group of several mutually-exclusive toggle buttons.</para>
      
    </sect1>
    
    <sect1 id="controls-combo-boxes">
      
      <title>Combo Boxes</title>
      
      <para>Combo boxes combine a text entry field and a dropdown list of pre-defined values. Selecting one of the pre-defined values sets the entry field to that value.</para>

      <figure>
	<title>A combo box showing current selection (left) and the list of available choices when clicked on (right)</title>
	
	<mediaobject><imageobject>
	    <imagedata fileref="images/controls-combo.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase>One picture of a combo box entry field displaying its current selection, and another showing its dropdown list of available choices when clicked on</phrase>
	  </textobject>
	    </mediaobject>
	    
      </figure>
      
      <para>Recommendations:</para>
      
      <itemizedlist>

	<listitem><para>Only use a combo box instead of a list, option menu or radio button group when it is important that the user be able to enter a new value that is not already amongst the list of pre-defined choices.</para></listitem>
	
	<listitem><para>Do not initiate an action when the user selects an item from the list in a combo box.  If used in an instant-apply <link linkend="utility-windows">property or preference window</link>, update the setting represented by the combo box immediately if possible.  If this isn't possible due to the contents of the entry field being invalid while the user is still typing into it, update the related setting when the combo box loses focus instead.</para></listitem>


	<listitem><para>If the user types a value into the combo box that is not already in the drop-down list, add it to the list when the combo box loses focus so they can select it next time.</para></listitem>
	
	<listitem><para>Interpret user input into a combo box in a case-insensitive way.  For example, if the user types <userinput>blue</userinput>, <userinput>Blue</userinput> and <userinput>BLUE</userinput> into the same combo box on different occasions, only store one of these in the combo's dropdown list, unless your application makes a distinction between the different forms (which would not normally be a good idea).</para></listitem>

	<listitem><para>Label the combo box with a text label above it or to its left, using <link linkend="layout-capitalization">sentence capitalization</link>.  (pic required)  Provide an access key in the label that allows the user to give focus directly to the combo box.</para></listitem>
	
	<listitem><para>Use <link linkend="layout-capitalization">sentence capitalization</link> for the dropdown list items, for example <guilabel>Switched movement</guilabel></para></listitem>
		
      </itemizedlist>

    </sect1>

    <sect1 id="controls-lists">
      <title>Lists</title>
      
      <para>A list control allows the user to inspect, manipulate or select from a list of items.  Lists may have one or more columns, and contain text, graphics, simple controls, or a combination of all three.</para>
      
      <figure>
	<title>A simple two column list</title>
      	<mediaobject><imageobject>
	    <imagedata fileref="images/controls-list.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase>Picture of list control containing two unsorted columns of text</phrase>
	  </textobject>
	</mediaobject>
	
      </figure>
      
      <para>Recommendations:</para>
      
      <itemizedlist>

	<listitem><para>Always give list controls a label, positioned above or to the left of the list, in <link linkend="layout-capitalization">sentence capitalization</link>.  Provide an access key in the label that allows the user to give focus directly to the list.</para></listitem>

	<listitem><para>Do not use lists with less than about five items, unless the number of items may increase over time.  Use <link linkend="controls-check-boxes">check boxes</link>, <link linkend="controls-radio-buttons">radio buttons</link> or an <link linkend="controls-option-menus">option menu</link> if there are fewer items.</para></listitem>

	<listitem><para>Use column headers when:</para>
	  <itemizedlist>
	    <listitem><para>the list has more than one column</para></listitem>
	    <listitem><para>the list has only one column, but the user may wish to re-order the list.  This should rarely be true of single column lists.</para></listitem>
	  </itemizedlist>
	  <para>Do not use column headers if the list has a single column but sorting is not required.  The static text label above or to the left of the list is sufficient in this case.  The header row would take up unnecessary space, and the extra label would add visual clutter.</para></listitem>

	<listitem><para>Always label column headers when used.  If the column is too narrow for a sensible label, provide a tooltip for the column instead. Apart from its obvious use, this will help ensure that assistive technologies can describe the use of the column to visually impaired users.</para></listitem>

	<listitem><para>Consider using a check box list for multiple-selection lists, as these make it more obvious that multiple selection is possible:</para>
	 <figure>
	    <title>A simple check box list</title>
	    <mediaobject><imageobject>
		<imagedata fileref="images/controls-list-checkbox.png" format="PNG"/>
	      </imageobject>
	      <textobject>
		<phrase>Picture of list control with two columns.  The first column consists of checkboxes showing whether or not the corresponding item in the second column is selected for further action.</phrase>
	      </textobject>
	    </mediaobject>
	  </figure>

	  <para>If you do this, you should normally set the list control itself to be single-selection, but this depends on the particular task for which it will be used.</para>
	</listitem>
	
	<listitem><para>For multiple selection lists, show the number of items currently selected in a static text label below the list, for example, <guilabel>Names selected: 3</guilabel>.  Such a label also makes it more obvious that multiple selection is possible.</para></listitem>
	
	<listitem><para>Consider providing <guibutton>Select All</guibutton> and <guibutton>Deselect All</guibutton> buttons beside multiple selection lists, if appropriate to the task.</para></listitem>
	
      </itemizedlist>
      
    </sect1>
    
    <sect1 id="controls-trees">
      <title>Trees</title>

      <para>A tree control allows the user to inspect, manipulate or select from a hierarchichal list of items.  Trees may have one or more columns, and contain text, graphics, simple controls, or a combination of all three.</para>

      <tip><title>Use trees with care!</title>
	<para>Because of their complexity compared to other controls, novice and some intermediate users often have problems using and understanding tree controls.  If your application is designed for that type of user, you might want to consider alternative ways of presenting the information, such as the Nautilus list or icon view, or the hierarchical browser lists found in <ulink url="http://www.gnustep.it/enrico/gworkspace/viewer.html">GNUstep's File Viewer</ulink>.</para>
      </tip>
      
       <figure>
	<title>A simple tree control with one level of hierarchy</title>
      	<mediaobject><imageobject>
	    <imagedata fileref="images/controls-tree.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase>Picture of tree control showing months of the year as top level nodes, and public holidays in those months as their children</phrase>
	  </textobject>
	</mediaobject>
	
      </figure>
      
      <para>Recommendations:</para>
      
      <itemizedlist>
	
	<listitem><para>Always give tree controls a label, positioned above or to the left of the tree, in <link linkend="layout-capitalization">sentence capitalization</link>.  Provide an access key in the label that allows the user to give focus directly to the tree.</para></listitem>
	
	<listitem><para>Use column headers when:</para>
	  <itemizedlist>
	    <listitem><para>the tree has more than one column</para></listitem>
	    <listitem><para>the tree has only one column, but the user may wish to re-order the tree.  This should rarely be true of single column trees.</para></listitem>
	  </itemizedlist>
	  <para>Do not use column headers if the tree has a single column but sorting is not required&mdash;the static text label above or to the left of the tree is sufficient in this case.  The header row would take up unnecessary space, and the extra label would add visual clutter.</para></listitem>
	
	<listitem><para>Always label column headers when used.  If the column is too narrow for a sensible label, provide a tooltip for the column instead. Apart from its obvious use, this will help ensure that assistive technologies can describe the use of the column to visually impaired users.</para></listitem>
	
	<listitem><para>Consider using a check box tree for multiple-selection trees, as these make it more obvious that multiple selection is possible:</para>
	  <figure>
	    <title>A simple check box tree</title>
	    <mediaobject><imageobject>
		<imagedata fileref="images/controls-tree-checkbox.png" format="PNG"/>
	      </imageobject>
	      <textobject>
		<phrase>Picture of tree control with two columns.  The first column consists of checkboxes showing whether or not the corresponding item in the second column is selected for further action.</phrase>
	      </textobject>
	    </mediaobject>
	  </figure>
	  
	  <para>If you do this, you should normally set the tree control itself to be single-selection, but this depends on the particular task for which it will be used.</para>
	</listitem>
	
	<listitem><para>For multiple selection trees, show the number of items currently selected in a static text label below the tree, for example, <guilabel>Names selected: 3</guilabel>.  Such a label also makes it more obvious that multiple selection is possible.</para></listitem>
	
	<listitem><para>Consider providing <guibutton>Select All</guibutton> and <guibutton>Deselect All</guibutton> buttons beside multiple selection trees, if appropriate to the task.</para></listitem>
	
      </itemizedlist>
      
    </sect1>
    
    
    <sect1 id="controls-notebooks">
      <title>Notebooks</title>
      <para>A notebook control is a convenient way of presenting related information in the same window, without having to display it all at the same time.  It is analagous to the divider tabs in a notebook or file cabinet.</para>

      <figure>
	<title>A notebook control with five tabs</title>
      	<mediaobject><imageobject>
	    <imagedata fileref="images/controls-notebook.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase>Picture of notebook control with five tabs</phrase>
	  </textobject>
	</mediaobject>
	
      </figure>

      <para>Recommendations:</para>
      <itemizedlist>

	<listitem><para>Do not put too many pages in the same notebook.  If you cannot see all the tabs without scrolling or splitting them into multiple rows, you are probably using too many.  If you have more than about six tabs, consider using a list control to switch between pages of controls rather than tabs. (picture required)</para></listitem>

	<listitem><para>Label tabs with <link linkend="layout-capitalization">book title capitalization</link>, and use nouns rather than verbs, for example <guilabel>Font</guilabel> or <guilabel>Alignment</guilabel>.  Try to keep all labels in a notebook the same general length.</para></listitem>

	<listitem><para>Do not assign access keys to tab labels.  Every other control on each page should be assigned an access key, however.</para></listitem>

	<listitem><para>Use tabs that are proportional to the width of their labels.  Don't just set all the tabs to the same width, as this makes them harder to scan visually, and limits the number of tabs you can fit into the notebook without scrolling. (picture would be good here)</para></listitem>

	<listitem><para>Do not design a notebook such that changing controls on one page affects the controls on any other page.  Users are unlikely to discover such dependencies.</para></listitem>
	
	<listitem><para>If a button or other control affects only one notebook page, place it on that notebook page.  If it affects every page in the notebook, place it outside the notebook control, for example beside the window's <guibutton>OK</guibutton> and <guibutton>Cancel</guibutton> buttons.</para></listitem>

      <listitem><para>Although the contents of each page in a notebook will take up a different amount of space, do not use larger than normal spacing around the controls in the &quot;emptier&quot; pages, and do not center the controls on the page.</para></listitem>

      <listitem><para>If your tab labels include icons, choose whether or not to show the icons at runtime based on the user's preferences.  Always show the text part of the label, however.</para></listitem>

      </itemizedlist>
      
      <para>For future consideration: it would be good if the notebook control supported a standard way of showing that a tab had pending changes, e.g. changing the font or label colour to some (themed) alternative.  Should we suggest a way of doing this now, which some app developers would probably implement badly (e.g. not using theming) or not at all, or should we just wait until GTK supports it...?</para>

    </sect1>
    
    <sect1 id="controls-progress-bars">
      
      <title>Progress Bars</title>
      
      <para>Progress bars are visual indicators of the progress of a task being carried out by the application.</para>
      
      <para>There are two types of progress indicator: &quot;measured&quot; progress, which shows what proportion of the task has been completed, and &quot;indeterminate&quot; progress, which only shows that the application is busy.  Normally, the progress bar control is used to show measured progress.</para>

      <figure><title>A measured (&quot;time remaining&quot;) progress dialog</title>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="images/progress-time.png" format="PNG"/>
	  </imageobject>
	  <textobject><phrase>A measured (&quot;time remaining&quot;) progress dialog</phrase></textobject>
	</mediaobject>
      </figure>
            
      <para>There are three styles of measured progress indicator in which you would typically use a progress bar control:</para>
      <itemizedlist>
	<listitem><para><link linkend="time-remaining">Time remaining</link></para></listitem>
	<listitem><para><link linkend="proportion-completed">Proportion completed</link></para></listitem>
	<listitem><para><link linkend="typical-time">Typical time</link></para></listitem>
      </itemizedlist>

      <para>Always use a measured progress bar when the length of a task can be precisely or approximately predicted.  Otherwise, use an <link linkend="indeterminate-progress">indeterminate progress indicator</link> or a <link linkend="progress-checklists">progress checklist</link>.</para>
      
      <para>See the <link linkend="feedback">Feedback</link> chapter for full details on when and how to use progress bars appropriately.</para>

    </sect1>
    
    <sect1 id="controls-status-bars">
      
      <title>Status Bars</title>
      
      <para>A status bar is an area at the bottom of a window that can be used to display brief information about the status of the application.</para>

      <figure>
	<title>A simple status bar at the bottom of a document window</title>
	<mediaobject><imageobject>
	    <imagedata fileref="images/controls-status-bar.png" format="PNG"/>
	  </imageobject>
	  <textobject>
	    <phrase>A status bar at the bottom of a document window, showing current zoom level and a status message indicating that the document has been modified since it was last saved</phrase>
	  </textobject>
	</mediaobject>
      </figure>
      
      <para>Recommendations:</para>
      
      <itemizedlist>
	
	<listitem><para>Use status bars only in application or document windows.  Do not use them in dialogs, alerts or other secondary windows.</para></listitem>
	<listitem><para>Place status bars along the bottom of a window, not in any other location.</para></listitem>
	
	<listitem><para>Only use status bars to display non-critical information.  This might include:</para>

	  <itemizedlist>
	    
	    <listitem><para>information relating to the task the user is currently performing.  For example, while using the selection tool in a drawing application, &quot;Hold Shift to extend the selection&quot;</para></listitem>
	    
	    <listitem><para>progress of a background operation.  For example, &quot;Sending to printer&quot;, &quot;Printing page 10 of 20&quot;, &quot;Printing Complete&quot;.</para></listitem>
	    
	    <listitem><para>a description of the control or area of the window under the mouse pointer.  For example, &quot;Drop files here to upload them&quot;</para></listitem>
	    
	  </itemizedlist>
	  
	  <para>Remember that status bars are normally in the user's peripheral vision, and can even be turned off altogether using the application's <menuchoice><guimenu>View</guimenu><guimenuitem>Status Bar</guimenuitem></menuchoice> menu item.  The user may therefore never see anything you display there, unless they know when and where to look for it.</para></listitem>

	<listitem><para>When there is no interesting status to report, leave a status bar panel blank rather than displaying something uninformative like &quot;Ready&quot;.  This way, when something interesting does appear in the status bar, the user is more likely to notice it.</para></listitem>

	<listitem><para>Consider making the text panels in your status bar respond to a double-click.  For example, double-clicking a panel that displays the current document zoom level could open the <menuchoice><guimenu>View</guimenu><guimenuitem>Zoom</guimenuitem></menuchoice> dialog.  If you need something on the status bar to respond to a single click, use a regular button that the user can click, rather than a text panel.</para></listitem>

      </itemizedlist>
            
    </sect1>    

</chapter>

