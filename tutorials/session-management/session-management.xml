<?xml version="1.0"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                  "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY GFDL SYSTEM "fdl-appendix.xml">
]>

<article id="index">
  <articleinfo>
    <title>Session Management for GNOME Applications</title>

    <authorgroup>
      <author>
	<firstname>Federico</firstname>
	<surname>Mena Quintero</surname>
	<affiliation>
	  <address>
	    <email>federico@gnu.org</email>
	  </address>
	</affiliation>
      </author>

      <author>
	<firstname>Havoc</firstname>
	<surname>Pennington</surname>
	<affiliation>
	  <address>
	    <email>hp@redhat.com</email>
	  </address>
	</affiliation>
      </author>
    </authorgroup>

    <copyright>
      <year>2002</year>
      <holder>The Free Software Foundation</holder>
    </copyright>

    <legalnotice id="legalnotice">
      <para>
	Permission is granted to copy, distribute and/or modify this
	document under the terms of the <ulink type="help"
	url="gnome-help:gnufdl"><citetitle>GNU Free Documentation
	License</citetitle></ulink>, Version 1.1 or any later version
	published by the Free Software Foundation with no Invariant
	Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
	copy of the license can be found <ulink type="help"
	url="gnome-help:fdl">here</ulink> or in the file COPYING-DOCS
	which shipped as part of this package.
      </para>

      <para>
	Many of the names used by companies to distinguish their
	products and services are claimed as trademarks. Where those
	names appear in any GNOME documentation, and those trademarks
	are made aware to the members of the GNOME Documentation
	Project, the names have been printed in caps or initial caps.
      </para>
    </legalnotice>

    <!-- Revision history -->

    <revhistory>
      <revision>
	<revnumber>0.1</revnumber>
	<date>2002/02/27</date>
	<revdescription>
	  <para>
	    Initial version.  This document is maintained in the
	    <ulink type="http" url="http://cvs.gnome.org">GNOME CVS
	    repository</ulink> in the <filename
	    class="directory">gnome-devel-docs</filename> module under
	    <filename
	    class="directory">gnome-devel-docs/tutorials/session-management</filename>.
	  </para>
	</revdescription>
      </revision>
    </revhistory>

    <!-- Abstract -->

    <abstract>
      <para>
	This document describes the basic concepts behind session
	management, which involves an application saving all or most
	of its state so that it can be restored later.  We describe
	the basics of how session management works in GNOME and what
	applications are expected to do to support session management.
      </para>
    </abstract>
  </articleinfo>

  <!-- Introduction -->

  <sect1 id="introduction">
    <title>Introduction</title>

    <para>
      Session management, or SM for short, involves the capability to
      shut down your current session (e.g. log out) and, when you log
      back in, to have all your programs and documents restored just
      as they were when you logged out.  This is very useful when you
      are in the middle of working on something and you must log out.
      Restoring the programs you had open and their respective
      documents can be very tedious and a time waster.  A good session
      manager plus support for SM in applications is very useful if
      implemented properly.  This document describes how session
      management works in the GNOME desktop and what you need to do
      for your applications to support being session-managed.
    </para>

    <note>
      <para>
	The following paragraph is taken mostly from the <ulink
        url="http://developer.gnome.org/dotplan/porting/index.html">GNOME
        2.0 Porting Guide</ulink>, of which Havoc Pennington wrote the
        section on session management.
      </para>
    </note>

    <para>
      A <firstterm>session</firstterm> is a collection of application
      instances, possibly defined under some user-provided name.  For
      example, the user might have "Home" and "Work" sessions.  The
      set of application instances can be saved to disk, and then
      later restored.  Sessions are saved and restored by a special
      program called the <firstterm>session manager</firstterm>.  Each
      application instance provides the session manager with enough
      information to restart that application instance in its current
      state.
    </para>
  </sect1>

  <!-- Architcture of Session Management in GNOME -->

  <sect1 id="architecture">
    <title>Architecture of Session Management in GNOME</title>

    <para>
      A GNOME session usually gets started via the
      <command>gnome-session</command> program, which is the GNOME
      session manager.
      <footnote>
	<para>
	  The <command>gnome-session</command> program usually gets
	  run from GDM, the GNOME Display Manager.  A user could also
	  start <command>gnome-session</command> by hand from an X
	  terminal and get practically the same result.
	</para>
      </footnote>
      It takes care of starting the programs that
      must run in any GNOME desktop, like the panel, the file manager,
      and the window manager.  It also takes care of restarting the
      applications that were running the last time you logged out.
      <footnote>
	<para>
	  As we will see later, those applications must register
	  themselves with the session manager.
	</para>
      </footnote>
      Finally, when you log out from your session, the session manager
      tells the running applications to save their state so that they
      can be restored later.
    </para>

    <para>
      A session gets saved by taking a "snapshot" of a group of
      applications that are connected to the session manager.  For
      each snapshot, the session manager sends a request called
      "SaveYourself" to all application instances.  Each application
      handles this request by providing the session manager with a
      command line that, when executed, will result in an application
      instance with the same state as the currently open instance,
      <emphasis>and</emphasis> the same <firstterm>session client
      ID</firstterm>.
      <footnote>
	<para>
	  The sesssion client ID is a globally unique Latin-1 encoded
	  string identifying an application instance.  Applications
	  receive their ID from the session manager by calling
	  <function>gnome_client_get_id()</function>.  This ID may be
	  <symbol>NULL</symbol> if the application is not connected to
	  the session manager.
	</para>
      </footnote>
      For example, a terminal program with three windows open might
      give the session manager the command line <literal>terminal
      --with-window-count=3 --session-client-id=2341341534</literal>,
      or something along those lines.
    </para>

    <para>
      The user expects that windows be in their original positions
      when he restarts his session.  Saving window positions is not
      the job of applications, but rather of the window manager.  This
      cannot be stressed enough:  <emphasis>do not try to save window
      positions and/or sizes in your programs.</emphasis> We will see
      how to allow the window manager to save all of these attributes
      correctly.
    </para>

    <para>
      Note that each "SaveYourself" is independent of the others.  The
      same application instance (with the same session ID) may be
      asked to save multiple times in the same session.  Each save
      must continue to work &mdash; apps do not know which one of the
      saves will be used by the session manager.  As a result, if
      applications save persistent state, they should namespace that
      persistent state with a per-save unique key.  Unfortunately, the
      GNOME libraries have no way to generate such a key; one simple
      method might be:
<programlisting>
key = g_strdup_printf ("%d-%d-%u",
                       (int) getpid (),
                       (int) time (NULL),
                       g_random_int ());
</programlisting>
      The application would then use this key as part of the key used
      to store per-save data.
    </para>

    <para>
      The session manager will most likely not use 
    </para>

    <para>
      In short, session management in GNOME involves the following:
      <itemizedlist>
	<listitem>
	  <para>
	    The session manager (commonly
	    <command>gnome-session</command>) maintains a list of the
	    applications that are running.  When you log out, the
	    session manager saves the list of applications that were
	    running.  When you log back in, the session manager
	    restarts these applications.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    Applications save their state when they get the
	    appropriate notification from the session manager.  This
	    state involves a number of things which we will explain in
	    detail below.
	  </para>
	</listitem>

	<listitem>
	  <para>
	    The window manager is considered a normal application by
	    the session manager.  Its state is, in fact, the
	    positions, sizes, status, and stacking order of the
	    windows that are on the display.  Thus, the window manager
	    must save this information when it gets the appropriate
	    notification from the window manager.
	  </para>
	</listitem>
      </itemizedlist>
    </para>

    <sect2 id="relevant-apis">
      <title>
	Relevant Application Programming Interfaces (APIs)
      </title>

      <para>
	There are three main sections of the GNOME libraries that you
	will need to know about when making your applications
	session-aware.  They are as follows.
      </para>

      <formalpara>
	<title><classname>GnomeClient</classname></title>

	<para>
	  <classname>GnomeClient</classname> is a class in <filename
	  class="libraryfile">libgnomeui</filename> that handles
	  high-level communications to the session manager.  It is a
	  normal GTK+ object that will emit a signal when the session
	  manager wants your application to save its state, or when it
	  wants to notify a program that the session is about to end
	  and thus the program should ask the user whether he wants to
	  save any modified files.
	</para>
      </formalpara>

      <formalpara>
	<title><classname>GtkWindow</classname> functions</title>

	<para>
	  An application must set unique identifiers on all of its
	  windows so that the window manager can save their positions,
	  sizes, and other attributes correctly.  If windows are not
	  uniquely identified, the window manager will have no way of
	  distinguishing between them and will most likely yield
	  incorrect results.  <classname>GtkWindow</classname>
	  provides some functions that you can use to uniquely
	  identify your windows.
	</para>
      </formalpara>

      <formalpara>
	<title>Storage mechanisms</title>

	<para>
	  Finally, your application needs to have a way to store the
	  information about its current state.  To do this you could
	  use XML files, for example.  Most people will simply want to
	  use <application>GConf</application> or other simple
	  mechanism.
	  <footnote>
	    <para>
	      However, Havoc Pennington, the author of
	      <application>GConf</application>, says he doesn't want
	      to see session data stored in it.  However, the author
	      of this document disagrees with this view :)  See the
	      <ulink
	      url="http://developer.gnome.org/dotplan/porting/ar01s23.html">Session
	      Management</ulink> section on the GNOME 2.0 porting
	      guide for more information.
	    </para>
	  </footnote>
	</para>
      </formalpara>
    </sect2>
  </sect1>

  <sect1 id="what-to-save">
    <title>What to Save</title>

    <para>
      
    </para>
  </sect1>

  <!-- Using GnomeClient -->

  <sect1 id="using-gnome-client">
    <title>Using <classname>GnomeClient</classname></title>

    <para>
      Your programs need to use the <classname>GnomeClient</classname>
      class if you wish them to be session-managed.
      <classname>GnomeClient</classname> provides a means of
      communication between the session manager and applications.
      <classname>GnomeClient</classname> lives in
      <filename>&lt;libgnomeui/gnome-client.h&gt;</filename>.
    </para>

    <para>
      You should usually obtain a client object by calling the
      <function>gnome_master_client()</function> function.  This will
      return a client that has already contacted the session manager
      to ask it for information about the current session.  After
      obtaining the master client, your application should connect to
      the <symbol>save_yourself</symbol> and <symbol>die</symbol>
      signals on it.
    </para>

    <para>
      The master client will emit the <symbol>save_yourself</symbol>
      signal whenever the session manager asks the application to save
      its state.  Also, it will emit the <symbol>die</symbol> signal
      when the session is about to end and the application should do
      something like ask the user about what to do with unsaved
      documents.
    </para>
  </sect1>

</article>
