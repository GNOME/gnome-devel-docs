<chapter id="testing-accessibility" status="writing">
<title>GNOME Accessibility - Pre-Distribution OS Testing for Accessibility Tools</title>
<para>
This chapter is for OS distribution testers and outlines how to verify the functionality of GNOME accessibility tools prior to releasing new OS distributions.
</para>
<para>
Thank you for taking the time and care to better understand what you need to do to help ensure accessibility works on your distribution. This chapter provides methods to quickly verify that GNOME accessibility is functioning properly on your operating system distribution.
</para>

<section>
<title>Test Speech</title>
<para>
Orca uses GNOME Speech for speech synthesis.
</para>
<procedure>
<step>
<para>
Run the <application>test-speech</application> application by opening a terminal window (<keycombo><keycap>Alt</keycap><keycap>F1</keycap></keycombo> and then <guilabel>Applications - Accessories - Terminal</guilabel>) and typing <userinput>test-speech</userinput> <keycap>Enter</keycap>.
</para>
</step>
<step>
<para>
A list of speech synthesis engines should be displayed. These may include <application>eSpeak</application>, <application>Festival</application> and others. Enter the number corresponding to the speech synthesizer engines you need to test. Ideally, no errors will be encountered. If you have no  servers listed or errors are being listed, confirm you have included all the required  packages for your OS build.
</para>
</step>
<step>
<para>
Use the various tests listed by the speech engine to confirm speech and audio output.
</para>
</step>
<step>
<para>
Verify that speech works in conjunction with other audio output applications like <application>Movie Player</application> or <application>Rhythmbox Music Player</application>. If the two audio sources can't be heard simultaneously, consider the following:
</para>
<itemizedlist>
<listitem>
<para>
Shipping a speech synthesis engine with your operating system, such as eSpeak
</para>
</listitem>
<listitem>
<para>
Including <application>gnome-speech</application> and the GNOME Speech driver for the speech synthesis engine(s) you choose to ship
</para>
</listitem>
<listitem>
<para>
Exploring how to make audio work better on your distribution, especially audio mixing 
</para>
</listitem>
</itemizedlist>
</step>
</procedure>
</section>

<section>
<title>Test Braille</title>
<para>
Orca uses <application>BrlTTY</application> and <application>liblouis</application> for braille output. 
</para>
<procedure>
<step>
<para>
Verify <application>BrlTTY</application> by opening a new terminal window and typing <userinput>brltty -d /dev/term/0 -bxw -xno -p none -A auth=none -n</userinput>. A little <application>BrlTTY</application> window should appear. If the BrlTTY window doesn't appear, or any errors are shown, then you have some work to do.
</para>
</step>
<step>
<para>
Ensure the Python bindings for <application>BrlTTY</application> are installed by typing <userinput>python -c "import brlapi"</userinput> - if it produces errors, you probably don't have the Python bindings installed.
</para>
</step>
<step>
<para>
Ensure <application>liblouis</application> is  installed by typing <userinput>[ TBD ]</userinput> in a terminal window.
</para>
</step>
<step>
<para>
Test if <application>BrlTTY</application> automatically starts when a USB braille device is plugged in. 
</para>
</step>
</procedure>
</section>

<section>
<title>Test Magnification</title>
<para>
Orca uses <application>GNOME Mag</application> for magnification. For a compelling magnification experience, <application>GNOME Mag</application> uses various X Windows System server extensions: COMPOSITE, FIXES, DAMAGE, RANDR, and RENDER.
</para>
<procedure>
<step>
<para>
Verify <application>GNOME Mag</application> works by opening a terminal window and typing <userinput>magnifier -h</userinput>. The magnifier should come up in split-screen mode.
</para>
</step>
<step>
<para>
Run <application>Orca</application> and open the <guilabel>Magnifier</guilabel> preferences tab in the Preferences GUI. Enable magnification by selecting the checkbox at the top of the magnifier preferences tab. The magnifier should come up in full-screen mode by default. If it doesn't, you might not have the appropriate X Windows System server extensions installed/enabled, or you might be running into some odd conflict with a compositing manager, such as <application>Compiz</application>. If you're using <application>Compiz</application>, try going back to Metacity and starting over. 
</para>
</step>
</procedure>
</section>

<section>
<title>Test AT-SPI</title>
<para>
Orca uses the AT-SPI to communicate with applications on the desktop.
</para>
<procedure>
<step>
<para>
Enable assistive technologies for your login session. You should be able to do this by checking the "Enable assistive technologies" checkbox in the "Assistive Technologies" preferences dialog and then logging out and back in again. If you're bold and really want to do the right thing, you can ship with accessibility enabled by default for your distribution. This can be done by modifying the default gconf values: 
</para>
<para>
<userinput>gconftool-2 --direct --config-source xml:readwrite:/etc/gconf/gconf.xml.defaults --type bool --set /desktop/gnome/interface/accessibility true</userinput>
</para>
</step>
<step>
<para>
Login with accessibility enabled. You should not get any errors. Check xprop -root | grep AT_SPI_IOR. If you don't see an AT_SPI_IOR property on your root window, then something is wrong with your infrastructure. The usual cause of this is not setting the --libexecdir properly when building AT-SPI. Search the Orca WIKI Download/Install page for libexecdir for more information.
</para>
</step>
<step>
<para>
See if <application>Orca</application> can find all applications running on the desktop: <userinput>orca -l</userinput>. The output should include a large number of applications, such as the following:
</para>
<itemizedlist>
<listitem>
<para>
gnome-settings-daemon
</para>
</listitem>
<listitem>
<para>
iiim-panel
</para>
</listitem>
<listitem>
<para>
gnome-session
</para>
</listitem>
<listitem>
<para>
gnome-panel
</para>
</listitem>
<listitem>
<para>
gnome-power-manager
</para>
</listitem>
<listitem>
<para>
nautilus
</para>
</listitem>
<listitem>
<para>
gnome-volume-manager
</para>
</listitem>
<listitem>
<para>
ospm-applet
</para>
</listitem>
<listitem>
<para>
Thunderbird
</para>
</listitem>
<listitem>
<para>
Minefield
</para>
</listitem>
<listitem>
<para>
pidgin
</para>
</listitem>
<listitem>
<para>
gtk-window-decorator
</para>
</listitem>
<listitem>
<para>
orca
</para>
</listitem>
</itemizedlist>
</step>
</procedure>
</section>

<section>
<title>Test Accessibility-Related Themes</title>
<para>
The GNOME Desktop provides some themes which have been designed with low vision and other disabilities in mind.
</para>
<procedure>
<step>
<para>
Press <keycombo><keycap>Alt</keycap><keycap>F1</keycap></keycombo> and select <guilabel>System - Preferences - Appearance</guilabel>. The <guilabel>Appearance</guilabel> preference tool is displayed with multiple tabs along the top.
</para>
</step>
<step>
<para>
Select the <guilabel>Theme</guilabel> tab and verify the accessibility themes are installed; these include High Contrast, High Contrast Inverse, High Contrast Large Print Inverse, etc.
</para>
</step>
<step>
<para>
Select the various themes and verify they are working; apply any suggested fonts as you test the themes. Confirm that applications to be used comply with accessibility; eg, any custom visible widgets should be compliant with the selected theme and auto-adjust for color, widget size, and font size.
</para>
</step>
</procedure>
</section>

<section>
<title>Test Keyboard Accessibility (AccessX)</title>
<para>
<application>AccessX</application> delivers extended keyboard features for users with physical impairments. Toggle keys, sticky keys, bounce keys, mouse keys and other features are included with customization of each feature available through a single interface. 
</para>
<para>
<emphasis>StickyKeys</emphasis> - provides locking or latching of modifier keys (eg, <keycap>Shift</keycap>, <keycap>Ctrl</keycap>) so that they can be used without simultaneously pressing the keys being modified. This allows single finger operation of multiple key combinations.
</para>
<para>
<emphasis>MouseKeys</emphasis> - an alternative to the mouse which provides keyboard-based explicit control of cursor movement and all mouse button press/release events.
</para>
<para>
<emphasis>RepeatKeys</emphasis> - delays the onset of key repeat, allowing users with limited coordination time to release keys before multiple characters are sent.
</para>
<para>
<emphasis>SlowKeys</emphasis> - requires a key to be held down for a set period before the key is accepted. This allows users with limited
coordination to accidentally press keys without sending inadvertant key events.
</para>
<para>
<emphasis>ToggleKeys</emphasis> - indicates locking key state with a tone when pressed; eg, <keycap>Caps Lock</keycap>.
</para>
<para>
<emphasis>BounceKeys</emphasis> - requires a delay between keystrokes before accepting the next key press so users with tremors can prevent the system from accepting inadvertent key presses.
</para>
<procedure>
<step>
<para>
Press <keycombo><keycap>Alt</keycap><keycap>F1</keycap></keycombo> and select <guilabel>System - Preferences - Keyboard</guilabel>. The <guilabel>Keyboard</guilabel> preference tool is displayed with multiple tabs along the top.
</para>
</step>
<step>
<para>
Select the <guilabel>Accessibility</guilabel> tab and enable <guilabel>Sticky Keys</guilabel>, <guilabel>Slow Keys</guilabel> and <guilabel>Bounce Keys</guilabel>.
</para>
</step>
<step>
<para>
Verify the functionality of the features just enabled by interacting with the operating system and various applications. 
</para>
</step>
</procedure>
</section>

<section>
<title>Test Accessible Login</title>
<para>
The GNOME Desktop provides a login procedure which supports accessibility tools. If not properly functioning, many disabled users will not even make it to the desktop.
</para>
<note>
<para>
Accessible login features are presently 100% functioning for Solaris only.
</para>
</note>
<procedure>
<step>
<para>
Open the configuration file <userinput>/usr/share/gdm/default.conf</userinput>
</para>
</step>
<step>
<para>
Search for "Greeter" and replace <userinput>Greeter=/usr/lib/gdmgreeter</userinput> to <userinput>Greeter=/usr/lib/gdmlogin</userinput>
</para>
</step>
<step>
<para>
Arrow down to the line <userinput>#AddGtkModules=false</userinput> and change "false" to "true"; also, un-comment this line by removing the pound symbol (#) from the start of the line.
</para>
</step>
<step>
<para>
Arrow down to the line <userinput>#GtkModulesList=gail:atk-bridge:/usr/lib/gtk-2.0/modules/libdwellmouselistener:/usr/lib/gtk-2.0/modules/libkeymouselistener</userinput> and un-comment it.
</para>
</step>
<step>
<para>
Search for <userinput>Definition</userinput> and add the two parameters <userinput>+kb +accessx</userinput> at the end of the <userinput>command=...</userinput> line if these two parameters are absent.
</para>
</step>
<step>
<para>
Save your changes and close the file.
</para>
</step>
<step>
<para>
Bring <application>gdm</application> online with the following commands: <userinput>/usr/dt/bin/dtconfig -d</userinput> and <userinput>/svcadm enable svc:application/graphical-login/gdm:default</userinput>
</para>
</step>
<step>
<para>
Add user "gdm": open and edit the file <userinput>/etc/passwd</userinput>, search for
<userinput>gdm</userinput>, change this line to <userinput>gdm:x:50:50:GDM Reserved 
UID:/etc/X11/gdm/home:</userinput>, then save your changes and close the file.
</para>
</step>
<step>
<para>
Go to the directory /etc/X11/gdm and enter the commands <userinput>mkdir home</userinput> and <userinput>chown gdm:gdm home</userinput>
</para>
</step>
<step>
<para>
Reboot the machine. All the mouse/key gestures are recorded in the /etc/X11/gdm/modules
directory.
</para>
</step>
</procedure>
</section>

<section>
<title>Test Switch Devices</title>
<para>
GNOME supports all device connection types; these connections can be tested by using the  <application>gok</application> application, which can be driven by switch or other devices, like a second mouse or eye-tracker.
</para>
<para>
***WIP***
How to configure the second mouse:

A. For Solaris10

For sparc:
1. Enable the XKB extension of xsun server
<!-->
1a. Log in as root.
1b. Check if the path and file /etc/dt/config/Xservers exists on your systems.
1c. If the /etc/dt/config directory does not exist, enter the following command:

#mkdir -p /etc/dt/config

1d. If the Xservers file is not present, enter the following command:

#cp /usr/dt/config/Xservers /etc/dt/config/Xservers

1e. Open the Xservers file in a text editor and scroll to the end of the file.
6. Append the following to the command line at the end of the file:

+kb

1f. Save and close the file.
1g. Enter the following command at a command line:

#pkill -HUP dtlogin

1h. Log out of your GNOME session and log in again.
1i. To verify if XKB is running, enter xdpyinfo and search for XKEYBOARD in the extensions list.

<-->
2. Run "ls -l /dev/usb/hid*" to see what the existing device names are.
3. Attach the additional input device(the second mouse, usb physical interface) to the machine.
4. Run "ls -l /dev/usb/hid*" to see what the newly attached device names are. Note at the end of each symlink line it will list whetherit is a keyboard or a mouse(here we attached the mouse).
5. Backup the original file /usr/openwin/server/etc/OWconfig.
6. Edit the file /usr/openwin/server/etc/OWconfig, add lines of the following form to OWconfig, one for each device, and each with aunique name beginning with "IMOUSE" or "IKBD":

    For Keyboard:
    # sun Keyboard module
    class="XINPUT" name="IKBD2"
                dev="/dev/usb/hid3" strmod="usbkbm"            #"hid*" here is as same as which you got from step3.
                ddxHandler="ddxSUNWkbd.so.1"
                ddxInitFunc="ddxSUNWkbdProc";

    For Mouse:
    # sun Mouse module
    class="XINPUT" name="IMOUSE2"                                 #"IMOUSE*" is determined by the amount of mice which have been attached to your machine.
                dev="/dev/usb/hid3" strmod="usbms"               #"hid*" here is as same as which you got from step3.
                ddxHandler="ddxSUNWmouse.so.1"
                ddxInitFunc="ddxSUNWmouseProc";

6. Add "#" before each line of "Null Mouse module" section.

    # Null Mouse module
    #class="XINPUT" name="NMOUSE"
    #       ddxHandler="ddxSUNWmouse.so.1"
    #       ddxInitFunc="ddxnullmouseProc";

7. Save changes and restart Xsession.




For X86:

A: usb: core pointer, ps2: other input device

1. Run "ls -l /dev/usb/hid*" to see what the existing device names are.
2. Attach the additional input device(the second mouse, usb physical interface) to the machine.
3. Run "ls -l /dev/usb/hid*" to see what the newly attached device names are. Note at the end of each symlink line it will list whetherit is a keyboard or a mouse(here we attached the mouse).
4. Backup the original file /etc/X11/xorg.conf ( If this file doesn't exist, please run /usr/X11/bin/xorgconfig or /usr/X11/bin/xorgcfg to create it manually).
5. Edit the file /etc/X11/xorg.conf, add lines of the following form to xorg.conf, one for each device.
6. At the top of the xorg.conf file, you need to add in the name of the second input device which you are configuring e.g. in this case it is ps2.

    Section "ServerLayout"
                Identifier               "X.org Configured"
                Screen               0   "Screen0" 0 0
                InputDevice            "usb" "CorePointer"
                InputDevice            "Keyboard0" "CoreKeyboard"
                InputDevice            "ps2"

7. Add the following lines into input devices section.

For the usb mouse, the section below should be fine.

    Section "InputDevice"
            Identifier  "usb"
            Driver      "mouse"
            Option      "Protocol" "VUID"
            Option      "Device" "/dev/usb/hid0"                           #"hid*" here is as same as which you got from step3.
            Option      "SteamsModule" "usbms"
            Option      "ZAxisMapping" "4 5 6 7"
    EndSection

If you are setting up a ps2 mouse, you need to include the lines Protocol and StreamsModule. See below.

    Section "InputDevice"
                Identifier               "ps2"
                Driver                    "mouse"
                Option                   "Protocol" "VUID"
                Option                   "StreamsModule" "vuid3ps2"
                Option                   "Device" "/dev/kdmouse"
                Option                   "ZAxisMapping" "4 5 6 7"
    EndSection

8. Save changes and restart Xsession.


B: ps2: core pointer, usb: other input device


1. Run "ls -l /dev/usb/hid*" to see what the existing device names are.
2. Attach the additional input device(the second mouse, usb physical interface) to the machine.
3. Run "ls -l /dev/usb/hid*" to see what the newly attached device names are. Note at the end of each symlink line it will list whetherit is a keyboard or a mouse(here we attached the mouse).
4. Backup the original file /etc/X11/xorg.conf ( If this file doesn't exist, please run /usr/X11/bin/xorgconfig or /usr/X11/bin/xorgcfg to create it manually).
5. Edit the file /etc/X11/xorg.conf, add lines of the following form to xorg.conf, one for each device.
6. At the top of the xorg.conf file, you need to add in the name of the second input device which you are configuring e.g. in this case it is ps2.

    Section "ServerLayout"
                Identifier               "X.org Configured"
                Screen               0   "Screen0" 0 0
                InputDevice            "ps2" "CorePointer"
                InputDevice            "Keyboard0" "CoreKeyboard"
                InputDevice            "usb"

7. Add the following lines into input devices section.

For the ps2 mouse, the section below should be fine.

    Section             "InputDevice"
            Identifier  "ps2"
            Driver      "mouse"
            Option      "Protocol" "VUID"
            Option      "Device" "/dev/kdmouse"
            Option      "StreamsModule" "vuid3ps2"
            Option      "ZAxisMapping" "4 5 6 7"
    EndSection

If you are setting up a usb mouse, you need to include the lines Protocol. See below.

    Section             "InputDevice"
        Identifier     "usb"
        Driver         "mouse"
        Option         "Protocol" "VUID"
        Option         "Device" "/dev/usb/hid0"
        Option         "StreamsModule" "usbms"
        Option         "ZAxisMapping" "4 5 6 7"
    EndSection


8. Save changes and restart Xsession.

C: usb: core pointer, usb: other input device

1. Run "ls -l /dev/usb/hid*" to see what the existing device names are.
2. Attach the additional input device(the second mouse, usb physical interface) to the machine.
3. Run "ls -l /dev/usb/hid*" to see what the newly attached device names are. Note at the end of each symlink line it will list whetherit is a keyboard or a mouse(here we attached the mouse).
4. Backup the original file /etc/X11/xorg.conf ( If this file doesn't exist, please run /usr/X11/bin/xorgconfig or /usr/X11/bin/xorgcfg to create it manually).
5. Edit the file /etc/X11/xorg.conf, add lines of the following form to xorg.conf, one for each device.
6. At the top of the xorg.conf file, you need to add in the name of the second input device which you are configuring e.g. in this case it is other.

    Section "ServerLayout"
                Identifier               "X.org Configured"
                Screen               0   "Screen0" 0 0
                InputDevice            "Mouse0" "CorePointer"
                InputDevice            "Keyboard0" "CoreKeyboard"
                InputDevice            "Mouse1"
    EndSection

7. Add or modify the following lines into input devices section.

For the usb core pointer mouse, you can modify the section as below:

    Section             "InputDevice"
        Identifier     "Mouse0"
        Driver         "mouse"
        Option         "Protocol" "VUID"
        Option         "Device" "/dev/usb/hid0" #"hid*" here is as same as which you got from step1.
        Option         "StreamsModule" "usbms"
        Option         "ZAxisMapping" "4 5 6 7"
    EndSection


For other input device, you need to include following section:

    Section             "InputDevice"
        Identifier      "Mouse1"
        Driver           "mouse"
        Option           "Protocol" "VUID"
        Option           "Device" "/dev/usb/hid2"
        Option           "StreamsModule" "usbms"
        Option           "ZAxisMapping" "4 5 6 7"
    EndSection



8. Save changes and restart Xsession.




B. For Linux:

1. Attach the second usb mouse to the machine.
2. Backup the original file /etc/X11/XF86Config .
3. Edit the file /etc/X11/XF86Config according to following comments.

    Section "InputDevice"
        Driver       "mouse"
        Identifier   "Mouse[1]"
#     Option        "Device" "/dev/psaux"
        Option       "Device" "/dev/input/mouse1"
#     Option       "Name" "Autodetection"
        Option       "Emulate3Buttons" "on"
        Option       "Name" "Autodetection"
#      Option       "Protocol" "explorerps/2"
        Option       "Vendor" "Sysp"
        Option        "ZAxisMapping" "4 5"
    EndSection


    Section "InputDevice"
        Driver       "mouse"
        Identifier   "Mouse[3]"
        Option       "Device" "/dev/input/mouse0"
        Option       "Emulate3Buttons" "on"
        Option       "Name" "Autodetection"
#      Option       "Protocol" "explorerps/2"
        Option       "Vendor" "Sysp"
        Option        "ZAxisMapping" "4 5"
    EndSection

............................................................................................................

    Section "ServerLayout"
         Identifier   "Layout[all]"
         InputDevice   "Keyboard[0]" "CoreKeyboard"
         InputDevice   "Mouse[1]"   "CorePointer"
         InputDevice   "Mouse[3]"
         Option            "Clone" "off"
         Option            "Xinerama" "off"
         Screen            "Screen[0]"
    EndSection


4. Save changes and restart Xsession.

All settings are passed on two machines. 
</para>
</section>

</chapter>
